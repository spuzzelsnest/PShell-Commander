<?xml version="1.0" encoding="utf-8" ?>
<helpItems schema="maml">
<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-ADGroupMember
		</command:name>
		<maml:description>
			<maml:para>Adds one or more members to an Active Directory group.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Add</command:verb>
		<command:noun>ADGroupMember</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Add-ADGroupMember cmdlet adds one or more users, groups, service accounts, or computers as new members of an Active Directory group.
 
The Identity parameter specifies the Active Directory group that receives the new members. You can identify a group by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also specify group object variable, such as $&lt;localGroupObject&gt;, or pass a group object through the pipeline to the Identity parameter. For example, you can use the Get-ADGroup cmdlet to get a group object and then pass the object through the pipeline to the Add-ADGroupMember cmdlet. 

The Members parameter specifies the new members to add to a group. You can identify a new member by its distinguished name (DN), GUID, security identifier (SID) or SAM account name. You can also specify user, computer, and group object variables, such as $&lt;localUserObject&gt;. If you are specifying more than one new member, use a comma-separated list. You cannot pass user, computer, or group objects through the pipeline to this cmdlet. To add user, computer, or group objects to a group by using the pipeline, use the Add-ADPrincipalGroupMembership cmdlet.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-ADGroupMember</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>Members</maml:name>
				<maml:description>
					<maml:para>Specifies a set of user, group, and computer objects in a comma-separated list to add to a group. To identify each object, use one of the following property values. Note: The identifier in parentheses is the LDAP display name.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

You can also provide objects to this parameter directly.

The following examples show how to specify this parameter.

This example specifies a user and group to add by specifying the distinguished name and the SAM Account Name properties.
  -Members &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;, &quot;saradavisreports&quot;

This example specifies a user and a group object that are defined in the current Windows PowerShell session as input for the parameter. 

  -Members $userObject, $groupObject

The objects specified for this parameter are processed as Microsoft.ActiveDirectory.Management.ADPrincipal objects. Derived types, such as the following are also received by this parameter.
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADGroup

You cannot pass objects through the pipeline to this parameter. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>Members</maml:name>
			<maml:description>
				<maml:para>Specifies a set of user, group, and computer objects in a comma-separated list to add to a group. To identify each object, use one of the following property values. Note: The identifier in parentheses is the LDAP display name.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

You can also provide objects to this parameter directly.

The following examples show how to specify this parameter.

This example specifies a user and group to add by specifying the distinguished name and the SAM Account Name properties.
  -Members &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;, &quot;saradavisreports&quot;

This example specifies a user and a group object that are defined in the current Windows PowerShell session as input for the parameter. 

  -Members $userObject, $groupObject

The objects specified for this parameter are processed as Microsoft.ActiveDirectory.Management.ADPrincipal objects. Derived types, such as the following are also received by this parameter.
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADGroup

You cannot pass objects through the pipeline to this parameter. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A group object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified group object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with a read-only domain controller.
This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADGroupMember SvcAccPSOGroup SQL01,SQL02
</dev:code>
  			<dev:remarks>
  			        <maml:para>Adds the user accounts with SamAccountNames SQL01,SQL02 to the group SvcAccPSOGroup.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADGroupMember</dev:code>
  			<dev:remarks>
 				<maml:para>cmdlet Add-ADGroupMember at command pipeline position 1
Supply values for the following parameters:
Identity: RodcAdmins
Members[0]: JohnSmith
Members[1]: JeffPrice
Members[2]:</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Demonstrates default behavior for this cmdlet (no parameters specified). Adds user accounts with SamAccountNames JohnSmith and JeffPrice to the group RodcAdmins.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADGroup -Server localhost:60000 -SearchBase &quot;OU=AccountDeptOU,DC=AppNC&quot; -filter { name -like &quot;AccountLeads&quot; } | Add-ADGroupMember -Members &quot;CN=SanjayPatel,OU=AccountDeptOU,DC=AppNC&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Gets a group from the Organizational Unit &quot;OU=AccountDeptOU,DC=AppNC&quot; in the AD LDS instance localhost:60000 that has the name &quot;AccountLeads&quot; and then pipes it to Add-ADGroupMember, which then adds the user account with DistinguishedName &quot;CN=SanjayPatel,OU=AccountDeptOU,DC=AppNC&quot; to it.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144933</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-ADPrincipalGroupMembership
		</command:name>
		<maml:description>
			<maml:para>Adds a member to one or more Active Directory groups.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Add</command:verb>
		<command:noun>ADPrincipalGroupMembership</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Add-ADPrincipalGroupMembership cmdlet adds a user, group, service account, or computer as a new member to one or more Active Directory groups.

The Identity parameter specifies the new user, computer, or group to add. You can identify the user, group, or computer by its distinguished name (DN), GUID, security identifier (SID), or SAM account name. You can also specify a user, group, or computer object variable, such as $&lt;localGroupObject&gt;, or pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADGroup cmdlet to get a group object and then pass the object through the pipeline to the Add-ADPrincipalGroupMembership cmdlet. Similarly, you can use Get-ADUser or Get-ADComputer to get user and computer objects to pass through the pipeline.

This cmdlet collects all of the user, computer and group objects from the pipeline, and then adds these objects to the specified group by using one Active Directory operation.

The MemberOf parameter specifies the groups that receive the new member. You can identify a group by its distinguished name (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also specify group object variable, such as $&lt;localGroupObject&gt;. To specify more than one group, use a comma-separated list. You cannot pass group objects through the pipeline to the MemberOf parameter. To add to a group by passing the group through the pipeline, use the Add-ADGroupMember cmdlet.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-ADPrincipalGroupMembership</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory principal object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  - Microsoft.ActiveDirectory.Management.ADGroup
  - Microsoft.ActiveDirectory.Management.ADUser
  - Microsoft.ActiveDirectory.Management.ADComputer
  - Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a principal object instance named &quot;principalInstance&quot;.
  -Identity $principalInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>MemberOf</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory groups to add a user, computer, or group to as a member. You can identify a group by providing one of the following values. Note: The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,CN=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

If you are specifying more than one group, use commas to separate the groups in the list.

The following example shows how to specify this parameter by using SAM account name values.
  -MemberOf &quot;SaraDavisGroup&quot;, &quot;JohnSmithGroup&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADGroup[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory principal object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  - Microsoft.ActiveDirectory.Management.ADGroup
  - Microsoft.ActiveDirectory.Management.ADUser
  - Microsoft.ActiveDirectory.Management.ADComputer
  - Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a principal object instance named &quot;principalInstance&quot;.
  -Identity $principalInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>MemberOf</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory groups to add a user, computer, or group to as a member. You can identify a group by providing one of the following values. Note: The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,CN=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

If you are specifying more than one group, use commas to separate the groups in the list.

The following example shows how to specify this parameter by using SAM account name values.
  -MemberOf &quot;SaraDavisGroup&quot;, &quot;JohnSmithGroup&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADGroup[]</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADPrincipal</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A principal object (Microsoft.ActiveDirectory.Management.ADPrincipal) that represents a user, computer or group is received by the Identity parameter. Derived types, such as the following are also received by this parameter.
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADGroup
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADPrincipal</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns a principal object that represents the modified user, computer or group object when the PassThru parameter is specified. By default, this cmdlet does not generate any output. 
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with a read-only domain controller.
This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADPrincipalGroupMembership -Identity SQLAdmin1 -MemberOf DlgtdAdminsPSOGroup
</dev:code>
  			<dev:remarks>
  			        <maml:para>Adds the user with SamAccountName &quot;SQLAdmin1&quot; to the group &quot;DlgtdAdminsPSOGroup&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser -Filter 'Name -like &quot;*SvcAccount*&quot;' | Add-ADPrincipalGroupMembership -MemberOf SvcAccPSOGroup
</dev:code>
  			<dev:remarks>
  			        <maml:para>Gets all users with &quot;SvcAccount&quot; in their name and adds it to the group &quot;SvcAccPSOGroup&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADPrincipalGroupMembership</dev:code>
  			<dev:remarks>
 				<maml:para>cmdlet Add-ADPrincipalGroupMembership at command pipeline position 1
Supply values for the following parameters:
Identity: JeffPrice
MemberOf[0]: RodcAdmins
MemberOf[1]: Allowed RODC Password Replication Group
MemberOf[2]:</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Demonstrates the default behavior of this cmdlet (no parameters specified).</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser  -Server localhost:60000 -SearchBase &quot;DC=AppNC&quot; -filter { Title -eq &quot;Account Lead&quot; -and Office -eq &quot;Branch1&quot; } | Add-ADPrincipalGroupMembership -MemberOf &quot;CN=AccountLeads,OU=AccountDeptOU,DC=AppNC&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Adds all employees in &quot;Branch1&quot; in the AD LDS instance &quot;localhost:60000&quot; whose title is &quot;Account Lead&quot; to the group with the DistinguishedName &quot;CN=AccountLeads,OU=AccountDeptOU,DC=AppNC&quot;.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144934</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-ADFineGrainedPasswordPolicySubject
		</command:name>
		<maml:description>
			<maml:para>Applies a fine-grained password policy to one more users and groups.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Add</command:verb>
		<command:noun>ADFineGrainedPasswordPolicySubject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Add-ADFineGrainedPasswordPolicySubject cmdlet applies a fine-grained password policy to one or more global security groups and users. 

The Identity parameter specifies the fine-grained password policy to apply. You can identify a fine-grained password policy by its distinguished name, GUID or name. You can also set the Identity parameter to a fine-grained password policy object variable, such as $&lt;localPasswordPolicyObject&gt;, or pass a fine-grained password policy object through the pipeline to the Identity parameter. For example, you can use the Get-ADFineGrainedPasswordPolicy cmdlet to get a fine-grained password policy object and then pass the object through the pipeline to the Add-ADFineGrainedPasswordPolicySubject cmdlet. 

The Subjects parameter specifies the users and global security groups. You can identify a user or global security group by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also specify user and global security group object variables, such as $&lt;localUserObject&gt;. If you are specifying more than one user or group, use a comma-separated list. To pass user and global security group objects through the pipeline to the Subjects parameter, use the Get-ADUser or the Get-ADGroup cmdlets to retrieve the user or group objects, and then pass these objects through the pipeline to the Add-ADFineGrainedPasswordPolicySubject cmdlet. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-ADFineGrainedPasswordPolicySubject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="2">
				<maml:name>Subjects</maml:name>
				<maml:description>
					<maml:para>Specifies one or more users or groups. To specify more than one user or group, use a comma-separated list. You can identify a user or group by one of the following property values.
  Distinguished Name (DN)
    Example: CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

Note: The identifier in parentheses is the LDAP display name for the attribute.

You can also provide objects to this parameter directly.

The following example shows how to set this parameter to a list of users and groups by using a distinguished name and SAM account names.
  -Subjects &quot;CN=SaraDavis, CN=Users,DC=corp,DC=contoso,DC=com&quot;,&quot;donhall&quot;,&quot;saradavisreports&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="2">
			<maml:name>Subjects</maml:name>
			<maml:description>
				<maml:para>Specifies one or more users or groups. To specify more than one user or group, use a comma-separated list. You can identify a user or group by one of the following property values.
  Distinguished Name (DN)
    Example: CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

Note: The identifier in parentheses is the LDAP display name for the attribute.

You can also provide objects to this parameter directly.

The following example shows how to set this parameter to a list of users and groups by using a distinguished name and SAM account names.
  -Subjects &quot;CN=SaraDavis, CN=Users,DC=corp,DC=contoso,DC=com&quot;,&quot;donhall&quot;,&quot;saradavisreports&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy, Microsoft.ActiveDirectory.Management.ADPrincipal</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A fine-grained password policy object is received by the Identity parameter. One or more principal objects that represent users and security group objects are received by the Subjects parameter. Derived principal types, such as the following are also accepted by the Subjects parameter:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified fine-grained password policy object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with a read-only domain controller.
This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADFineGrainedPasswordPolicySubject DomainUsersPSO -Subjects 'Domain Users'
</dev:code>
  			<dev:remarks>
  			        <maml:para>Apply the Fine-Grained Password Policy named DomainUsersPSO to a Global Security Group 'Domain Users'.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADFineGrainedPasswordPolicySubject DlgtdAdminsPSO -Subjects BobKe,KimAb
</dev:code>
  			<dev:remarks>
  			        <maml:para>Apply the Fine-Grained Password Policy named DlgtdAdminsPSO to two users, with SamAccountNames BobKe and KimAb.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADFineGrainedPasswordPolicySubject DlgtdAdminsPSO -Subjects DlgtdAdminGroup</dev:code>
  			<dev:remarks>
  			        <maml:para>Apply the Fine-Grained Password Policy named DlgtdAdminsPSO to the group DlgtdAdminGroup.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADGroup -Filter {lastname -eq &quot;John&quot;} | Add-ADFineGrainedPasswordPolicySubject DlgtdAdminsPSO</dev:code>
  			<dev:remarks>
  			        <maml:para>Apply the Fine-Grained Password Policy named DlgtdAdminsPSO to any users whose last names is John.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144935</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-ADDomainControllerPasswordReplicationPolicy
		</command:name>
		<maml:description>
			<maml:para>Adds users, computers, and groups to the allowed or denied list of a read-only domain controller password replication policy.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Add</command:verb>
		<command:noun>ADDomainControllerPasswordReplicationPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Add-ADDomainControllerPasswordReplicationPolicy cmdlet adds one or more users, computers, and groups to the allowed or denied list of a read-only domain controller (RODC) password replication policy. 

The Identity parameter specifies the RODC that uses the allowed and denied lists to apply the password replication policy. You can identify a domain controller by its GUID, IPV4Address, global IPV6Address, or DNS host name. You can also identify a domain controller by the name of the server object that represents the domain controller, the Distinguished Name (DN) of the NTDS settings object of the server object, the GUID of the NTDS settings object of the server object under the configuration partition, or the DN of the computer object that represents the domain controller. You can also set the Identity parameter to a domain controller object variable, such as $&lt;localDomainControllerobject&gt;, or pass a domain controller object through the pipeline to the Identity parameter. For example, you can use the Get-ADDomainController cmdlet to get a domain controller object and then pass the object through the pipeline to the Add-ADDomainControllerPasswordReplicationPolicy cmdlet. You must specify a read-only domain controller. If you specify a writeable domain controller for this parameter, the cmdlet returns a non-terminating error. 

The AllowedList parameter specifies the users, computers, and groups to add to the allowed list. Similarly, the DeniedList parameter specifies the users, computers, and groups to add to the denied list. You must specify either one or both of the AllowedList and DeniedList parameters. You can identify a user, computer, or group by distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also specify user, computer, or group variables, such as $&lt;localUserObject&gt;. If you are specifying more than one item, use a comma-separated list. If a specified user, computer, or group is not on the allowed or denied list, the cmdlet does not return an error.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-ADDomainControllerPasswordReplicationPolicy</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllowedList</maml:name>
				<maml:description>
					<maml:para>Specifies the users, computers, groups or other accounts to add to the list of accounts allowed to replicate their passwords to this Read-only domain controller (RODC). You can specify more than one value by using a comma-separated list. To identify each user, computer, or group, use one of the following property values:
  Distinguished name 
      Example:  CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com
  GUID  (objectGUID) 
      Example:  599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security identifier (objectSid) 
      Example:  S-1-5-21-3165297888-301567370-576410423-1103
  Security accounts manager (SAM) account name  (sAMAccountName) 
      Example:  saradavis

The following example shows how to specify a group and user by using a SAM account name and a distinguished name.
  -AllowedList &quot;SaraDavisGroup&quot;, &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. Unless specified otherwise, these values are for the server object that represents the domain controller.

  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name of the NTDS Settings object.
  -Identity &quot;CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso&quot;

This example shows how to set this parameter to a domain controller object instance named &quot;AD_DCInstance&quot;.
  -Identity $AD_DCInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Add-ADDomainControllerPasswordReplicationPolicy</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>DeniedList</maml:name>
				<maml:description>
					<maml:para>Specifies the users, computers, groups or other accounts to add to the list of accounts that are denied the right to replicate their passwords to this Read-only domain controller (RODC). You can specify more than one value by using a comma-separated list. To identify each user, computer, or group, use one of the following property values:
  Distinguished name 
      Example:  CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com
  GUID  (objectGUID) 
      Example:  599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security identifier (objectSid) 
      Example:  S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name (sAMAccountName) 
      Example:  saradavis

The following example shows how to specify a group and user by using a SAM account name and a distinguished name.
  -DeniedList &quot;SaraDavisGroup&quot;, &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. Unless specified otherwise, these values are for the server object that represents the domain controller.

  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name of the NTDS Settings object.
  -Identity &quot;CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso&quot;

This example shows how to set this parameter to a domain controller object instance named &quot;AD_DCInstance&quot;.
  -Identity $AD_DCInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>AllowedList</maml:name>
			<maml:description>
				<maml:para>Specifies the users, computers, groups or other accounts to add to the list of accounts allowed to replicate their passwords to this Read-only domain controller (RODC). You can specify more than one value by using a comma-separated list. To identify each user, computer, or group, use one of the following property values:
  Distinguished name 
      Example:  CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com
  GUID  (objectGUID) 
      Example:  599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security identifier (objectSid) 
      Example:  S-1-5-21-3165297888-301567370-576410423-1103
  Security accounts manager (SAM) account name  (sAMAccountName) 
      Example:  saradavis

The following example shows how to specify a group and user by using a SAM account name and a distinguished name.
  -AllowedList &quot;SaraDavisGroup&quot;, &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>DeniedList</maml:name>
			<maml:description>
				<maml:para>Specifies the users, computers, groups or other accounts to add to the list of accounts that are denied the right to replicate their passwords to this Read-only domain controller (RODC). You can specify more than one value by using a comma-separated list. To identify each user, computer, or group, use one of the following property values:
  Distinguished name 
      Example:  CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com
  GUID  (objectGUID) 
      Example:  599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security identifier (objectSid) 
      Example:  S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name (sAMAccountName) 
      Example:  saradavis

The following example shows how to specify a group and user by using a SAM account name and a distinguished name.
  -DeniedList &quot;SaraDavisGroup&quot;, &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. Unless specified otherwise, these values are for the server object that represents the domain controller.

  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name of the NTDS Settings object.
  -Identity &quot;CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso&quot;

This example shows how to set this parameter to a domain controller object instance named &quot;AD_DCInstance&quot;.
  -Identity $AD_DCInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			<dev:type>
				<maml:name>ADDomainController</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDomainController</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A read-only domain controller (RODC) object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None.</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with a read-only domain controller.
This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADDomainControllerPasswordReplicationPolicy -Identity &quot;FABRIKAM-RODC1&quot; -AllowedList &quot;JesperAaberg&quot;, &quot;AdrianaAdams&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Adds user accounts to the Allowed list on a given RODC with the specified SamAccountNames.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADDomainControllerPasswordReplicationPolicy -Identity &quot;FABRIKAM-RODC1&quot; -DeniedList &quot;MichaelAllen&quot;, &quot;ElizabethAndersen&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Adds user accounts to the Allowed list on a given RODC with the specified SamAccountNames.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144936</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADDomainController</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADDomainControllerPasswordReplicationPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-ADComputerServiceAccount
		</command:name>
		<maml:description>
			<maml:para>Adds one or more service accounts to an Active Directory computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Add</command:verb>
		<command:noun>ADComputerServiceAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Add-ADComputerServiceAccount cmdlet adds one or more computer service accounts to an Active Directory computer. 

The Computer parameter specifies the Active Directory computer that will host the new service accounts. You can identify a computer by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the Computer parameter to a computer object variable, such as $&lt;localComputerobject&gt;, or pass a computer object through the pipeline to the Computer parameter. For example, you can use the Get-ADComputer cmdlet to retrieve a computer object and then pass the object through the pipeline to the Add-ADComputerServiceAccount cmdlet. 

The ServiceAccount parameter specifies the service accounts to add. You can identify a service account by its distinguished name (DN), GUID, Security Identifier (SID) or Security Accounts Manager (SAM) account name. You can also specify service account object variables, such as $&lt;localServiceAccountObject&gt;. If you are specifying more than one account, use a comma-separated list.

Note: Adding a service account is a different operation than installing the service account locally.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-ADComputerServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>ServiceAccount</maml:name>
				<maml:description>
					<maml:para>Specifies one or more Active Directory service accounts. You can identify a service account by using one of the following property values: 
  Distinguished Name 
    Example: CN=serviceadmin,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
   GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
   SAM Account Name (sAMAccountName) 
    Example: serviceadmin

The following example shows how to specify a service account for this parameter using the SAM Account Name.
  -ServiceAccount &quot;serviceAdminEurope&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADServiceAccount[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			<dev:type>
				<maml:name>ADComputer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>ServiceAccount</maml:name>
			<maml:description>
				<maml:para>Specifies one or more Active Directory service accounts. You can identify a service account by using one of the following property values: 
  Distinguished Name 
    Example: CN=serviceadmin,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
   GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
   SAM Account Name (sAMAccountName) 
    Example: serviceadmin

The following example shows how to specify a service account for this parameter using the SAM Account Name.
  -ServiceAccount &quot;serviceAdminEurope&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADServiceAccount[]</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A computer object is received by the Computer parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified computer object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with a read-only domain controller.
This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADComputerServiceAccount -Computer ComputerAcct1 -serviceAccount SvcAcct1
</dev:code>
  			<dev:remarks>
  			        <maml:para>Add the service account 'SvcAcct1' to a Computer Account 'ComputerAcct1'</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Add-ADComputerServiceAccount  -Computer ComputerAcct1 -serviceAccount SvcAcct1,SvcAcct2
</dev:code>
  			<dev:remarks>
  			        <maml:para>Add 2 service accounts 'SvcAcct1,SvcAcct2' to a Computer Account 'ComputerAcct1'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144937</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Reset-ADServiceAccountPassword
		</command:name>
		<maml:description>
			<maml:para>Resets the service account password for a computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Reset</command:verb>
		<command:noun>ADServiceAccountPassword</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Reset-ADServiceAccountPassword cmdlet resets the service account password for the local computer. This cmdlet needs to be run on the computer where the service account is installed.
 
The Identity parameter specifies the Active Directory service account that receives the password reset. You can identify a service account by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to a service account object variable, such as $&lt;localServiceAccountObject&gt;, or pass a service account object through the pipeline to the Identity parameter. For example, you can use the Get-ADServiceAccount cmdlet to retrieve a service account object and then pass the object through the pipeline to the Reset- ADServiceAccountPassword cmdlet.

Note: When you reset the password for a computer, you also reset all of the service account passwords for that computer.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Apply-ADServiceAccountPassword</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A service account object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Reset-ADServiceAccountPassword ServiceAccount1
</dev:code>
  			<dev:remarks>
  			        <maml:para>Reset the password on the service account 'ServiceAccount1' </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144938</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Clear-ADAccountExpiration
		</command:name>
		<maml:description>
			<maml:para>Clears the expiration date for an Active Directory account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Clear</command:verb>
		<command:noun>ADAccountExpiration</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Clear-ADAccountExpiration cmdlet clears the expiration date for an Active Directory user or computer account. When you clear the expiration date for an account, the account does not expire.

The Identity parameter specifies the user or computer account to modify. You can identify a user or group by its distinguished name (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to a user or computer object variable, such as $&lt;localUserObject&gt;, or pass a user or computer object through the pipeline to the Identity parameter. For example, you can use the Get-ADUser, Get-ADComputer or Search-ADAccount cmdlet to retrieve an object and then pass the object through the pipeline to the Clear-ADAccountExpiration cmdlet. 

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Clear-ADAccountExpiration</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An account object (Microsoft.ActiveDirectory.Management.ADAccount) is received by the Identity parameter.

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Clear-ADAccountExpiration -Identity JeffPrice
</dev:code>
  			<dev:remarks>
  			        <maml:para>Clears the account expiration date for the user with SamAccountName: JeffPrice.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Clear-ADAccountExpiration -Identity &quot;CN=JeffPrice,DC=AppNC&quot; -server &quot;FABRIKAM-SVR1:60000&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Clears the account expiration date for the user with DistinguishedName: &quot;CN=JeffPrice,DC=AppNC&quot; on the AD LDS instance: &quot;FABRIKAM-SVR1:60000&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144939</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountExpiration</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Search-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Disable-ADAccount
		</command:name>
		<maml:description>
			<maml:para>Disables an Active Directory account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Disable</command:verb>
		<command:noun>ADAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Disable-ADAccount cmdlet disables an Active Directory user, computer, or service account.
 
The Identity parameter specifies the Active Directory user, computer service account, or other service account that you want to disable. You can identify an account by its distinguished name (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to an object variable such as $&lt;localADAccountObject&gt;, or you can pass an account object through the pipeline to the Identity parameter. For example, you can use the Get-ADUser cmdlet to retrieve a user account object and then pass the object through the pipeline to the Disable-Account cmdlet. Similarly, you can use Get-ADComputer and Search-ADAccount to retrieve account objects.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Disable-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An account object is received by the Identity parameter.

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Disable-ADAccount -Identity KimAb
</dev:code>
  			<dev:remarks>
  			        <maml:para>Disables the account with SamAccountName: KimAB.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Disable-ADAccount -Identity &quot;CN=Kim Abercrombie,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Disables the account with DistinguishedName: &quot;CN=Kim Abercrombie,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser -Filter 'Name -like &quot;*&quot;' -SearchBase &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot; | Disable-ADAccount
</dev:code>
  			<dev:remarks>
  			        <maml:para>Disables all accounts in the OU: &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144940</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Search-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unlock-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountExpiration</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ADAccountExpiration</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountPassword</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADAccountAuthorizationGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountControl</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Disable-ADOptionalFeature
		</command:name>
		<maml:description>
			<maml:para>Disables an Active Directory optional feature.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Disable</command:verb>
		<command:noun>ADOptionalFeature</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Disable-ADOptionalFeature disables an Active Directory optional feature that is associated with a particular Domain Mode or Forest Mode.

The Identity parameter specifies the Active Directory optional feature that you want to disable. You can identify an optional feature by its distinguished name (DN), feature GUID, or object GUID. You can also set the parameter to an optional feature object variable, such as $&lt;localOptionalFeatureObject&gt; or you can pass an optional feature object through the pipeline to the Identity parameter. For example, you can use the Get-ADOptionalFeature cmdlet to retrieve an optional feature object and then pass the object through the pipeline to the Disable-ADOptionalFeature cmdlet.

The Scope parameter specifies the scope at which the optional feature is disabled. Possible values for this parameter are Domain and Forest. 

The Target parameter specifies the domain or forest on which the optional feature is disabled. You can identify the domain or forest by its fully-qualified domain name (FQDN), NetBIOS name, or the distinguished name (DN) of the domain naming context (domain NC). </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Disable-ADOptionalFeature</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory optional feature object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  Feature GUID (featureGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Object GUID (objectGUID) 
    Example: 482ab21c-823e-401e-879a-ac7383d64eb9

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an optional feature object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to an optional feature object instance named &quot;optionalFeatureInstance&quot;.
  -Identity $optionalFeatureInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADOptionalFeature</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope at which the feature is enabled or disabled. Possible values for this parameter include: 
  Domain or 0
  Forest or 1

The following example shows how to set this parameter so that optional features are enabled or disabled within the scope of the forest.
  -Scope Forest</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Unknown</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ForestOrConfigurationSet</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Domain</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="4">
				<maml:name>Target</maml:name>
				<maml:description>
					<maml:para>Specifies the domain or forest in which to modify the optional feature. You can identify the target domain or forest by providing one of the following values:  
  Fully-qualified domain name of the forest or domain 
    Example: corp.Fabrikam.com
  NetBIOS name of the forest or domain
    Example: corp
  Distinguished name of the domain naming context (domain NC)
    Example:  DC=corp,DC=Fabrikam,DC=com

The following example shows how to set this parameter to a domain NC.
  -Target &quot;DC=corp,DC=Fabrikam,DC=com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADEntity</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory optional feature object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  Feature GUID (featureGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Object GUID (objectGUID) 
    Example: 482ab21c-823e-401e-879a-ac7383d64eb9

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an optional feature object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to an optional feature object instance named &quot;optionalFeatureInstance&quot;.
  -Identity $optionalFeatureInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOptionalFeature</command:parameterValue>
			<dev:type>
				<maml:name>ADOptionalFeature</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope at which the feature is enabled or disabled. Possible values for this parameter include: 
  Domain or 0
  Forest or 1

The following example shows how to set this parameter so that optional features are enabled or disabled within the scope of the forest.
  -Scope Forest</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOptionalFeatureScope</command:parameterValue>
			<dev:type>
				<maml:name>ADOptionalFeatureScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Unknown</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ForestOrConfigurationSet</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Domain</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="4">
			<maml:name>Target</maml:name>
			<maml:description>
				<maml:para>Specifies the domain or forest in which to modify the optional feature. You can identify the target domain or forest by providing one of the following values:  
  Fully-qualified domain name of the forest or domain 
    Example: corp.Fabrikam.com
  NetBIOS name of the forest or domain
    Example: corp
  Distinguished name of the domain naming context (domain NC)
    Example:  DC=corp,DC=Fabrikam,DC=com

The following example shows how to set this parameter to a domain NC.
  -Target &quot;DC=corp,DC=Fabrikam,DC=com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADEntity</command:parameterValue>
			<dev:type>
				<maml:name>ADEntity</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADOptionalFeature</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An optional feature object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Disable-ADOptionalFeature 'Feature 1' -Scope ForestOrConfigurationSet -Target 'fabrikam' -Server DC1
</dev:code>
  			<dev:remarks>
  			        <maml:para>Disable the optional feature (name 'Feature 1') for the forest (NetBIOS name 'fabrikam'). This operation should be performed against the DC that holds the naming master FSMO role.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Disable-ADOptionalFeature -Identity 'CN=Feature 1,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=fabrikam,DC=com' -Scope ForestOrConfigurationSet -Target 'fabrikam.com' -Server DC1
</dev:code>
  			<dev:remarks>
  			        <maml:para>Disable the optional feature (dn 'CN=Feature 1,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=fabrikam,DC=com') for the forest (FQDN name 'fabrikam.com'). This operation should be performed against the DC that holds the naming master FSMO role.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Disable-ADOptionaFeature -Identity '54ec6e43-75a8-445b-aa7b-346a1e096659' -Scope Domain -Target 'DC=fabrikam,DC=com' -Server DC1
</dev:code>
  			<dev:remarks>
  			        <maml:para>Disable the optional feature (feature GUID '54ec6e43-75a8-445b-aa7b-346a1e096659') for the domain (dn 'DC=ntdev,DC=fabrikam,DC=com'). This operation should be performed against the DC that holds the naming master FSMO role.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Disable-ADOptionalFeature 'Feature 1' -Scope ForestOrConfigurationSet -Target 'CN=Configuration,CN={0241853A-6BBF-48AA-8AE0-9C35D0C91B7B}' -server server1:50000</dev:code>
  			<dev:remarks>
  			        <maml:para>Disable the optional feature (name 'Feature 1') for the AD LDS instance (dn 'CN=Configuration,CN={0241853A-6BBF-48AA-8AE0-9C35D0C91B7B}'). This operation should be performed against the AD LDS instance that holds the naming master FSMO role.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144941</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-ADOptionalFeature</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADOptionalFeature</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Enable-ADAccount
		</command:name>
		<maml:description>
			<maml:para>Enables an Active Directory account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Enable</command:verb>
		<command:noun>ADAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Enable-ADAccount cmdlet enables an Active Directory user, computer or service account.
 
The Identity parameter specifies the Active Directory user, computer or service account that you want to enable. You can identify an account by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to an object variable such as $&lt;localADAccountObject&gt;, or you can pass an account object through the pipeline to the Identity parameter. For example, you can use the Get-ADUser cmdlet to retrieve an account object and then pass the object through the pipeline to the Enable-ADAccount cmdlet. Similarly, you can use Get-ADComputer and Search-ADAccount to retrieve account objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Enable-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An account object is received by the Identity parameter.

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None </maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Enable-ADAccount -Identity KimAb
</dev:code>
  			<dev:remarks>
  			        <maml:para>Enables the account with SamAccountName: KimAb.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Enable-ADAccount -Identity &quot;CN=Kim Abercrombie,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Enables the account with DistinguishedName: &quot;CN=Kim Abercrombie,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser -Filter 'Name -like &quot;*&quot;' -SearchBase &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot; | Enable-ADAccount
</dev:code>
  			<dev:remarks>
  			        <maml:para>Disables all accounts in the OU: &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144942</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Search-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unlock-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountExpiration</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ADAccountExpiration</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountPassword</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADAccountAuthorizationGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountControl</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Enable-ADOptionalFeature
		</command:name>
		<maml:description>
			<maml:para>Enables an Active Directory optional feature.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Enable</command:verb>
		<command:noun>ADOptionalFeature</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Enable-ADOptionalFeature enables an Active Directory optional feature that is associated with a particular Domain mode or Forest mode. Active Directory optional features that depend on a specified domain mode or Forest mode must be explicitly enabled after the domain mode or forest mode is set.

The Identity parameter specifies the Active Directory optional feature that you want to enable. You can identify an optional feature by its distinguished name (DN), feature GUID, or object GUID. You can also set the parameter to an optional feature object variable, such as $&lt;localOptionalFeatureObject&gt; or you can pass an optional feature object through the pipeline to the Identity parameter. For example, you can use the Get-ADOptionalFeature cmdlet to retrieve an optional feature object and then pass the object through the pipeline to the Enable-ADOptionalFeature cmdlet.

The Scope parameter specifies the scope at which the optional feature will be enabled. Possible values for this parameter are Domain and Forest. 

The Target parameter specifies the domain or forest on which the optional feature will be enabled. You can identify the domain or forest by its fully-qualified domain name (FQDN), NetBIOS name, or distinguished name (DN) of the domain naming context (domain NC). </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Enable-ADOptionalFeature</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory optional feature object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  Feature GUID (featureGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Object GUID (objectGUID) 
    Example: 482ab21c-823e-401e-879a-ac7383d64eb9

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an optional feature object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to an optional feature object instance named &quot;optionalFeatureInstance&quot;.
  -Identity $optionalFeatureInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADOptionalFeature</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope at which the feature is enabled or disabled. Possible values for this parameter include: 
  Domain or 0
  Forest or 1

The following example shows how to set this parameter so that optional features are enabled or disabled within the scope of the forest.
  -Scope Forest</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Unknown</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ForestOrConfigurationSet</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Domain</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="4">
				<maml:name>Target</maml:name>
				<maml:description>
					<maml:para>Specifies the domain or forest in which to modify the optional feature. You can identify the target domain or forest by providing one of the following values:  
  Fully-qualified domain name of the forest or domain 
    Example: corp.Fabrikam.com
  NetBIOS name of the forest or domain
    Example: corp
  Distinguished name of the domain naming context (domain NC)
    Example:  DC=corp,DC=Fabrikam,DC=com

The following example shows how to set this parameter to a domain NC.
  -Target &quot;DC=corp,DC=Fabrikam,DC=com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADEntity</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory optional feature object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  Feature GUID (featureGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Object GUID (objectGUID) 
    Example: 482ab21c-823e-401e-879a-ac7383d64eb9

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an optional feature object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to an optional feature object instance named &quot;optionalFeatureInstance&quot;.
  -Identity $optionalFeatureInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOptionalFeature</command:parameterValue>
			<dev:type>
				<maml:name>ADOptionalFeature</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope at which the feature is enabled or disabled. Possible values for this parameter include: 
  Domain or 0
  Forest or 1

The following example shows how to set this parameter so that optional features are enabled or disabled within the scope of the forest.
  -Scope Forest</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOptionalFeatureScope</command:parameterValue>
			<dev:type>
				<maml:name>ADOptionalFeatureScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Unknown</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ForestOrConfigurationSet</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Domain</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="4">
			<maml:name>Target</maml:name>
			<maml:description>
				<maml:para>Specifies the domain or forest in which to modify the optional feature. You can identify the target domain or forest by providing one of the following values:  
  Fully-qualified domain name of the forest or domain 
    Example: corp.Fabrikam.com
  NetBIOS name of the forest or domain
    Example: corp
  Distinguished name of the domain naming context (domain NC)
    Example:  DC=corp,DC=Fabrikam,DC=com

The following example shows how to set this parameter to a domain NC.
  -Target &quot;DC=corp,DC=Fabrikam,DC=com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADEntity</command:parameterValue>
			<dev:type>
				<maml:name>ADEntity</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADOptionalFeature</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An optional feature object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.

Recycle Bin Feature: Once the Active Directory Recycle Bin is enabled, all objects deleted before the Active Directory Recycle Bin was enabled (tombstone objects) become recycled objects. They are no longer visible in the Deleted Objects container and they cannot be recovered using Active Directory Recycle Bin.  The only way to restore these objects is though an authoritative restore from an AD DS backup taken before the Active Directory Recycle Bin was enabled.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Enable-ADOptionalFeature 'Recycle Bin Feature' -Scope ForestOrConfigurationSet -Target 'fabrikam.com' -server dc1
</dev:code>
  			<dev:remarks>
  			        <maml:para>Enable the optional feature 'Recycle Bin Feature' for the forest 'fabrikam.com'.  This operation must be performed on the Domain Controller that holds the naming master FSMO role.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Enable-ADOptionalFeature 'Feature 1' -Scope ForestOrConfigurationSet -Target 'CN=Configuration,CN={0241853A-6BBF-48AA-8AE0-9C35D0C91B7B}' -server lds.fabrikam.com:50000</dev:code>
  			<dev:remarks>
  			        <maml:para>Enable the optional feature 'Recycle Bin Feature' for the AD LDS instance lds.fabrikam.com.  This operation must be performed on the AD LDS instance that holds the naming master FSMO role.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code> Set-ADObject -Identity &quot;CN=Partitions,CN=Configuration,CN={4F971828-5BE4-4E94-B532-58F2BFB6A3A5}&quot; -replace @{&quot;msDS-Behavior-Version&quot;=4}</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the ForestMode (Forest Functional Level) to Windows2008R2Forest on an AD LDS instance. The ForestMode must be Windows2008R2Forest or higher in order to enable the Recycle Bin Feature for AD LDS.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144943</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-ADOptionalFeature</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADOptionalFeature</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADObject
		</command:name>
		<maml:description>
			<maml:para>Gets one or more Active Directory objects.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADObject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADObject cmdlet gets an Active Directory object or performs a search to retrieve multiple objects. 

The Identity parameter specifies the Active Directory object to get. You can identify the object to get by its distinguished name (DN) or GUID. You can also set the parameter to an Active Directory object variable, such as $&lt;localADObject&gt; or pass an object through the pipeline to the Identity parameter. 

To search for and retrieve more than one object, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, see about_ActiveDirectory_Filter. If you have existing LDAP query strings, you can use the LDAPFilter parameter.  

This cmdlet gets a default set of Active Directory object properties. To get additional properties use the Properties parameter. For more information about the how to determine the properties for computer objects, see the Properties parameter description. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IncludeDeletedObjects</maml:name>
				<maml:description>
					<maml:para>Specifies to retrieve deleted objects and the deactivated forward and backward links. When this parameter is specified, the cmdlet uses the following LDAP controls: 
  Show Deleted Objects (1.2.840.113556.1.4.417)
  Show Deactivated Links (1.2.840.113556.1.4.2065)

Note: If this parameter is not specified, the cmdlet will not return or operate on deleted objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IncludeDeletedObjects</maml:name>
				<maml:description>
					<maml:para>Specifies to retrieve deleted objects and the deactivated forward and backward links. When this parameter is specified, the cmdlet uses the following LDAP controls: 
  Show Deleted Objects (1.2.840.113556.1.4.417)
  Show Deactivated Links (1.2.840.113556.1.4.2065)

Note: If this parameter is not specified, the cmdlet will not return or operate on deleted objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LDAPFilter</maml:name>
				<maml:description>
					<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IncludeDeletedObjects</maml:name>
				<maml:description>
					<maml:para>Specifies to retrieve deleted objects and the deactivated forward and backward links. When this parameter is specified, the cmdlet uses the following LDAP controls: 
  Show Deleted Objects (1.2.840.113556.1.4.417)
  Show Deactivated Links (1.2.840.113556.1.4.2065)

Note: If this parameter is not specified, the cmdlet will not return or operate on deleted objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>IncludeDeletedObjects</maml:name>
			<maml:description>
				<maml:para>Specifies to retrieve deleted objects and the deactivated forward and backward links. When this parameter is specified, the cmdlet uses the following LDAP controls: 
  Show Deleted Objects (1.2.840.113556.1.4.417)
  Show Deactivated Links (1.2.840.113556.1.4.2065)

Note: If this parameter is not specified, the cmdlet will not return or operate on deleted objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LDAPFilter</maml:name>
			<maml:description>
				<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultPageSize</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultSetSize</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.Int32]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchBase</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchScope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSearchScope</command:parameterValue>
			<dev:type>
				<maml:name>ADSearchScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Subtree</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Base</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OneLevel</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Subtree</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADObject</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An Active Directory object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADObject

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADOrganizationalUnit
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more Active Directory objects. 

The Get-ADObject cmdlet returns a default set of ADObject property values. To retrieve additional ADObject properties, use the Properties parameter of the cmdlet. 

To view the properties for an ADObject object, see the following examples. To run these examples, replace &lt;object&gt; with an Active Directory object identifier. 

To get a list of the default set of properties of an ADObject object, use the following command:
      Get-ADObject &lt;object&gt;| Get-Member

To get a list of all the properties of an ADObject object, use the following command:
     Get-ADObject &lt;object&gt; -Properties ALL | Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADObject -LDAPFilter &quot;(objectClass=site)&quot; -SearchBase 'CN=Configuration,DC=Fabrikam,DC=Com' -Properties CanonicalName | FT Name,CanonicalName -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name CanonicalName
---- -------------
HQ   FABRIKAM.COM/Configuration/Sites/HQ
BO1  FABRIKAM.COM/Configuration/Sites/BO1
BO2  FABRIKAM.COM/Configuration/Sites/BO2
BO3  FABRIKAM.COM/Configuration/Sites/BO3
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Displays a list of sites for Fabrikam using the LDAP filter syntax.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADObject -Filter 'ObjectClass -eq &quot;site&quot;' -SearchBase 'CN=Configuration,DC=Fabrikam,DC=Com' -Properties siteObjectBL | foreach {$_.siteObjectBL}
</dev:code>
  			<dev:remarks>
 				<maml:para>CN=192.167.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.166.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.168.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.165.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.164.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.163.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.162.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.161.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.160.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.159.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.158.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
CN=192.157.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Gets the Site objects from the Configuration Naming Context and then enumerates through the list outputting 'siteObjectBL'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$changeDate = New-Object DateTime(2008, 11, 18, 1, 40, 02); Get-ADObject -Filter 'whenChanged -gt $changeDate' -IncludeDeletedObjects</dev:code>
  			<dev:remarks>
  			        <maml:para>Gets all the objects, including the deleted ones, whose 'whenChanged' attribute is greater than the specified date. Note that both deleted and non-deleted (and non-recycled) objects matching the filter will be returned. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$changeDate = New-Object DateTime(2008, 11, 18, 1, 40, 02)
Get-ADObject -Filter 'whenChanged -gt $changeDate -and isDeleted -eq $true -and isRecycled -ne $true -and name -ne &quot;Deleted Objects&quot;' -IncludeDeletedObjects</dev:code>
  			<dev:remarks>
 				<maml:para>ObjectGUID        : 98118958-91c7-437d-8ada-ba0b66db823b
Deleted           : True
DistinguishedName : CN=Andrew Ma\0ADEL:98118958-91c7-437d-8ada-ba0b66db823b,CN=Deleted Objects,DC=FABRIKAM,DC=COM
Name              : Andrew Ma
                    DEL:98118958-91c7-437d-8ada-ba0b66db823b
ObjectClass       : user
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Gets all the deleted objects, whose 'whenChanged' attribute is greater than the specified date. The clause 'name -ne &quot;Deleted Objects&quot;' makes sure that the Deleted Objects Container is not returned. This will only return objects which can be restored</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$changeDate = New-Object DateTime(2008, 11, 18, 1, 40, 02)
Get-ADObject -Filter 'whenChanged -gt $changeDate -and isDeleted -eq $true -and isRecycled -ne $true -and lastKnownParent -eq &quot;OU=Accounting,DC=Fabrikam,DC=com&quot;' -IncludeDeletedObjects</dev:code>
  			<dev:remarks>
 				<maml:para>ObjectGUID        : 12d53e7f-aaf7-4790-b41a-da19044504db
Deleted           : True
DistinguishedName : CN=Craig Dewar\0ADEL:12d53e7f-aaf7-4790-b41a-da19044504db,CN=Deleted Objects,DC=Fabrikam,DC=com
Name              : Craig Dewar
                    DEL:12d53e7f-aaf7-4790-b41a-da19044504db
ObjectClass       : user</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Gets all the deleted objects whose 'whenChanged' attribute is greater then the specified date AND at the time of deletion were the children of the specified Organizational Unit. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADObject -Identity &quot;DC=AppNC&quot; -server &quot;FABRIKAM-SRV1:60000&quot;</dev:code>
  			<dev:remarks>
 				<maml:para>ObjectGUID                    DistinguishedName             Name                          ObjectClass
----------                    -----------------             ----                          -----------
62b2e185-9322-4980-9c93-cf... DC=AppNC                      AppNC                         domainDNS
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Gets the information of the domainDNS object of an LDS instance</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144944</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADRootDSE
		</command:name>
		<maml:description>
			<maml:para>Gets the root of a Directory Server information tree. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADRootDSE</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADRootDSE cmdlet gets the conceptual object representing the root of the directory information tree of a directory server. This tree provides information about the configuration and capabilities of the directory server, such as the distinguished name for the configuration container, the current time on the directory server, and the functional levels of the directory server and the domain.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADRootDSE</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADRootDSE</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					An ADRootDSE object that represents the data tree for the specified directory server is output by this cmdlet.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADRootDSE
</dev:code>
  			<dev:remarks>
 				<maml:para>configurationNamingContext    : CN=Configuration,DC=Fabrikam,DC=com 
currentTime                   : 3/18/2009 11:12:55 AM 
defaultNamingContext          : DC=Fabrikam,DC=com 
dnsHostName                   : FABRIKAM-DC1.Fabrikam.com 
domainControllerFunctionality : Windows2008R2 
domainFunctionality           : Windows2003Domain 
dsServiceName                 : CN=NTDS Settings,CN=FABRIKAM-DC1,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=Fabrikam,DC=com 
forestFunctionality           : Windows2003Forest 
highestCommittedUSN           : 23015 
isGlobalCatalogReady          : {TRUE} 
isSynchronized                : {TRUE} 
ldapServiceName               : Fabrikam.com:FABRIKAM-DC1$@FABRIKAM.COM 
namingContexts                : {DC=Fabrikam,DC=com, CN=Configuration,DC=Fabrikam,DC=com, CN=Schema,CN=Configuration,DC=Fabrikam,DC=com, DC=DomainDnsZones,DC=Fabrikam,DC=com...} 
rootDomainNamingContext       : DC=Fabrikam,DC=com 
schemaNamingContext           : CN=Schema,CN=Configuration,DC=Fabrikam,DC=com 
serverName                    : CN=FABRIKAM-DC1,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=Fabrikam,DC=com 
subschemaSubentry             : CN=Aggregate,CN=Schema,CN=Configuration,DC=Fabrikam,DC=com 
supportedCapabilities         : {1.2.840.113556.1.4.800 (LDAP_CAP_ACTIVE_DIRECTORY_OID), 1.2.840.113556.1.4.1670 (LDAP_CAP_ACTIVE_DIRECTORY_V51_OID), 1.2.840.113556.1.4.1791 (LDAP_CAP_ACTIVE_DIRECTORY_LDAP_INTEG_OID), 1.2.840.113556.1.4.1935 (LDAP_CAP_ACTIVE_DIRECTORY_V61_OID)...} 
supportedControl              : {1.2.840.113556.1.4.319 (LDAP_PAGED_RESULT_OID_STRING), 1.2.840.113556.1.4.801 (LDAP_SERVER_SD_FLAGS_OID), 1.2.840.113556.1.4.473 (LDAP_SERVER_SORT_OID), 1.2.840.113556.1.4.528 (LDAP_SERVER_NOTIFICATION_OID)...} 
supportedLDAPPolicies         : {MaxPoolThreads, MaxDatagramRecv, MaxReceiveBuffer, InitRecvTimeout...} 
supportedLDAPVersion          : {3, 2} 
supportedSASLMechanisms       : {GSSAPI, GSS-SPNEGO, EXTERNAL, DIGEST-MD5} 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the rooDSE from the default domain controller.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADRootDSE -Server Fabrikam-RODC1 -Properties supportedExtension 
</dev:code>
  			<dev:remarks>
 				<maml:para>configurationNamingContext    : CN=Configuration,DC=Fabrikam,DC=com 
currentTime                   : 3/18/2009 11:12:55 AM 
defaultNamingContext          : DC=Fabrikam,DC=com 
dnsHostName                   : FABRIKAM-RODC1.Fabrikam.com 
domainControllerFunctionality : Windows2008R2 
domainFunctionality           : Windows2003Domain 
dsServiceName                 : CN=NTDS Settings,CN=FABRIKAM-RODC1,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=Fabrikam,DC=com 
forestFunctionality           : Windows2003Forest 
highestCommittedUSN           : 23015 
isGlobalCatalogReady          : {TRUE} 
isSynchronized                : {TRUE} 
ldapServiceName               : Fabrikam.com:FABRIKAM-RODC1$@FABRIKAM.COM 
namingContexts                : {DC=Fabrikam,DC=com, CN=Configuration,DC=Fabrikam,DC=com, CN=Schema,CN=Configuration,DC=Fabrikam,DC=com, DC=DomainDnsZones,DC=Fabrikam,DC=com...} 
rootDomainNamingContext       : DC=Fabrikam,DC=com 
schemaNamingContext           : CN=Schema,CN=Configuration,DC=Fabrikam,DC=com 
serverName                    : CN=FABRIKAM-RODC1,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=Fabrikam,DC=com 
subschemaSubentry             : CN=Aggregate,CN=Schema,CN=Configuration,DC=Fabrikam,DC=com 
supportedCapabilities         : {1.2.840.113556.1.4.800 (LDAP_CAP_ACTIVE_DIRECTORY_OID), 1.2.840.113556.1.4.1670 (LDAP_CAP_ACTIVE_DIRECTORY_V51_OID), 1.2.840.113556.1.4.1791 (LDAP_CAP_ACTIVE_DIRECTORY_LDAP_INTEG_OID), 1.2.840.113556.1.4.1935 (LDAP_CAP_ACTIVE_DIRECTORY_V61_OID)...} 
supportedControl              : {1.2.840.113556.1.4.319 (LDAP_PAGED_RESULT_OID_STRING), 1.2.840.113556.1.4.801 (LDAP_SERVER_SD_FLAGS_OID), 1.2.840.113556.1.4.473 (LDAP_SERVER_SORT_OID), 1.2.840.113556.1.4.528 (LDAP_SERVER_NOTIFICATION_OID)...} 
supportedExtension            : {1.3.6.1.4.1.1466.20037, 1.3.6.1.4.1.1466.101.119.1, 1.2.840.113556.1.4.1781, 1.3.6.1.4.1.4203.1.11.3} 
supportedLDAPPolicies         : {MaxPoolThreads, MaxDatagramRecv, MaxReceiveBuffer, InitRecvTimeout...} 
supportedLDAPVersion          : {3, 2} 
supportedSASLMechanisms       : {GSSAPI, GSS-SPNEGO, EXTERNAL, DIGEST-MD5} 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the rootDSE information including the supportedExtension property for Fabrikam-RODC1 server.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADRootDSE -Server &quot;FABRIKAM-ADLDS1.Fabrikam.com:60000&quot; -Credential &quot;FABRIKAM\User1&quot; </dev:code>
  			<dev:remarks>
 				<maml:para>configurationNamingContext    : CN=Configuration,CN={9131D98B-E210-480F-A95D-24F9396898CA} 
currentTime                   : 3/18/2009 11:40:19 AM 
dnsHostName                   : FABRIKAM-ADLDS1.Fabrikam.com 
domainControllerFunctionality : Windows2008R2 
dsServiceName                 : CN=NTDS Settings,CN=FABRIKAM-ADLDS1$instance1,CN=Servers,CN=Default-First-Site-Name,CN=Sites,C 
                                N=Configuration,CN={9131D98B-E210-480F-A95D-24F9396898CA} 
forestFunctionality           : Windows2003Forest 
highestCommittedUSN           : 13967 
isSynchronized                : {TRUE} 
namingContexts                : {CN=Configuration,CN={9131D98B-E210-480F-A95D-24F9396898CA}, CN=Schema,CN=Configuration,CN={9131D98B-E210-480F-A95D-24F9396898CA}, DC=AppNC} 
schemaNamingContext           : CN=Schema,CN=Configuration,CN={9131D98B-E210-480F-A95D-24F9396898CA} 
serverName                    : CN=FABRIKAM-ADLDS1$instance1,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,CN={9131D98B-E210-480F-A95D-24F9396898CA} 
subschemaSubentry             : CN=Aggregate,CN=Schema,CN=Configuration,CN={9131D98B-E210-480F-A95D-24F9396898CA} 
supportedCapabilities         : {1.2.840.113556.1.4.1851 (LDAP_CAP_ACTIVE_DIRECTORY_ADAM_OID), 1.2.840.113556.1.4.1670 (LDAP_CAP_ACTIVE_DIRECTORY_V51_OID), 1.2.840.113556.1.4.1791 (LDAP_CAP_ACTIVE_DIRECTORY_LDAP_INTEG_OID), 1.2.840.113556.1.4.1935 (LDAP_CAP_ACTIVE_DIRECTORY_V61_OID)...} 
supportedControl              : {1.2.840.113556.1.4.319 (LDAP_PAGED_RESULT_OID_STRING), 1.2.840.113556.1.4.801 (LDAP_SERVER_SD_FLAGS_OID), 1.2.840.113556.1.4.473 (LDAP_SERVER_SORT_OID), 1.2.840.113556.1.4.528 (LDAP_SERVER_NOTIFICATION_OID)...} 
supportedLDAPPolicies         : {MaxPoolThreads, MaxDatagramRecv, MaxReceiveBuffer, InitRecvTimeout...} 
supportedLDAPVersion          : {3, 2} 
supportedSASLMechanisms       : {GSSAPI, GSS-SPNEGO, EXTERNAL, DIGEST-MD5} </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the rootDSE information of FABRIKAM-ADLDS1 using the FABRIKAM\user1 credentials.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144945</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADUser
		</command:name>
		<maml:description>
			<maml:para>Gets one or more Active Directory users.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADUser</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADUser cmdlet gets a user object or performs a search to retrieve multiple user objects.

The Identity parameter specifies the Active Directory user to get. You can identify a user by its distinguished name (DN), GUID, security identifier (SID), Security Accounts Manager (SAM) account name or name. You can also set the parameter to a user object variable, such as $&lt;localUserObject&gt; or pass a user object through the pipeline to the Identity parameter.

To search for and retrieve more than one user, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, see about_ActiveDirectory_Filter. If you have existing LDAP query strings, you can use the LDAPFilter parameter.

This cmdlet retrieves a default set of user object properties. To retrieve additional properties use the Properties parameter. For more information about the how to determine the properties for user objects, see the Properties parameter description. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADUser</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADUser</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADUser</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LDAPFilter</maml:name>
				<maml:description>
					<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			<dev:type>
				<maml:name>ADUser</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LDAPFilter</maml:name>
			<maml:description>
				<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultPageSize</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultSetSize</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.Int32]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchBase</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchScope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSearchScope</command:parameterValue>
			<dev:type>
				<maml:name>ADSearchScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Subtree</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Base</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OneLevel</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Subtree</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADUser</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A user object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADUser</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more user objects.

This cmdlet returns a default set of ADUser property values. To retrieve additional ADUser properties, use the Properties parameter. 

To get a list of the default set of properties of an ADUser object, use the following command:
   Get-ADUser &lt;user&gt;| Get-Member

To get a list of the most commonly used properties of an ADUser object, use the following command:
   Get-ADUser &lt;user&gt; -Properties Extended | Get-Member 

To get a list of all the properties of an ADUser object, use the following command:
   Get-ADUser &lt;user&gt; -Properties * | Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser -Filter * -SearchBase &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Get all users under the container 'OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser -Filter 'Name -like &quot;*SvcAccount&quot;' | FT Name,SamAccountName -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name             SamAccountName
----             --------------
SQL01 SvcAccount SQL01
SQL02 SvcAccount SQL02
IIS01 SvcAccount IIS01
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all users that have a name that ends with 'SvcAccount'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser GlenJohn -Properties * 
</dev:code>
  			<dev:remarks>
 				<maml:para>Surname           : John
Name              : Glen John
UserPrincipalName :
GivenName         : Glen
Enabled           : False
SamAccountName    : GlenJohn
ObjectClass       : user
SID               : S-1-5-21-2889043008-4136710315-2444824263-3544
ObjectGUID        : e1418d64-096c-4cb0-b903-ebb66562d99d
DistinguishedName : CN=Glen John,OU=NorthAmerica,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all properties of the user with samAccountName 'GlenJohn'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser -Filter {Name -eq &quot;GlenJohn&quot;} -SearchBase &quot;DC=AppNC&quot; -Properties mail -Server lds.Fabrikam.com:50000 </dev:code>
  			<dev:remarks>
  			        <maml:para>Get the user with name 'GlenJohn' on the AD LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144946</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADComputer
		</command:name>
		<maml:description>
			<maml:para>Gets one or more Active Directory computers.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADComputer</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADComputer cmdlet gets a computer or performs a search to retrieve multiple computers.

The Identity parameter specifies the Active Directory computer to retrieve. You can identify a computer by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the parameter to a computer object variable, such as $&lt;localComputerObject&gt; or pass a computer object through the pipeline to the Identity parameter.

To search for and retrieve more than one computer, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, see about_ActiveDirectory_Filter. If you have existing LDAP query strings, you can use the LDAPFilter parameter.

This cmdlet retrieves a default set of computer object properties. To retrieve additional properties use the Properties parameter. For more information about the how to determine the properties for computer objects, see the Properties parameter description. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADComputer</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADComputer</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADComputer</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LDAPFilter</maml:name>
				<maml:description>
					<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			<dev:type>
				<maml:name>ADComputer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LDAPFilter</maml:name>
			<maml:description>
				<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultPageSize</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultSetSize</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.Int32]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchBase</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchScope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSearchScope</command:parameterValue>
			<dev:type>
				<maml:name>ADSearchScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Subtree</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Base</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OneLevel</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Subtree</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A computer object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more computer objects. 

This Get-ADComputer cmdlet returns a default set of ADComputer property values. To retrieve additional ADComputer properties, use the Properties parameter of this cmdlet. 

To view the properties for an ADComputer object, see the following examples. To run these examples, replace &lt;computer&gt; with a computer identifier such as the SAM account name of your local computer.

To get a list of the default set of properties of an ADComputer object, use the following command:
   Get-ADComputer &lt;computer&gt;| Get-Member

To get a list of all the properties of an ADComputer object, use the following command:
   Get-ADComputer &lt;computer&gt; -Properties ALL | Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS with its default schema.  By default AD LDS schema does not have a computer class, but if the schema is extended to include it, this cmdlet will work with LDS.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADComputer &quot;Fabrikam-SRV1&quot; -Properties *</dev:code>
  			<dev:remarks>
 				<maml:para>AccountExpirationDate              :
accountExpires                     : 9223372036854775807
AccountLockoutTime                 :
AccountNotDelegated                : False
AllowReversiblePasswordEncryption  : False
BadLogonCount                      :
CannotChangePassword               : False
CanonicalName                      : Fabrikam.com/Computers/fabrikam-srv1
Certificates                       : {}
CN                                 : fabrikam-srv1
codePage                           : 0
countryCode                        : 0
Created                            : 3/16/2009 4:15:00 PM
createTimeStamp                    : 3/16/2009 4:15:00 PM
Deleted                            :
Description                        :
DisplayName                        :
DistinguishedName                  : CN=fabrikam-srv1,CN=Computers,DC=Fabrikam,
                                     DC=com
DNSHostName                        :
DoesNotRequirePreAuth              : False
dSCorePropagationData              : {3/16/2009 4:21:51 PM, 12/31/1600 4:00:01
                                     PM}
Enabled                            : True
HomedirRequired                    : False
HomePage                           :
instanceType                       : 0
IPv4Address                        :
IPv6Address                        :
isCriticalSystemObject             : False
isDeleted                          :
LastBadPasswordAttempt             :
LastKnownParent                    :
LastLogonDate                      :
localPolicyFlags                   : 0
Location                           : NA/HQ/Building A
LockedOut                          : False
ManagedBy                          : CN=SQL Administrator 01,OU=UserAccounts,OU
                                     =Managed,DC=Fabrikam,DC=com
MemberOf                           : {}
MNSLogonAccount                    : False
Modified                           : 3/16/2009 4:23:01 PM
modifyTimeStamp                    : 3/16/2009 4:23:01 PM
msDS-User-Account-Control-Computed : 0
Name                               : fabrikam-srv1
nTSecurityDescriptor               : System.DirectoryServices.ActiveDirectorySe
                                     curity
ObjectCategory                     : CN=Computer,CN=Schema,CN=Configuration,DC=
                                     Fabrikam,DC=com
ObjectClass                        : computer
ObjectGUID                         : 828306a3-8ccd-410e-9537-e6616662c0b0
objectSid                          : S-1-5-21-41432690-3719764436-1984117282-11
                                     30
OperatingSystem                    :
OperatingSystemHotfix              :
OperatingSystemServicePack         :
OperatingSystemVersion             :
PasswordExpired                    : False
PasswordLastSet                    :
PasswordNeverExpires               : False
PasswordNotRequired                : False
PrimaryGroup                       : CN=Domain Computers,CN=Users,DC=Fabrikam,D
                                     C=com
primaryGroupID                     : 515
ProtectedFromAccidentalDeletion    : False
pwdLastSet                         : 0
SamAccountName                     : fabrikam-srv1$
sAMAccountType                     : 805306369
sDRightsEffective                  : 0
ServiceAccount                     : {}
servicePrincipalName               : {MSOLAPSVC.3/FABRIKAM-SRV1.FABRIKAM.COM:an
                                     alyze, MSSQLSVC/FABRIKAM-SRV1.FABRIKAM.COM
                                     :1456}
ServicePrincipalNames              : {MSOLAPSVC.3/FABRIKAM-SRV1.FABRIKAM.COM:an
                                     alyze, MSSQLSVC/FABRIKAM-SRV1.FABRIKAM.COM
                                     :1456}
SID                                : S-1-5-21-41432690-3719764436-1984117282-11
                                     30
SIDHistory                         : {}
TrustedForDelegation               : False
TrustedToAuthForDelegation         : False
UseDESKeyOnly                      : False
userAccountControl                 : 4096
userCertificate                    : {}
UserPrincipalName                  :
uSNChanged                         : 36024
uSNCreated                         : 35966
whenChanged                        : 3/16/2009 4:23:01 PM
whenCreated                        : 3/16/2009 4:15:00 PM</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get a specific computer showing all the properties.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADComputer -Filter 'Name -like &quot;Fabrikam*&quot;' -Properties IPv4Address | FT Name,DNSHostName,IPv4Address -A</dev:code>
  			<dev:remarks>
 				<maml:para>name          dnshostname                ipv4address
----          -----------                -----------
FABRIKAM-SRV1 FABRIKAM-SRV1.Fabrikam.com 10.194.99.181
FABRIKAM-SRV2 FABRIKAM-SRV2.Fabrikam.com 10.194.100.37
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the computers with a name starting by a particular string and showing the name, dns hostname and IPv4 address.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$d = [DateTime]::Today.AddDays(-90); Get-ADComputer -Filter 'PasswordLastSet -ge $d' -Properties PasswordLastSet | FT Name,PasswordLastSet</dev:code>
  			<dev:remarks>
 				<maml:para>Name                                                        PasswordLastSet
----                                                        ---------------
FABRIKAM-SRV4                                               3/12/2009 6:40:37 PM
FABRIKAM-SRV5                                               3/12/2009 7:05:45 PM
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the computers that have changed their password in the last 90 days.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADComputer -LDAPFilter &quot;(name=*laptop*)&quot; -SearchBase &quot;CN=Computers,DC=Fabrikam,DC=com&quot;</dev:code>
  			<dev:remarks>
 				<maml:para>name
----
saradavi-laptop
jeffpr-laptop
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the computer accounts in the location: &quot;CN=Computers,DC=Fabrikam,DC=com&quot; that are listed as laptops (using an LDAPFilter)</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADComputer -Filter *</dev:code>
  			<dev:remarks>
  			        <maml:para>Get all computer accounts.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144947</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADGroup
		</command:name>
		<maml:description>
			<maml:para>Gets one or more Active Directory groups.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADGroup</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADGroup cmdlet gets a group or performs a search to retrieve multiple groups from an Active Directory. 

The Identity parameter specifies the Active Directory group to get. You can identify a group by its distinguished name (DN), GUID, security identifier (SID), Security Accounts Manager (SAM) account name, or canonical name. You can also specify group object variable, such as $&lt;localGroupObject&gt;. 

To search for and retrieve more than one group, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, see about_ActiveDirectory_Filter. If you have existing LDAP query strings, you can use the LDAPFilter parameter.

This cmdlet gets a default set of group object properties. To get additional properties use the Properties parameter. For more information about the how to determine the properties for group objects, see the Properties parameter description. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADGroup</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADGroup</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADGroup</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LDAPFilter</maml:name>
				<maml:description>
					<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LDAPFilter</maml:name>
			<maml:description>
				<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultPageSize</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultSetSize</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.Int32]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchBase</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchScope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSearchScope</command:parameterValue>
			<dev:type>
				<maml:name>ADSearchScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Subtree</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Base</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OneLevel</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Subtree</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A group object is received by the Identity parameter. 
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more group objects.

The Get-ADGroup cmdlet returns a default set of ADGroup property values. To retrieve additional ADGroup properties, use the Properties parameter. 

To view the properties for an ADGroup object, see the following examples. To run these examples, replace &lt;group&gt; with a group identifier such as Administrators.

To get a list of the default set of properties of an ADGroup object, use the following command:
      Get-ADGroup &lt;group&gt;| Get-Member

To get a list of all the properties of an ADGroup object, use the following command:
     Get-ADGroup &lt;group&gt; -Properties * | Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADGroup administrators
</dev:code>
  			<dev:remarks>
 				<maml:para>DistinguishedName : CN=Administrators,CN=Builtin,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : DomainLocal 
Name              : Administrators 
ObjectClass       : group 
ObjectGUID        : 02ce3874-dd86-41ba-bddc-013f34019978 
SamAccountName    : Administrators 
SID               : S-1-5-32-544 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the group with samAccountName administrators.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroup -Identity S-1-5-32-544 -Properties member
</dev:code>
  			<dev:remarks>
 				<maml:para>DistinguishedName : CN=Administrators,CN=Builtin,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : DomainLocal 
member            : {CN=Domain Admins,CN=Users,DC=Fabrikam,DC=com, CN=Enterprise Admins,CN=Users,DC=Fabrikam,DC=com, CN=LabAdmin,CN=Users,DC=Fabrikam,DC=com, C 
                    N=Administrator,CN=Users,DC=Fabrikam,DC=com} 
Name              : Administrators 
ObjectClass       : group 
ObjectGUID        : 02ce3874-dd86-41ba-bddc-013f34019978 
SamAccountName    : Administrators 
SID               : S-1-5-32-544 </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the group with SID S-1-5-32-544 including the additional property member.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroup -Filter 'GroupCategory -eq &quot;Security&quot; -and GroupScope -ne &quot;DomainLocal&quot;'</dev:code>
  			<dev:remarks>
  			        <maml:para>Get all groups that have a GroupCategory of Security but do not have a GroupScope of DomainLocal.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroup 

cmdlet Get-ADGroup at command pipeline position 1 
Supply values for the following parameters: 
(Type !? for Help.) 
Filter: * </dev:code>
  			<dev:remarks>
 				<maml:para>DistinguishedName : CN=AlphaGroup,OU=AccountDeptOU,DC=AppNC 
GroupCategory     : Security 
GroupScope        : DomainLocal 
Name              : AlphaGroup 
ObjectClass       : group 
ObjectGUID        : 6498c9fb-7c62-48fe-9972-1461f7f3dec2 
SID               : S-1-510474493-936115905-2475435479-1276657127-1006239422-938965137 

DistinguishedName : CN=BranchOffice1,OU=AccountDeptOU,DC=AppNC 
GroupCategory     : Security 
GroupScope        : DomainLocal 
Name              : BranchOffice1 
ObjectClass       : group 
ObjectGUID        : 0b7504c5-482b-4a73-88f5-8a76960e4568 
SID               : S-1-510474493-936115905-2534227223-1194883713-3669005192-3746664089 

DistinguishedName : CN=AccountLeads,OU=AccountDeptOU,DC=AppNC 
GroupCategory     : Distribution 
GroupScope        : DomainLocal 
Name              : AccountLeads 
ObjectClass       : group 
ObjectGUID        : b20c032b-2de9-401a-b48c-341854a37254 
SID               : S-1-510474493-936115905-2813670187-1179675302-2001457839-270172950 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the groups in the default domain using the default cmdlet behavior.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroup -server localhost:60000 -filter {GroupScope -eq &quot;DomainLocal&quot;} -SearchBase &quot;DC=AppNC&quot; </dev:code>
  			<dev:remarks>
 				<maml:para>DistinguishedName : CN=AlphaGroup,OU=AccountDeptOU,DC=AppNC 
GroupCategory     : Security 
GroupScope        : DomainLocal 
Name              : AlphaGroup 
ObjectClass       : group 
ObjectGUID        : 6498c9fb-7c62-48fe-9972-1461f7f3dec2 
SID               : S-1-510474493-936115905-2475435479-1276657127-1006239422-938965137 

DistinguishedName : CN=BranchOffice1,OU=AccountDeptOU,DC=AppNC 
GroupCategory     : Security 
GroupScope        : DomainLocal 
Name              : BranchOffice1 
ObjectClass       : group 
ObjectGUID        : 0b7504c5-482b-4a73-88f5-8a76960e4568 
SID               : S-1-510474493-936115905-2534227223-1194883713-3669005192-3746664089 

DistinguishedName : CN=AccountLeads,OU=AccountDeptOU,DC=AppNC 
GroupCategory     : Distribution 
GroupScope        : DomainLocal 
Name              : AccountLeads 
ObjectClass       : group 
ObjectGUID        : b20c032b-2de9-401a-b48c-341854a37254 
SID               : S-1-510474493-936115905-2813670187-1179675302-2001457839-270172950 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the DomainLocal groups from the AppNC partition of the AD LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144948</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADFineGrainedPasswordPolicy
		</command:name>
		<maml:description>
			<maml:para>Gets one or more Active Directory fine grained password policies.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADFineGrainedPasswordPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADFineGrainedPasswordPolicy cmdlet gets a fine grained password policy or performs a search to retrieve multiple fine grained password policies.

The Identity parameter specifies the Active Directory fine grained password policy to get. You can identify a fine grained password policy by its distinguished name (DN), GUID or name. You can also set the parameter to a fine grained password policy object variable, such as $&lt;localFineGrainedPasswordPolicyObject&gt; or pass a fine grained password policy object through the pipeline to the Identity parameter.

To search for and retrieve more than one fine grained password policies, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, see about_ActiveDirectory_Filter. If you have existing LDAP query strings, you can use the LDAPFilter parameter.

This cmdlet retrieves a default set of fine grained password policy object properties. To retrieve additional properties use the Properties parameter. For more information about the how to determine the properties for FineGrainedPasswordPolicy objects, see the Properties parameter description.  </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADFineGrainedPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADFineGrainedPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADFineGrainedPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LDAPFilter</maml:name>
				<maml:description>
					<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LDAPFilter</maml:name>
			<maml:description>
				<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultPageSize</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultSetSize</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.Int32]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchBase</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchScope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSearchScope</command:parameterValue>
			<dev:type>
				<maml:name>ADSearchScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Base</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OneLevel</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Subtree</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A fine grained password policy is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more fine grained password policy objects.

This cmdlet returns a default set of ADFineGrainedPasswordPolicy property values. To retrieve additional ADFineGrainedPasswordPolicy properties, use the Properties parameter. 

To view the properties for an ADFineGrainedPasswordPolicy object, see the following examples. To run these examples, replace &lt;fine grained password policy&gt; with a fine grained password policy identifier such as the name of your local fine grained password policy.

To get a list of the default set of properties of an ADFineGrainedPasswordPolicy object, use the following command:
   Get-ADFineGrainedPasswordPolicy &lt;fine grained password policy&gt;| Get-Member

To get a list of all the properties of an ADFineGrainedPasswordPolicy object, use the following command:
   Get-ADFineGrainedPasswordPolicy &lt;fine grained password policy&gt; -Properties * | Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADFineGrainedPasswordPolicy -Filter {Name -like &quot;*&quot;} | ft Name, Precedence,MaxPasswordAge,MinPasswordLength -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name           Precedence MaxPasswordAge MinPasswordLength
----           ---------- -------------- -----------------
DomainUsersPSO        500 60.00:00:00                    8
SvcAccPSO             100 30.00:00:00                   20
AdminsPSO             200 15.00:00:00                   10
DlgtdAdminsPSO        300 20.00:00:00                   10
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADFineGrainedPasswordPolicy AdminsPSO
</dev:code>
  			<dev:remarks>
 				<maml:para>Name                        : AdminsPSO
ComplexityEnabled           : True
LockoutThreshold            : 0
ReversibleEncryptionEnabled : True
LockoutDuration             : 00:30:00
LockoutObservationWindow    : 00:30:00
MinPasswordLength           : 10
Precedence                  : 200
ObjectGUID                  : ba1061f0-c947-4018-a399-6ad8897d26e3
ObjectClass                 : msDS-PasswordSettings
PasswordHistoryCount        : 24
MinPasswordAge              : 1.00:00:00
MaxPasswordAge              : 15.00:00:00
AppliesTo                   : {}
DistinguishedName           : CN=AdminsPSO,CN=Password Settings Container,CN=System,DC=FABRIKAM,DC=COM
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the Fine Grained Password Policy named 'AdminsPSO'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADFineGrainedPasswordPolicy 'CN=DlgtdAdminsPSO,CN=Password Settings Container,CN=System,DC=FABRIKAM,DC=COM' -Properties *
</dev:code>
  			<dev:remarks>
 				<maml:para>msDS-LockoutDuration                     : -18000000000
msDS-PasswordSettingsPrecedence          : 300
ObjectCategory                           : CN=ms-DS-Password-Settings,CN=Schema,CN=Configuration,DC=FABRIKAM,DC=COM
DistinguishedName                        : CN=DlgtdAdminsPSO,CN=Password Settings Container,CN=System,DC=FABRIKAM,DC=COM
ExpireOn                                 :
msDS-MinimumPasswordAge                  : -864000000000
dSCorePropagationData                    : {12/31/1600 4:00:00 PM}
msDS-LockoutThreshold                    : 0
Description                              : The Delegated Administrators Password Policy
LockoutThreshold                         : 0
instanceType                             : 4
msDS-PasswordComplexityEnabled           : True
MaxPasswordAge                           : 20.00:00:00
whenCreated                              : 8/15/2008 12:47:43 AM
Name                                     : DlgtdAdminsPSO
ObjectClass                              : msDS-PasswordSettings
ReversibleEncryptionEnabled              : True
msDS-PasswordReversibleEncryptionEnabled : True
Dynamic                                  : False
LockoutDuration                          : 00:30:00
msDS-PSOAppliesTo                        : {CN=Kim Abercrombie,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM, CN=Bob Kelly,OU=AsiaPacific,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM}
DisplayName                              : Delegated Administrators PSO
uSNCreated                               : 16395
Modified                                 : 8/20/2008 12:21:15 AM
MinPasswordAge                           : 1.00:00:00
ProtectedFromAccidentalDeletion          : False
Created                                  : 8/15/2008 12:47:43 AM
sDRightsEffective                        : 15
ComplexityEnabled                        : True
PasswordHistoryCount                     : 24
msDS-MaximumPasswordAge                  : -17280000000000
MinPasswordLength                        : 10
Precedence                               : 300
ObjectGUID                               : 75cf8c7a-9c93-4e81-b611-851803372cb2
msDS-MinimumPasswordLength               : 10
Deleted                                  :
Orphaned                                 : False
CN                                       : DlgtdAdminsPSO
LastKnownParent                          :
CanonicalName                            : FABRIKAM.COM/System/Password Settings Container/DlgtdAdminsPSO
modifyTimeStamp                          : 8/20/2008 12:21:15 AM
msDS-LockoutObservationWindow            : -18000000000
LockoutObservationWindow                 : 00:30:00
whenChanged                              : 8/20/2008 12:21:15 AM
createTimeStamp                          : 8/15/2008 12:47:43 AM
msDS-PasswordHistoryLength               : 24
nTSecurityDescriptor                     : System.DirectoryServices.ActiveDirectorySecurity
AppliesTo                                : {CN=JeffPrice,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM, CN=GlenJohn,OU=AsiaPacific,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM}
uSNChanged                               : 72719
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the properties for the Fine Grained Password Policy with DistinguishedName 'CN=DlgtdAdminsPSO,CN=Password Settings Container,CN=System,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADFineGrainedPasswordPolicy -Filter {name -like &quot;*admin*&quot;}</dev:code>
  			<dev:remarks>
 				<maml:para>AppliesTo                   : {CN=GlenJohn,CN=Users,DC=Fabrikam,DC=com, CN=JeffPrice,CN=Users,DC=Fabrikam,DC=com, CN=Administrator,CN=Users,DC=Fabrikam,DC=com} 
ComplexityEnabled           : True 
DistinguishedName           : CN=DlgtdAdminsPSO,CN=Password Settings Container,CN=System,DC=Fabrikam,DC=com 
LockoutDuration             : 00:30:00 
LockoutObservationWindow    : 00:30:00 
LockoutThreshold            : 0 
MaxPasswordAge              : 42.00:00:00 
MinPasswordAge              : 1.00:00:00 
MinPasswordLength           : 7 
Name                        : DlgtdAdminsPSO 
ObjectClass                 : msDS-PasswordSettings 
ObjectGUID                  : b7de4e6e-c291-4ce6-bb47-6bf8f807df53 
PasswordHistoryCount        : 24 
Precedence                  : 100 
ReversibleEncryptionEnabled : True </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the Fine Grained Password Policy object that have a name that begins with admin.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144949</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADFineGrainedPasswordPolicySubject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADFineGrainedPasswordPolicySubject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADDomain
		</command:name>
		<maml:description>
			<maml:para> Gets an Active Directory domain.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADDomain</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADDomain cmdlet gets the Active Directory domain specified by the parameters. You can specify the domain by setting the Identity or Current parameters.  

The Identity parameter specifies the Active Directory domain to get. You can identify the domain object to get by its Distinguished Name (DN), GUID, Security Identifier (SID), DNS domain name, or NetBIOS name. You can also set the parameter to a domain object variable, such as $&lt;localDomainObject&gt; or pass a domain object through the pipeline to the Identity parameter. 

To get the domain of the local computer or current logged on user (CLU) set the Current parameter to LocalComputer or LoggedOnUser.  When you set the Current parameter, you do not need to set the Identity parameter. 

When the Current parameter is set to LocalComputer or LogedOnUser, the cmdlet uses the Server and Credential parameters according to the following rules.

-If both the Server and Credential parameters are not specified:
  --The domain is set to the domain of the LocalComputer or LoggedOnUser and a server is located in this domain. The credentials of the current logged on user are used to get the domain.

-If the Server parameter is specified and the Credential parameter is not specified:
  --The domain is set to the domain of the specified server and the cmdlet checks to make sure that the server is in the domain of the LocalComputer or LoggedOnUser. Then the credentials of the current logged on user are used to get the domain. An error is returned when the server is not in the domain of the LocalComputer or LoggedOnUser.

-If the Server parameter is not specified and the Credential parameter is specified:
  --The domain is set to the domain of the LocalComputer or LoggedOnUser and a server is located in this domain. Then the credentials specified by the Credential parameter are used to get the domain. 
If the Server and Credential parameters are specified:
The domain is set to the domain of the specified server and the cmdlet checks to make sure that the server is in the domain of the the LocalComputer or LoggedOnUser. Then the credentials specified by the Credential parameter are used to get the domain. An error is returned when the server is not in the domain of the LocalComputer or LoggedOnUser.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADDomain</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Current</maml:name>
				<maml:description>
					<maml:para>Specifies whether to return the domain of the local computer or the current logged on user (CLU). Possible values for this parameter are:
  LocalComputer or 0
  LoggedOnUser  or 1

The following example shows how to set this parameter to return the domain of the current logged on user.
  -Current LoggedOnUser</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >LocalComputer</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >LoggedOnUser</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADDomain</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomain</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Current</maml:name>
			<maml:description>
				<maml:para>Specifies whether to return the domain of the local computer or the current logged on user (CLU). Possible values for this parameter are:
  LocalComputer or 0
  LoggedOnUser  or 1

The following example shows how to set this parameter to return the domain of the current logged on user.
  -Current LoggedOnUser</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADCurrentDomainType</command:parameterValue>
			<dev:type>
				<maml:name>ADCurrentDomainType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>LocalComputer</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>LoggedOnUser</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomain</command:parameterValue>
			<dev:type>
				<maml:name>ADDomain</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADDomain</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A domain object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDomain</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more domain objects. 

The cmdlet returns all of the properties of the domain. To view all of the properties for an ADDomain object, use the following command and replace &lt;domain&gt; with a domain controller identifier such as a DNS host name.
  Get-ADDomain &lt;domain&gt;| Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomain fabrikam.com
</dev:code>
  			<dev:remarks>
  			        <maml:para>Gets the domain information for the domain 'fabrikam.com'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomain -Current LocalComputer
</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the domain information of the current local computer domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomain -Current LoggedOnUser
</dev:code>
  			<dev:remarks>
  			        <maml:para>Gets the domain information for the domain of the currently logged on user.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomain</dev:code>
  			<dev:remarks>
 				<maml:para>AllowedDNSSuffixes                 : {}
ChildDomains                       : {}
ComputersContainer                 : CN=Computers,DC=Fabrikam,DC=com
DeletedObjectsContainer            : CN=Deleted Objects,DC=Fabrikam,DC=com
DistinguishedName                  : DC=Fabrikam,DC=com
DNSRoot                            : Fabrikam.com
DomainControllersContainer         : OU=Domain Controllers,DC=Fabrikam,DC=com
DomainMode                         : Windows2003Domain
DomainSID                          : S-1-5-21-41432690-3719764436-1984117282
ForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=Fabrikam,DC=com
Forest                             : Fabrikam.com
InfrastructureMaster               : Fabrikam-DC1.Fabrikam.com
LastLogonReplicationInterval       :
LinkedGroupPolicyObjects           : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=Fabrikam,DC=com}
LostAndFoundContainer              : CN=LostAndFound,DC=Fabrikam,DC=com
ManagedBy                          :
Name                               : Fabrikam
NetBIOSName                        : FABRIKAM
ObjectClass                        : domainDNS
ObjectGUID                         : b63b4f44-58b9-49cf-8911-b36e8575d5eb
ParentDomain                       :
PDCEmulator                        : Fabrikam-DC1.Fabrikam.com
QuotasContainer                    : CN=NTDS Quotas,DC=Fabrikam,DC=com
ReadOnlyReplicaDirectoryServers    : {CSD2722780.Fabrikam.com}
ReplicaDirectoryServers            : {Fabrikam-DC1.Fabrikam.com}
RIDMaster                          : Fabrikam-DC1.Fabrikam.com
SubordinateReferences              : {DC=ForestDnsZones,DC=Fabrikam,DC=com, DC=DomainDnsZones,DC=Fabrikam,DC=com, CN=Co
                                     nfiguration,DC=Fabrikam,DC=com}
SystemsContainer                   : CN=System,DC=Fabrikam,DC=com
UsersContainer                     : CN=Users,DC=Fabrikam,DC=com</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Gets the domain information for the domain of the currently logged on user.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144950</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADDomain</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADDomainMode</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADForest
		</command:name>
		<maml:description>
			<maml:para>Gets an Active Directory forest.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADForest</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADForest cmdlet gets the Active Directory forest specified by the parameters. You can specify the forest by setting the Identity or Current parameters.

The Identity parameter specifies the Active Directory forest to get. You can identify a forest by its fully qualified domain name (FQDN), DNS host name, or NetBIOS name. You can also set the parameter to a forest object variable, such as $&lt;localForestObject&gt; or you can pass a forest object through the pipeline to the Identity parameter.

To retrieve the forest of the local computer or current logged on user (CLU) set the Current parameter to LocalComputer or LoggedOnUser.  When you set the Current parameter, you do not need to set the Identity parameter. 

When the Current parameter is set to LocalComputer or LoggedOnUser, the cmdlet uses the Server and Credential parameter values to determine the domain and the credentials to use to identify the domain of the forest according to the following rules.

-If both the Server and Credential parameters are not specified:
  --The domain is set to the domain of the LocalComputer or LoggedOnUser and a server is located in this domain. The credentials of the current logged on user are used to get the domain.

-If the Server parameter is specified and the Credential parameter is not specified:
  --The domain is set to the domain of the specified server and the cmdlet checks to make sure that the server is in the domain of the LocalComputer or LoggedOnUser. Then the credentials of the current logged on user are used to get the domain. An error is returned when the server is not in the domain of the LocalComputer or LoggedOnUser.

-If the Server parameter is not specified and the Credential parameter is specified:
  --The domain is set to the domain of the LocalComputer or LoggedOnUser and a server is located in this domain. Then the credentials specified by the Credential parameter are used to get the domain. 
If the Server and Credential parameters are specified:
The domain is set to the domain of the specified server and the cmdlet checks to make sure that the server is in the domain of the the LocalComputer or LoggedOnUser. Then the credentials specified by the Credential parameter are used to get the domain. An error is returned when the server is not in the domain of the LocalComputer or LoggedOnUser.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADForest</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Current</maml:name>
				<maml:description>
					<maml:para>Specifies whether to return the domain of the local computer or the current logged on user (CLU). Possible values for this parameter are:
  LocalComputer or 0
  LoggedOnUser  or 1

The following example shows how to set this parameter to return the domain of the current logged on user.
  -Current LoggedOnUser</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >LocalComputer</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >LoggedOnUser</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADForest</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory forest object by providing one of the following attribute values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  DNS host name
    Example: dnsServer.corp.contoso.com
  NetBIOS name
    Example: corp

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a forest object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to a forest object instance named &quot;forestInstance&quot;.
  -Identity $forestInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADForest</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Current</maml:name>
			<maml:description>
				<maml:para>Specifies whether to return the domain of the local computer or the current logged on user (CLU). Possible values for this parameter are:
  LocalComputer or 0
  LoggedOnUser  or 1

The following example shows how to set this parameter to return the domain of the current logged on user.
  -Current LoggedOnUser</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADCurrentForestType</command:parameterValue>
			<dev:type>
				<maml:name>ADCurrentForestType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>LocalComputer</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>LoggedOnUser</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory forest object by providing one of the following attribute values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  DNS host name
    Example: dnsServer.corp.contoso.com
  NetBIOS name
    Example: corp

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a forest object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to a forest object instance named &quot;forestInstance&quot;.
  -Identity $forestInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADForest</command:parameterValue>
			<dev:type>
				<maml:name>ADForest</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADForest</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A forest object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADForest</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more forest objects. 

This cmdlet returns all of the properties of the forest. To view all of the properties for an ADForest object, use the following command and replace &lt;forest&gt; with a forest identifier such as a DNS host name.
  Get-ADForest &lt;forest&gt;| Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADForest Fabrikam.com
</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the forest information of the Fabrikam.com forest.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADForest -Current LocalComputer
</dev:code>
  			<dev:remarks>
 				<maml:para>
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the forest information of the current local computer's forest.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADForest -Current LoggedOnUser
</dev:code>
  			<dev:remarks>
 				<maml:para>
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the forest information of the current logged on users's forest.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADForest</dev:code>
  			<dev:remarks>
 				<maml:para>pplicationPartitions  : {DC=ForestDnsZones,DC=Fabrikam,DC=com, DC=DomainDnsZones,DC=Fabrikam,DC=com} 
CrossForestReferences  : {CN=northwind,CN=Partitions,CN=Configuration,DC=Fabrikam,DC=com} 
DomainNamingMaster     : Fabrikam-DC1.Fabrikam.com 
Domains                : {Fabrikam.com} 
ForestMode             : Windows2003Forest 
GlobalCatalogs         : {Fabrikam-DC1.Fabrikam.com, CSD2722780.Fabrikam.com} 
Name                   : Fabrikam.com 
PartitionsContainer    : CN=Partitions,CN=Configuration,DC=Fabrikam,DC=com 
RootDomain             : Fabrikam.com 
SchemaMaster           : Fabrikam-DC1.Fabrikam.com 
Sites                  : {Default-First-Site-Name, UnitedKingdomHQ, BO3, RODC-Site-Name} 
SPNSuffixes            : {} 
UPNSuffixes            : {} </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the forest information of the current logged on users's forest.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144951</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADForest</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADForestMode</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADDomainController
		</command:name>
		<maml:description>
			<maml:para>Gets one or more Active Directory domain controllers based on discoverable services criteria, search parameters or by providing a domain controller identifier, such as the NetBIOS name.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADDomainController</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADDomainController cmdlet gets the domain controllers specified by the parameters. You can get domain controllers by setting the Identity, Filter or Discover parameters.

The Identity parameter specifies the domain controller to get. You can identify a domain controller by its GUID, IPV4Address, global IPV6Address, or DNS host name. You can also identify a domain controller by the name of the server object that represents the domain controller, the Distinguished Name (DN) of the NTDS settings object or the server object, the GUID of the NTDS settings object or the server object under the configuration partition, or the DN of the computer object that represents the domain controller.  You can also set the Identity parameter to a domain controller object variable, such as $&lt;localDomainControllerObject&gt;, or pass a domain controller object through the pipeline to the Identity parameter.

To search for and retrieve more than one domain controller, use the Filter parameter. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, see about_ActiveDirectory_Filter. You cannot use an LDAP query string with this cmdlet.

To get a domain controller by using the discovery mechanism of DCLocator, use the Discover parameter. You can provide search criteria by setting parameters such as Service, SiteName, DomainName, NextClosestSite, AvoidSelf, and ForceDiscover. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADDomainController</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. Unless specified otherwise, these values are for the server object that represents the domain controller.

  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name of the NTDS Settings object.
  -Identity &quot;CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso&quot;

This example shows how to set this parameter to a domain controller object instance named &quot;AD_DCInstance&quot;.
  -Identity $AD_DCInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADDomainController</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Discover</maml:name>
				<maml:description>
					<maml:para>Specifies to return a discoverable domain controller that meets the conditions specified by the cmdlet parameters.
To get a domain controller by using the discovery mechanism of DCLocator, use the Discover parameter. Along with this parameter, you can provide search criteria by setting parameters such as Service, SiteName, DomainName, NextClosestSite, AvoidSelf, and ForceDiscover.

The following example shows how to specify this parameter.
  -Discover

The following example shows how to get a live DC that has Web Services enabled in a specific site with name &quot;RODC-Site&quot;.
  Get-ADDomainController -Discover -Services ADWS -SiteName RODC-Site</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AvoidSelf</maml:name>
				<maml:description>
					<maml:para>Specifies to not return the current computer as a domain controller. If the current computer is not a domain controller, this parameter is ignored. You can specify this parameter when you want to get the name of another domain controller in the domain.

The following example shows how to specify this parameter.
 -AvoidSelf</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DomainName</maml:name>
				<maml:description>
					<maml:para>Specifies the domain to search. The cmdlet locates a discoverable domain controller in this domain. Specify the domain by using the NetBIOS name or Fully Qualified Domain Name (FQDN) of the domain.

The following example shows how to set this parameter to the FQDN of a domain.
  -DomainName &quot;contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ForceDiscover</maml:name>
				<maml:description>
					<maml:para>Forces the cmdlet to clear any cached domain controller information and perform a new discovery.  If this parameter is not specified the cmdlet  may return cached domain controller information. 

The following example shows how to set this parameter.
  -ForceDiscover</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MinimumDirectoryServiceVersion</maml:name>
				<maml:description>
					<maml:para>Species the earliest operating system that the domain controller can have so that it is returned by the cmdlet when getting a DC using -Discover switch. Possible values are:
  Windows2000 or 1
  Windows2008 or 2

The following example shows how to set this parameter.
  -MinimumDirectoryServiceVersion Windows2000 

The following example shows how to get any live DC that is Windows 2008 or above:
  Get-ADDomainController -Discover -MinimumDirectoryServiceVersion Windows2008</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Windows2000</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Windows2008</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NextClosestSite</maml:name>
				<maml:description>
					<maml:para>Specifies to return a domain controller in the next closest site when a domain controller is not found in the site that contains the client. The next closest site is the site with the lowest site link cost with respect to the current site. Costs between sites are based on factors such as bandwidth, as well as physical proximity. 

The following example shows how to specify this parameter.
  -NextClosestSite</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Service</maml:name>
				<maml:description>
					<maml:para>Species the types of domain controllers to get. You can specify more than one type by using a comma-separated list. Possible values for this parameter are: 
  PrimaryDC or 1
  GlobalCatalog or 2
  KDC or 3
  TimeService or 4
  ReliableTimeService or 5
  ADWS or 6

The following example shows how to set this parameter.
  -Service GlobalCatalog, KDC 

The following example shows how to get a live DC that has Web Services enabled:
  Get-ADDomainController -Discover -Services ADWS</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADDiscoverableService[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SiteName</maml:name>
				<maml:description>
					<maml:para>Specifies the name of a site to search in to find the domain controller. If this parameter is not set, the cmdlet searches for domain controllers in the same site as the client. The name of the site is defined by the Name property of the site object.

The following example shows how to use this parameter to specify a site.
  -SiteName &quot;redmond&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Writable</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADDomainController</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AvoidSelf</maml:name>
			<maml:description>
				<maml:para>Specifies to not return the current computer as a domain controller. If the current computer is not a domain controller, this parameter is ignored. You can specify this parameter when you want to get the name of another domain controller in the domain.

The following example shows how to specify this parameter.
 -AvoidSelf</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Discover</maml:name>
			<maml:description>
				<maml:para>Specifies to return a discoverable domain controller that meets the conditions specified by the cmdlet parameters.
To get a domain controller by using the discovery mechanism of DCLocator, use the Discover parameter. Along with this parameter, you can provide search criteria by setting parameters such as Service, SiteName, DomainName, NextClosestSite, AvoidSelf, and ForceDiscover.

The following example shows how to specify this parameter.
  -Discover

The following example shows how to get a live DC that has Web Services enabled in a specific site with name &quot;RODC-Site&quot;.
  Get-ADDomainController -Discover -Services ADWS -SiteName RODC-Site</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DomainName</maml:name>
			<maml:description>
				<maml:para>Specifies the domain to search. The cmdlet locates a discoverable domain controller in this domain. Specify the domain by using the NetBIOS name or Fully Qualified Domain Name (FQDN) of the domain.

The following example shows how to set this parameter to the FQDN of a domain.
  -DomainName &quot;contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Name of the domain to which this machine is joined</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ForceDiscover</maml:name>
			<maml:description>
				<maml:para>Forces the cmdlet to clear any cached domain controller information and perform a new discovery.  If this parameter is not specified the cmdlet  may return cached domain controller information. 

The following example shows how to set this parameter.
  -ForceDiscover</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. Unless specified otherwise, these values are for the server object that represents the domain controller.

  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name of the NTDS Settings object.
  -Identity &quot;CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso&quot;

This example shows how to set this parameter to a domain controller object instance named &quot;AD_DCInstance&quot;.
  -Identity $AD_DCInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			<dev:type>
				<maml:name>ADDomainController</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MinimumDirectoryServiceVersion</maml:name>
			<maml:description>
				<maml:para>Species the earliest operating system that the domain controller can have so that it is returned by the cmdlet when getting a DC using -Discover switch. Possible values are:
  Windows2000 or 1
  Windows2008 or 2

The following example shows how to set this parameter.
  -MinimumDirectoryServiceVersion Windows2000 

The following example shows how to get any live DC that is Windows 2008 or above:
  Get-ADDomainController -Discover -MinimumDirectoryServiceVersion Windows2008</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADMinimumDirectoryServiceVersion</command:parameterValue>
			<dev:type>
				<maml:name>ADMinimumDirectoryServiceVersion</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Windows2000</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Windows2008</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NextClosestSite</maml:name>
			<maml:description>
				<maml:para>Specifies to return a domain controller in the next closest site when a domain controller is not found in the site that contains the client. The next closest site is the site with the lowest site link cost with respect to the current site. Costs between sites are based on factors such as bandwidth, as well as physical proximity. 

The following example shows how to specify this parameter.
  -NextClosestSite</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Service</maml:name>
			<maml:description>
				<maml:para>Species the types of domain controllers to get. You can specify more than one type by using a comma-separated list. Possible values for this parameter are: 
  PrimaryDC or 1
  GlobalCatalog or 2
  KDC or 3
  TimeService or 4
  ReliableTimeService or 5
  ADWS or 6

The following example shows how to set this parameter.
  -Service GlobalCatalog, KDC 

The following example shows how to get a live DC that has Web Services enabled:
  Get-ADDomainController -Discover -Services ADWS</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADDiscoverableService[]</command:parameterValue>
			<dev:type>
				<maml:name>ADDiscoverableService[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SiteName</maml:name>
			<maml:description>
				<maml:para>Specifies the name of a site to search in to find the domain controller. If this parameter is not set, the cmdlet searches for domain controllers in the same site as the client. The name of the site is defined by the Name property of the site object.

The following example shows how to use this parameter to specify a site.
  -SiteName &quot;redmond&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Name of the site that the client is in</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Writable</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDomainController</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A domain controller object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDomainController</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more domain controller objects.

When you use the Discover parameter to get a domain controller, the cmdlet returns a default set of property values for each domain controller.
When you use the Identity or Filter parameters to get a domain controller, this cmdlet returns all of the properties of the domain controller. 
To view all of the properties for an ADDomainController object, use the following command and replace &lt;domaincontroller&gt; with a domain controller identifier such as a DNS host name.
  Get-ADDomainController &lt;domaincontroller&gt;| Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          The Name and HostName properties of the ADDomainController objects returned by the cmdlet are set according to the following rule:
- If the Discover parameter is used, HostName is the Fully Qualified Domain Name of the Domain Controller, and the Name is the NetBIOS name of the Domain Controller. With the Discover parameter, the cmdlet will perform a second DCLocator call, to populate the Name property. This property will not be set, to the NetBIOS name of the Domain Controller, if the WINS service is unavailable.
- If the Identity or the Filter parameter is used, HostName is the DNSHostName attribute of the Domain Controller object, and the Name is the Name (RDN) attribute of the Domain Controller object. With the Identity or the Filter parameter, the HostName property will not be set, if the DNSHostName attribute of the Domain Controller object is null.

This cmdlet does not work with AD LDS.
This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Discover -Site &quot;Default-First-Site-Name&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get one available DC in a given site using Discovery.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Discover -Site &quot;Default-First-Site-Name&quot; -ForceDiscover</dev:code>
  			<dev:remarks>
  			        <maml:para>Force discover/find one available DC in a given site.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Discover -Service &quot;GlobalCatalog&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get a global catalog in the current forest using Discovery.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Discover -Service 2</dev:code>
  			<dev:remarks>
  			        <maml:para>Get a global catalog in the current forest using Discovery.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Discover</dev:code>
  			<dev:remarks>
  			        <maml:para>Get one available DC in the current domain using Discovery.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Discover -Domain &quot;fabrikam.com&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get one available DC in a given domain using Discovery.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Discover -Domain &quot;corp.contoso.com&quot; -Service &quot;PrimaryDC&quot;,&quot;TimeService&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the PDC using Discovery and make sure that is advertising as a time server.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Identity &quot;PDC-01&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get a domain controller using its NetBIOS name.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 9 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController &quot;PDC-01&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get a domain controller using its NetBIOS name.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 10 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Identity &quot;TK5-CORP-DC-10.fabrikam.com&quot; -Server &quot;fabrikam.com&quot; -Credential &quot;corp\administrator&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get a domain controller using its DNS host name, in a given domain (specified in Server parameter) and specifying administrator credentials.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 11 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Identity &quot;168.54.62.57&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get a domain controller using its IP address.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 12 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Filter  { isGlobalCatalog -eq $true -and Site -eq &quot;Default-First-Site-Name&quot; }</dev:code>
  			<dev:remarks>
  			        <maml:para>Get all global catalogs in a given site.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 13 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Server &quot;research.fabrikam.com&quot; -Filter { isGlobalCatalog -eq $true -and isReadOnly -eq $true }</dev:code>
  			<dev:remarks>
  			        <maml:para>Get all ROGCs in the child domain to which the client is connected.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 14 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController</dev:code>
  			<dev:remarks>
  			        <maml:para>Gets the domain controller in the user's current session. This is the domain controller used as a default Server in the context of an AD Provider. Using this cmdlet in this way will let you know which Server is being used by default.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144952</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADDomainControllerPasswordReplicationPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADDomainControllerPasswordReplicationPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADDomainControllerPasswordReplicationPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADOrganizationalUnit
		</command:name>
		<maml:description>
			<maml:para>Gets one or more Active Directory organizational units.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADOrganizationalUnit</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADOrganizational unit cmdlet gets an organizational unit object or performs a search to retrieve multiple organizational units.

The Identity parameter specifies the Active Directory organizational unit to retrieve. You can identify an organizational unit by its distinguished name (DN) or GUID. You can also set the parameter to an organizational unit object variable, such as $&lt;localOrganizationalunitObject&gt; or pass an organizational unit object through the pipeline to the Identity parameter.

To search for and retrieve more than one organizational unit, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, see about_ActiveDirectory_Filter. If you have existing LDAP query strings, you can use the LDAPFilter parameter.

This cmdlet retrieves a default set of organizational unit object properties. To retrieve additional properties use the Properties parameter. For more information about the how to determine the properties for computer objects, see the Properties parameter description. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADOrganizationalUnit</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADOrganizationalUnit</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies the identity of an Active Directory organizational unit object. The parameter accepts the following identity formats. The identifier in parentheses is the LDAP display name for the attribute that contains the identity.

  Distinguished Name 
    Example:  OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an organizational unit object instance named &quot;OUinstance&quot;.
  -Identity   $OUInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADOrganizationalUnit</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LDAPFilter</maml:name>
				<maml:description>
					<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies the identity of an Active Directory organizational unit object. The parameter accepts the following identity formats. The identifier in parentheses is the LDAP display name for the attribute that contains the identity.

  Distinguished Name 
    Example:  OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an organizational unit object instance named &quot;OUinstance&quot;.
  -Identity   $OUInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			<dev:type>
				<maml:name>ADOrganizationalUnit</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LDAPFilter</maml:name>
			<maml:description>
				<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultPageSize</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultSetSize</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.Int32]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchBase</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchScope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSearchScope</command:parameterValue>
			<dev:type>
				<maml:name>ADSearchScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Subtree</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Base</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OneLevel</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Subtree</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADOrganizationalUnit</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An organizational unit object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADOrganizationalUnit</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more organizational unit objects. 

This cmdlet returns a default set of ADOrganizational unit property values. To retrieve additional ADOrganizational unit properties, use the Properties parameter. 

To view the properties for an ADOrganizational unit object, see the following examples. To run these examples, replace &lt;organizational unit&gt; with an organizational unit identifier such as the distinguished name (DN) of an organizational unit.

To get a list of the default set of properties of an ADOrganizational unit object, use the following command:
   Get-ADOrganizational unit &lt;organizational unit&gt;| Get-Member

To get a list of all the properties of an ADOrganizational unit object, use the following command:
   Get-ADOrganizational unit &lt;organizational unit&gt; -Properties * | Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADOrganizationalUnit -Filter 'Name -like &quot;*&quot;' | FT Name, DistinguishedName -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name                 DistinguishedName
----                 -----------------
Domain Controllers   OU=Domain Controllers,DC=FABRIKAM,DC=COM
UserAccounts         OU=UserAccounts,DC=FABRIKAM,DC=COM
Sales                OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM
Marketing            OU=Marketing,OU=UserAccounts,DC=FABRIKAM,DC=COM
Production           OU=Production,OU=UserAccounts,DC=FABRIKAM,DC=COM
HumanResources       OU=HumanResources,OU=UserAccounts,DC=FABRIKAM,DC=COM
NorthAmerica         OU=NorthAmerica,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM
SouthAmerica         OU=SouthAmerica,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM
Europe               OU=Europe,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM
AsiaPacific          OU=AsiaPacific,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM
Finance              OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM
Corporate            OU=Corporate,OU=UserAccounts,DC=FABRIKAM,DC=COM
ApplicationServers   OU=ApplicationServers,DC=FABRIKAM,DC=COM
Groups               OU=Groups,OU=Managed,DC=FABRIKAM,DC=COM
PasswordPolicyGroups OU=PasswordPolicyGroups,OU=Groups,OU=Managed,DC=FABRIKAM,DC=COM
Managed              OU=Managed,DC=FABRIKAM,DC=COM
ServiceAccounts      OU=ServiceAccounts,OU=Managed,DC=FABRIKAM,DC=COM
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Gets all the Organizational Units in the domain</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADOrganizationalUnit -Identity 'OU=AsiaPacific,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM' | ft Name,Country,PostalCode,City,StreetAddress,State -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name        Country PostalCode City     StreetAddress    State
----        ------- ---------- ----     -------------    -----
AsiaPacific AU      4171       Balmoral 45 Martens Place QLD
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Gets the Organizational Unit with DistinguishedName 'OU=AsiaPacific,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADOrganizationalUnit -LDAPFilter '(name=*)' -SearchBase 'OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM' -SearchScope OneLevel | ft Name,Country,PostalCode,City,StreetAddress,State
</dev:code>
  			<dev:remarks>
 				<maml:para>Name                    Country                 PostalCode             City                   StreetAddress          State
----                    -------                 ----------             ----                   -------------          -----
AsiaPacific             AU                      4171                   Balmoral               45 Martens Place       QLD
Europe                  UK                      NG34 0NI               QUARRINGTON            22 Station Rd
NorthAmerica            US                      02142                  Cambridge              1634 Randolph Street   MA
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Gets Organizational Units underneath the sales Organizational Unit using an LDAP filter.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144953</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADOrganizational unit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADOrganizational unit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADOrganizational unit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADGroupMember
		</command:name>
		<maml:description>
			<maml:para>Gets the members of an Active Directory group. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADGroupMember</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADGroupMember cmdlet gets the members of an Active Directory group. Members can be users, groups, and computers. 

The Identity parameter specifies the Active Directory group to access. You can identify a group by its distinguished name (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also specify the group by passing a group object through the pipeline. For example, you can use the Get-ADGroup cmdlet to retrieve a group object and then pass the object through the pipeline to the Get-ADGroupMember cmdlet.

If the Recursive parameter is specified, the cmdlet gets all members in the hierarchy of the group that do not contain child objects. For example, if the group SaraDavisReports contains the user KarenToh and the group JohnSmithReports, and JohnSmithReports contains the user JoshPollock, then the cmdlet returns KarenToh and JoshPollock.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADGroupMember</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Recursive</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet get all members in the hierarchy of a group that do not contain child objects. The following example shows a hierarchy for the group SaraDavisReports.
+SaraDavisReports [group]
  -KarenToh [user]
  -MattHinkLaptop [computer]
  +JohnSmithReports [group]
    -JoshPollock [user]
    -ArmandoPinto [user]
    +JohnSmithComputers [group]
      -JoshComputer [computer]
  
If you specify SaraDavisReports as the group and specify the Recursive parameter, the following members and sub-members are returned.
  KarenToh
  MattHinkLaptop
  JoshPollock
  ArmandoPinto
  JoshComputer

If the specified group does not have any members, then nothing is returned.

The following example shows how to specify this parameter.
  -Recursive</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Recursive</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet get all members in the hierarchy of a group that do not contain child objects. The following example shows a hierarchy for the group SaraDavisReports.
+SaraDavisReports [group]
  -KarenToh [user]
  -MattHinkLaptop [computer]
  +JohnSmithReports [group]
    -JoshPollock [user]
    -ArmandoPinto [user]
    +JohnSmithComputers [group]
      -JoshComputer [computer]
  
If you specify SaraDavisReports as the group and specify the Recursive parameter, the following members and sub-members are returned.
  KarenToh
  MattHinkLaptop
  JoshPollock
  ArmandoPinto
  JoshComputer

If the specified group does not have any members, then nothing is returned.

The following example shows how to specify this parameter.
  -Recursive</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A group object is received by the Identity parameter
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADPrincipal</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more principal objects that represent users, computers or groups that are members of the specified group.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroupmember
cmdlet Get-ADGroupMember at command pipeline position 1 
Supply values for the following parameters: 
(Type !? for Help.) 
Identity: Administrators </dev:code>
  			<dev:remarks>
 				<maml:para>distinguishedName : CN=Domain Admins,CN=Users,DC=Fabrikam,DC=com 
name              : Domain Admins 
objectClass       : group 
objectGUID        : 5ccc6037-c2c9-42be-8e92-c8f98afd0011 
SamAccountName    : Domain Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-512 

distinguishedName : CN=Enterprise Admins,CN=Users,DC=Fabrikam,DC=com 
name              : Enterprise Admins 
objectClass       : group 
objectGUID        : 0215b0a5-aea1-40da-b598-720efe930ddf 
SamAccountName    : Enterprise Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-519 

distinguishedName : CN=LabAdmin,CN=Users,DC=Fabrikam,DC=com 
name              : LabAdmin 
objectClass       : user 
objectGUID        : ab7c269d-aec5-4fcc-aebe-6cd1a2e6cd53 
SamAccountName    : LabAdmin 
SID               : S-1-5-21-41432690-3719764436-1984117282-1000 

distinguishedName : CN=Administrator,CN=Users,DC=Fabrikam,DC=com 
name              : Administrator 
objectClass       : user 
objectGUID        : 994f46e6-c62c-483f-a6cf-124197b6a959 
SamAccountName    : Administrator 
SID               : S-1-5-21-41432690-3719764436-1984117282-500 </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the members of the administrators groups using the default behavior.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroup -server localhost:60000 -filter {GroupScope -eq &quot;DomainLocal&quot;} -SearchBase &quot;DC=AppNC&quot; | get-adgroupmember -partition &quot;DC=AppNC&quot;</dev:code>
  			<dev:remarks>
 				<maml:para>distinguishedName : CN=SanjayPatel,OU=AccountDeptOU,DC=AppNC 
name              : SanjayPatel 
objectClass       : user 
objectGUID        : d671de28-6e40-42a7-b32c-63d336de296d 
SamAccountName    : 
SID               : S-1-510474493-936115905-2231798853-1260534229-4171027843-767619944 </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the groups members of all domain local groups in the AD LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroupmember -Identity administrators </dev:code>
  			<dev:remarks>
 				<maml:para>distinguishedName : CN=Domain Admins,CN=Users,DC=Fabrikam,DC=com 
name              : Domain Admins 
objectClass       : group 
objectGUID        : 5ccc6037-c2c9-42be-8e92-c8f98afd0011 
SamAccountName    : Domain Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-512 

distinguishedName : CN=Enterprise Admins,CN=Users,DC=Fabrikam,DC=com 
name              : Enterprise Admins 
objectClass       : group 
objectGUID        : 0215b0a5-aea1-40da-b598-720efe930ddf 
SamAccountName    : Enterprise Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-519 

distinguishedName : CN=LabAdmin,CN=Users,DC=Fabrikam,DC=com 
name              : LabAdmin 
objectClass       : user 
objectGUID        : ab7c269d-aec5-4fcc-aebe-6cd1a2e6cd53 
SamAccountName    : LabAdmin 
SID               : S-1-5-21-41432690-3719764436-1984117282-1000 

distinguishedName : CN=Administrator,CN=Users,DC=Fabrikam,DC=com 
name              : Administrator 
objectClass       : user 
objectGUID        : 994f46e6-c62c-483f-a6cf-124197b6a959 
SamAccountName    : Administrator 
SID               : S-1-5-21-41432690-3719764436-1984117282-500 </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the group  members of the administrators group.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroupmember &quot;Enterprise Admins&quot; -recursive </dev:code>
  			<dev:remarks>
 				<maml:para>distinguishedName : CN=Administrator,CN=Users,DC=Fabrikam,DC=com 
name              : Administrator 
objectClass       : user 
objectGUID        : 994f46e6-c62c-483f-a6cf-124197b6a959 
SamAccountName    : Administrator 
SID               : S-1-5-21-41432690-3719764436-1984117282-500 

distinguishedName : CN=Sagiv Hadaya,CN=Users,DC=Fabrikam,DC=com 
name              : Sagiv Hadaya 
objectClass       : user 
objectGUID        : 64706230-f179-4fe4-b8c9-f0d334e66ab1 
SamAccountName    : SHadaya 
SID               : S-1-5-21-41432690-3719764436-1984117282-1158 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the members of the 'Enterprise Admins' group including the members of any child groups.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144954</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADPrincipalGroupMembership
		</command:name>
		<maml:description>
			<maml:para>Gets the Active Directory groups that have a specified user, computer, group, or service account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADPrincipalGroupMembership</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADPrincipalGroupMembership cmdlet gets the Active Directory groups that have a specified user, computer, group, or service account as a member. This cmdlet requires a global catalog to perform the group search. If the forest that contains the user, computer or group does not have a global catalog, the cmdlet returns a non-terminating error. If you want to search for local groups in another domain, use the ResourceContextServer parameter to specify the alternate server in the other domain. 

The Identity parameter specifies the user, computer, or group object that you want to determine group membership for. You can identify a user, computer, or group object by its distinguished name (DN), GUID, security identifier (SID) or SAM account name. You can also specify a user, group, or computer object variable, such as $&lt;localGroupObject&gt;, or pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADGroup cmdlet to retrieve a group object and then pass the object through the pipeline to the Get-ADPrincipalGroupMembership cmdlet. Similarly, you can use Get-ADUser or Get-ADComputer to get user and computer objects to pass through the pipeline.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADPrincipalGroupMembership</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory principal object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  - Microsoft.ActiveDirectory.Management.ADGroup
  - Microsoft.ActiveDirectory.Management.ADUser
  - Microsoft.ActiveDirectory.Management.ADComputer
  - Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a principal object instance named &quot;principalInstance&quot;.
  -Identity $principalInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResourceContextPartition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of the partition of an AD or AD LDS instance to search. Use this parameter with the ResourceContextServer parameter to specify a partition hosted by the specified server. If the ResourceContextPartition parameter is not specified, the default partition of the ResourceContextServer is searched. 

The following example shows how to set this parameter.
  -ResourceContextPartition &quot;cn=employees,dc=corp,dc=contoso,dc=com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResourceContextServer</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet return a list of groups that the user is a member of and that reside in the specified domain. Use this parameter to search for groups in a domain that is not the domain where the user's account resides. To search a partition other than the default partition in this domain, also specify the ResourceContextPartition parameter.


The following example shows how to specify this parameter.
  -ResourceContextServer &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory principal object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  - Microsoft.ActiveDirectory.Management.ADGroup
  - Microsoft.ActiveDirectory.Management.ADUser
  - Microsoft.ActiveDirectory.Management.ADComputer
  - Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a principal object instance named &quot;principalInstance&quot;.
  -Identity $principalInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResourceContextPartition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of the partition of an AD or AD LDS instance to search. Use this parameter with the ResourceContextServer parameter to specify a partition hosted by the specified server. If the ResourceContextPartition parameter is not specified, the default partition of the ResourceContextServer is searched. 

The following example shows how to set this parameter.
  -ResourceContextPartition &quot;cn=employees,dc=corp,dc=contoso,dc=com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResourceContextServer</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet return a list of groups that the user is a member of and that reside in the specified domain. Use this parameter to search for groups in a domain that is not the domain where the user's account resides. To search a partition other than the default partition in this domain, also specify the ResourceContextPartition parameter.


The following example shows how to specify this parameter.
  -ResourceContextServer &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADPrincipal</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A principal object that represents a user, computer or group is received by the Identity parameter. Derived types, such as the following are also received by this parameter.
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADGroup
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns group objects that have the specified user, computer, group or service account as a member.

The Get-ADPrincipalGroupMembership cmdlet returns a default set of ADGroup property values. To retrieve additional ADGroup properties pass the ADGroups objects produced by this cmdlet through the pipline to Get-ADGroup.  Specify the additional properties required from the group objects by passing the -Properties parameter to Get-ADGroup.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adprincipalgroupmembership
cmdlet Get-ADPrincipalGroupMembership at command pipeline position 1 
Supply values for the following parameters: 
(Type !? for Help.) 
Identity: administrator </dev:code>
  			<dev:remarks>
 				<maml:para>distinguishedName : CN=Domain Users,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Global 
name              : Domain Users 
objectClass       : group 
objectGUID        : 86c0f0d5-8b4d-4f35-a867-85a006b92902 
SamAccountName    : Domain Users 
SID               : S-1-5-21-41432690-3719764436-1984117282-513 

distinguishedName : CN=Administrators,CN=Builtin,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : DomainLocal 
name              : Administrators 
objectClass       : group 
objectGUID        : 02ce3874-dd86-41ba-bddc-013f34019978 
SamAccountName    : Administrators 
SID               : S-1-5-32-544 

distinguishedName : CN=Schema Admins,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Universal 
name              : Schema Admins 
objectClass       : group 
objectGUID        : 8d62890f-385e-4cfa-9b2a-c72576097583 
SamAccountName    : Schema Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-518 

distinguishedName : CN=Enterprise Admins,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Universal 
name              : Enterprise Admins 
objectClass       : group 
objectGUID        : 0215b0a5-aea1-40da-b598-720efe930ddf 
SamAccountName    : Enterprise Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-519 

distinguishedName : CN=Domain Admins,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Global 
name              : Domain Admins 
objectClass       : group 
objectGUID        : 5ccc6037-c2c9-42be-8e92-c8f98afd0011 
SamAccountName    : Domain Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-512 

distinguishedName : CN=Group Policy Creator Owners,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Global 
name              : Group Policy Creator Owners 
objectClass       : group 
objectGUID        : a58f7bf2-fd20-4bbd-96f0-ee10fa1613c7 
SamAccountName    : Group Policy Creator Owners 
SID               : S-1-5-21-41432690-3719764436-1984117282-520 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Retrieve all groups the administrator account is a member of using the cmdlet default behavior.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adprincipalgroupmembership -server localhost:60000 -identity &quot;CN=GlenJohns,DC=AppNC&quot; -partition &quot;DC=AppNC&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Retrieve all the groups the user 'CN=GlenJohns,DC=AppNC' is a member of on an AD LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adprincipalgroupmembership -Identity Administrator</dev:code>
  			<dev:remarks>
 				<maml:para>distinguishedName : CN=Domain Users,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Global 
name              : Domain Users 
objectClass       : group 
objectGUID        : 86c0f0d5-8b4d-4f35-a867-85a006b92902 
SamAccountName    : Domain Users 
SID               : S-1-5-21-41432690-3719764436-1984117282-513 

distinguishedName : CN=Administrators,CN=Builtin,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : DomainLocal 
name              : Administrators 
objectClass       : group 
objectGUID        : 02ce3874-dd86-41ba-bddc-013f34019978 
SamAccountName    : Administrators 
SID               : S-1-5-32-544 

distinguishedName : CN=Schema Admins,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Universal 
name              : Schema Admins 
objectClass       : group 
objectGUID        : 8d62890f-385e-4cfa-9b2a-c72576097583 
SamAccountName    : Schema Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-518 

distinguishedName : CN=Enterprise Admins,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Universal 
name              : Enterprise Admins 
objectClass       : group 
objectGUID        : 0215b0a5-aea1-40da-b598-720efe930ddf 
SamAccountName    : Enterprise Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-519 

distinguishedName : CN=Domain Admins,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Global 
name              : Domain Admins 
objectClass       : group 
objectGUID        : 5ccc6037-c2c9-42be-8e92-c8f98afd0011 
SamAccountName    : Domain Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-512 

distinguishedName : CN=Group Policy Creator Owners,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Global 
name              : Group Policy Creator Owners 
objectClass       : group 
objectGUID        : a58f7bf2-fd20-4bbd-96f0-ee10fa1613c7 
SamAccountName    : Group Policy Creator Owners 
SID               : S-1-5-21-41432690-3719764436-1984117282-520 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Retrieve all the groups the administrator is a member of.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adprincipalgroupmembership -Identity Administrator -ResourceContextServer ChildDomain.Fabrikam.Com -ResourceContextPartition &quot;DC=Fabrikam,DC=com&quot; </dev:code>
  			<dev:remarks>
 				<maml:para>distinguishedName : CN=Domain Users,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Global 
name              : Domain Users 
objectClass       : group 
objectGUID        : 86c0f0d5-8b4d-4f35-a867-85a006b92902 
SamAccountName    : Domain Users 
SID               : S-1-5-21-41432690-3719764436-1984117282-513 

distinguishedName : CN=Group Policy Creator Owners,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Global 
name              : Group Policy Creator Owners 
objectClass       : group 
objectGUID        : a58f7bf2-fd20-4bbd-96f0-ee10fa1613c7 
SamAccountName    : Group Policy Creator Owners 
SID               : S-1-5-21-41432690-3719764436-1984117282-520 

distinguishedName : CN=Enterprise Admins,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Universal 
name              : Enterprise Admins 
objectClass       : group 
objectGUID        : 0215b0a5-aea1-40da-b598-720efe930ddf 
SamAccountName    : Enterprise Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-519 

distinguishedName : CN=Schema Admins,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Universal 
name              : Schema Admins 
objectClass       : group 
objectGUID        : 8d62890f-385e-4cfa-9b2a-c72576097583 
SamAccountName    : Schema Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-518 

distinguishedName : CN=Domain Admins,CN=Users,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : Global 
name              : Domain Admins 
objectClass       : group 
objectGUID        : 5ccc6037-c2c9-42be-8e92-c8f98afd0011 
SamAccountName    : Domain Admins 
SID               : S-1-5-21-41432690-3719764436-1984117282-512 

distinguishedName : CN=Administrators,CN=Builtin,DC=Fabrikam,DC=com 
GroupCategory     : Security 
GroupScope        : DomainLocal 
name              : Administrators 
objectClass       : group 
objectGUID        : 02ce3874-dd86-41ba-bddc-013f34019978 
SamAccountName    : Administrators 
SID               : S-1-5-32-544 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Retrieve all teh groups the adminsitrator account in the local domain is a member of in the resource domain ChildDomain.Fabrikam.Com</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144955</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADFineGrainedPasswordPolicySubject
		</command:name>
		<maml:description>
			<maml:para>Gets the users and groups to which a fine grained password policy is applied.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADFineGrainedPasswordPolicySubject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get- ADFineGrainedPasswordPolicySubject cmdlet gets users and groups that are subject to a fine grained password policy.

The Identity parameter specifies the fine grained password policy. You can identify a fine grained password policy by its distinguished name, GUID or name. You can also set the Identity parameter to a fine grained password policy object variable, such as $&lt;localPasswordPolicyObject&gt;, or pass a fine grained password policy object through the pipeline to the Identity parameter. For example, you can use the Get-ADFineGrainedPasswordPolicy cmdlet to retrieve a fine grained password policy object and then pass the object through the pipeline to the Get- ADFineGrainedPasswordPolicySubject cmdlet. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADFineGrainedPasswordPolicySubject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A fine grained password policy object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADPrincipal</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns principal objects that represent the users and groups to which the fine grained password policy is applied. 
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADFineGrainedPasswordPolicySubject -Identity DomainUsersPSO | FT Name,ObjectClass,DistinguishedName -AutoSize
</dev:code>
  			<dev:remarks>
 				<maml:para>Name         ObjectClass DistinguishedName
----         ----------- -----------------
Domain Users group       CN=Domain Users,CN=Users,DC=FABRIKAM,DC=COM
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the Fine Grained Password Policy subject of the Password Policy named 'DomainUsersPSO'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144956</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADDomainControllerPasswordReplicationPolicy
		</command:name>
		<maml:description>
			<maml:para>Gets the members of the allowed list or denied list of a read-only domain controller's password replication policy.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADDomainControllerPasswordReplicationPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADDomainControllerPasswordReplicationPolicy gets the users, computers, service accounts and groups that are members of the applied list or denied list for a read-only domain controller's (RODC) password replication policy. To get the members of the applied list, specify the AppliedList parameter. To get the members of the denied list, specify the DeniedList parameter.

The Identity parameter specifies the RODC that uses the allowed and denied lists to apply the password replication policy. You can identify a domain controller by its GUID, IPV4Address, IPV6Address, or DNS host name. You can also identify a domain controller by the name of the server object that represents the domain controller, the Distinguished Name (DN) of the NTDS settings object or the server object, the GUID of the NTDS settings object or the server object under the configuration partition, or the DN of the computer object that represents the domain controller. 

You can also set the Identity parameter to a domain controller object variable, such as $&lt;localDomainControllerobject&gt;, or pass a domain controller object through the pipeline to the Identity parameter. For example, you can use the Get-ADDomainController cmdlet to retrieve a domain controller object and then pass the object through the pipeline to the Get-ADDomainControllerPasswordReplicationPolicy cmdlet. 

If you specify a writeable domain controller for this cmdlet, the cmdlet returns a non-terminating error.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADDomainControllerPasswordReplicationPolicy</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Allowed</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet should return the users, computers, and groups from the domain controller allowed list. 

The following example shows how to specify this parameter.
  -AllowedList </maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADDomainControllerPasswordReplicationPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Denied</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet should return the users, computers, and groups from the domain controller denied list. 

The following example shows how to specify this parameter.
  -DeniedList </maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Allowed</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet should return the users, computers, and groups from the domain controller allowed list. 

The following example shows how to specify this parameter.
  -AllowedList </maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Denied</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet should return the users, computers, and groups from the domain controller denied list. 

The following example shows how to specify this parameter.
  -DeniedList </maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			<dev:type>
				<maml:name>ADDomainController</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDomainController</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A domain controller object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADPrincipal</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more objects that represent the users, computers, service accounts and groups that are members of the applied list or denied list of the domain controller password replication policy. The list returned depends on the parameters specified.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainControllerPasswordReplicationPolicy -Identity &quot;FABRIKAM-RODC1&quot; -Allowed | ft Name,ObjectClass</dev:code>
  			<dev:remarks>
  			        <maml:para>Get from an RODC domain controller password replication policy the allowed accounts showing the name and object class of each</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Filter {IsReadOnly -eq $true} | Get-ADDomainControllerPasswordReplicationPolicy -Allowed </dev:code>
  			<dev:remarks>
 				<maml:para>DistinguishedName : CN=Allowed RODC Password Replication Group,CN=Users,DC=Fabrikam,DC=com 
Name              : Allowed RODC Password Replication Group 
ObjectClass       : group 
ObjectGUID        : 239b0470-7f49-472d-8fcb-4911e90b2c5e 
SamAccountName    : Allowed RODC Password Replication Group 
SID               : S-1-5-21-41432690-3719764436-1984117282-571</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the password replcation policy allowed lists from all RODCs in the domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144957</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADDomainControllerPasswordReplicationPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADDomainControllerPasswordReplicationPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADDomainControllerPasswordReplicationPolicyUsage
		</command:name>
		<maml:description>
			<maml:para>Gets the Active Directory accounts that are authenticated by a read-only domain controller or that are in the revealed list of the domain controller.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADDomainControllerPasswordReplicationPolicyUsage</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADDomainControllerPasswordReplicationPolicyUsage gets the user or computer accounts that are authenticated by a read-only domain controller (RODC) or that have passwords that are stored on that RODC. The list of accounts that are stored on a RODC is known as the revealed list. 

To get accounts that are authenticated by the RODC, use the AuthenticatedAccounts parameter. To get the accounts that have passwords stored on the RODC, use the RevealedAccounts parameter.

The Identity parameter specifies the RODC. You can identify a domain controller by its GUID, IPV4Address, global IPV6Address, or DNS host name. You can also identify a domain controller by the name of the server object that represents the domain controller, the Distinguished Name (DN) of the NTDS settings object of the server object, the GUID of the NTDS settings object of the server object under the configuration partition, or the DN of the computer object that represents the domain controller. You can also set the Identity parameter to a domain controller object variable, such as $&lt;localDomainControllerobject&gt;, or pass a domain controller object through the pipeline to the Identity parameter. For example, you can use the Get-ADDomainController cmdlet to retrieve a domain controller object and then pass the object through the pipeline to the Get-ADDomainControllerPasswordReplicationPolicyUsage cmdlet. If you specify a writeable domain controller for this cmdlet, the cmdlet returns a non-terminating error.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADDomainControllerPasswordReplicationPolicyUsage</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthenticatedAccounts</maml:name>
				<maml:description>
					<maml:para>Specifies a search for accounts that have been authenticated by a read-only domain controller

The following example shows how to specify this parameter.
  -AuthenticatedAccounts</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>RevealedAccounts</maml:name>
				<maml:description>
					<maml:para>Specifies a search for accounts which have passwords that are stored on the read-only domain controller.

The following example shows how to specify this parameter.
  -RevealedAccounts</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthenticatedAccounts</maml:name>
			<maml:description>
				<maml:para>Specifies a search for accounts that have been authenticated by a read-only domain controller

The following example shows how to specify this parameter.
  -AuthenticatedAccounts</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			<dev:type>
				<maml:name>ADDomainController</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>RevealedAccounts</maml:name>
			<maml:description>
				<maml:para>Specifies a search for accounts which have passwords that are stored on the read-only domain controller.

The following example shows how to specify this parameter.
  -RevealedAccounts</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDomainController</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A domain controller object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more account objects that represent the users, computers, and service accounts that are authenticated by the specified read-only domain controller (RODC) or that have passwords that are stored on the RODC.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainControllerPasswordReplicationPolicyUsage -Identity &quot;FABRIKAM-RODC1&quot; -AuthenticatedAccounts | ft Name,ObjectClass -A</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the authenticated accounts for a given RODC showing the name and object class of each</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainControllerPasswordReplicationPolicyUsage -Identity &quot;FABRIKAM-RODC1&quot; -RevealedAccounts | ft Name,ObjectClass -A</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the revealed accounts for a given RODC showing the name and object class of each</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Filter {IsReadOnly -eq $true} | Get-ADDomainControllerPasswordReplicationPolicyUsage </dev:code>
  			<dev:remarks>
 				<maml:para>DistinguishedName : CN=krbtgt_35512,CN=Users,DC=Fabrikam,DC=com 
Enabled           : False 
Name              : krbtgt_35512 
ObjectClass       : user 
ObjectGUID        : 8c7268f9-add3-409c-968b-de029e517211 
SamAccountName    : krbtgt_35512 
SID               : S-1-5-21-41432690-3719764436-1984117282-1106 
UserPrincipalName : 

DistinguishedName : CN=CSD2722780,OU=Domain Controllers,DC=Fabrikam,DC=com 
Enabled           : True 
Name              : CSD2722780 
ObjectClass       : computer 
ObjectGUID        : 63a5e005-e01f-4fc9-ae71-9d9367f808bc 
SamAccountName    : CSD2722780$ 
SID               : S-1-5-21-41432690-3719764436-1984117282-1105 
UserPrincipalName : </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the list of account cached all RODCs in the domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=145018</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADDomainController</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADAccountResultantPasswordReplicationPolicy
		</command:name>
		<maml:description>
			<maml:para>Gets the resultant password replication policy for an Active Directory account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADAccountResultantPasswordReplicationPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADAccountResultantPasswordReplicationPolicy gets the resultant password replication policy for a user, computer or service account on the specified read-only domain controller.

The policy will be one of the following values:
      Allow or 1
      DenyExplicit or 0
      DenyImplicit or 2
      Unknown or -1

The Identity parameter specifies the account. You can identify a user, computer, or service account object by its distinguished name (DN), GUID, security identifier (SID) or Security Account Manager (SAM) account name. You can also set the Identity parameter to an account object variable, such as $&lt;localAccountobject&gt;, or pass an account object through the pipeline to the Identity parameter. For example, you can use the Get-ADUser, Get-ADComputer, Get-ADServiceAccount or Search-ADAccount cmdlets to retrieve an account object and then pass the object through the pipeline to the Get-ADAccountResultantPasswordReplicationPolicy cmdlet.

The DomainController parameter specifies the read-only domain controller. You can identify a domain controller by its IPV4Address, global IPV6Address, or DNS host name. You can also identify a domain controller by the Distinguished Name (DN) of the NTDS settings object or the server object, the GUID of the NTDS settings object or the server object under the configuration partition, or the DN, SamAccountName, GUID, SID of the computer object that represents the domain controller. You can also set the DomainController parameter to a domain controller object variable, such as $&lt;localDomainControllerObject&gt;.  
</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADAccountResultantPasswordReplicationPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>DomainController</maml:name>
				<maml:description>
					<maml:para>Specifies a read-only domain controller (RODC). The cmdlet returns the password replication policy of the account for this RODC. You can identify the domain controller by providing one of the following values. 
  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name (DN) of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name (DN) of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name (DN) of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

Note: The identifier in parentheses is the LDAP display name for the attribute.

The following example shows how to set this parameter to the DNS host name of a domain controller.
   -DomainController &quot;corp-DC01.corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthtype</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthtype</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>DomainController</maml:name>
			<maml:description>
				<maml:para>Specifies a read-only domain controller (RODC). The cmdlet returns the password replication policy of the account for this RODC. You can identify the domain controller by providing one of the following values. 
  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name (DN) of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name (DN) of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name (DN) of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

Note: The identifier in parentheses is the LDAP display name for the attribute.

The following example shows how to set this parameter to the DNS host name of a domain controller.
   -DomainController &quot;corp-DC01.corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			<dev:type>
				<maml:name>ADDomainController</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An account object is received by the Identity parameter.

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADResultantPasswordReplicationPolicy</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns an ADResultantPasswordReplicationPolicy enum value that represents the resultant password replication policy for an account on the specified domain controller.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADAccountResultantPasswordReplicationPolicy BradSu &quot;FABRIKAM-RODC1&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the resultant password replication policy on the domain for a given user account.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADAccountResultantPasswordReplicationPolicy BobKe -DomainController &quot;FABRIKAM-RODC1&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the resultant password replication policy on a specific domain controller for a given user account.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADAccountResultantPasswordReplicationPolicy &quot;CN=Jordao Moreno,OU=Europe,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot; &quot;FABRIKAM-RODC1&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the resultant password replication policy on a specific domain controller for a given user account DN.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144958</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Search-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADUserResultantPasswordPolicy
		</command:name>
		<maml:description>
			<maml:para>Gets the resultant password policy for a user.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADUserResultantPasswordPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADAccountResultantPasswordPolicy gets the resultant password policy object (RSoP) for a user. The RSoP is defined by the Active Directory attribute named msDS-ResultantPSO.

A user can have multiple password policy objects (PSOs) associated with it, but only one PSO is the RSoP. A PSO is associated with a user when the PSO applies directly to the user or when the PSO applies to an Active Directory group that contains the user. When more than one PSO policy is associated with a user or group, the RSoP value defines the PSO to apply. 

The resultant password policy or RSoP for a user is determined by using the following procedure.
  - If only one PSO is associated with a user, this PSO is the RSoP.
  - If more than one PSO is associated with a user, the PSO that applies directly to the user is the RSoP.  
  - If more than one PSO applies directly to the user, the PSO with the lowest msDS-PasswordSettingsPrecedence attribute value is the RSoP and this event is logged as a warning in the Active Directory event log. The lowest attribute value represents the highest PSO precedence. For example, if the msDS-PasswordSettingsPrecedence values of two PSOs are 100 and 200, the PSO with the attribute value of 100 is the RSoP.
  - If there are no PSOs that apply directly to the user, the PSOs of the global security groups that have the user as a member are compared. The PSO with the lowest msDS-PasswordSettingsPrecedence value is the RSoP.

The Identity parameter specifies the Active Directory user. You can identify a user by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the parameter to a user object variable, such as $&lt;localUserObject&gt; or pass a user object through the pipeline to the Identity parameter. For example, you can use the Get-ADUser cmdlet to retrieve a user object and then pass the object through the pipeline to the Get-ADUserResultantPasswordPolicy cmdlet.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADUserResultantPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			<dev:type>
				<maml:name>ADUser</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADUser</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A user object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns a fine grained password policy object that represents the resultant password policy for the user.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUserResultantPasswordPolicy BobKe
</dev:code>
  			<dev:remarks>
 				<maml:para>Name                        : DomainUsersPSO
ComplexityEnabled           : True
LockoutThreshold            : 10
ReversibleEncryptionEnabled : False
LockoutDuration             : 12:00:00
LockoutObservationWindow    : 00:15:00
MinPasswordLength           : 8
Precedence                  : 500
ObjectGUID                  : f8d2653c-9b3b-499e-b272-4c7f4268df4c
ObjectClass                 : msDS-PasswordSettings
PasswordHistoryCount        : 24
MinPasswordAge              : 1.00:00:00
MaxPasswordAge              : 60.00:00:00
AppliesTo                   : {CN=Domain Users,CN=Users,DC=FABRIKAM,DC=COM}
DistinguishedName           : CN=DomainUsersPSO,CN=Password Settings Container,CN=System,DC=FABRIKAM,DC=COM
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the resultant password policy for the user with samAccountName 'BobKe'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144959</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADServiceAccount
		</command:name>
		<maml:description>
			<maml:para>Gets one or more Active Directory service accounts.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADServiceAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADServiceAccount cmdlet gets a service account or performs a search to retrieve multiple service accounts.

The Identity parameter specifies the Active Directory service account to get. You can identify a service account by its distinguished name Members (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also set the parameter to a service account object variable, such as $&lt;localServiceaccountObject&gt; or pass a service account object through the pipeline to the Identity parameter.

To search for and retrieve more than one service accounts, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, see about_ActiveDirectory_Filter. If you have existing LDAP query strings, you can use the LDAPFilter parameter.

This cmdlet gets a default set of service account object properties. To retrieve additional properties use the Properties parameter. For more information about the how to determine the properties for service account objects, see the Properties parameter description. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LDAPFilter</maml:name>
				<maml:description>
					<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LDAPFilter</maml:name>
			<maml:description>
				<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultPageSize</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultSetSize</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.Int32]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchBase</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchScope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSearchScope</command:parameterValue>
			<dev:type>
				<maml:name>ADSearchScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Subtree</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Base</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OneLevel</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Subtree</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A service account object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more service account objects. 

This cmdlet returns a default set of ADService account property values. To retrieve additional ADService account properties, use the Properties parameter. 

To view the properties for an ADService account object, see the following examples. To run these examples, replace &lt;service account&gt; with a service account identifier such as the name of a service account.

To get a list of the default set of properties of an ADService account object, use the following command:
   Get-ADService account &lt;service account&gt;| Get-Member

To get a list of all the properties of an ADService account object, use the following command:
   Get-ADService account &lt;service account&gt; -Properties ALL | Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADServiceAccount -Identity service1 </dev:code>
  			<dev:remarks>
 				<maml:para>Enabled           : True 
Name              : service1 
UserPrincipalName : 
SamAccountName    : service1$ 
ObjectClass       : msDS-ManagedServiceAccount 
SID               : S-1-5-21-159507390-2980359153-3438059098-29770 
ObjectGUID        : eaa435ee-6ebc-44dd-b4b6-dc1bb5bcd23a 
HostComputers     : 
DistinguishedName : CN=service1,CN=Managed Service Accounts,DC=contoso,DC=com </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Retrieve Service-Account with samAccountName 'service1'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADServiceAccount -Identity S-1-5-21-159507390-2980359153-3438059098-29770 </dev:code>
  			<dev:remarks>
 				<maml:para>Enabled           : True 
Name              : service1 
UserPrincipalName : 
SamAccountName    : service1$ 
ObjectClass       : msDS-ManagedServiceAccount 
SID               : S-1-5-21-159507390-2980359153-3438059098-29770 
ObjectGUID        : eaa435ee-6ebc-44dd-b4b6-dc1bb5bcd23a 
HostComputers     : 
DistinguishedName : CN=service1,CN=Managed Service Accounts,DC=contoso,DC=com 
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Retrieve the Service account with SID S-1-5-21-159507390-2980359153-3438059098-29770'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADServiceAccount -Filter {HostComputers -eq &quot;CN=SQL-Server-1, DC=contoso,DC=com&quot; }</dev:code>
  			<dev:remarks>
 				<maml:para>Enabled           : True 
Name              : service1 
UserPrincipalName : 
SamAccountName    : service1$ 
ObjectClass       : msDS-ManagedServiceAccount 
SID               : S-1-5-21-159507390-2980359153-3438059098-29770 
ObjectGUID        : eaa435ee-6ebc-44dd-b4b6-dc1bb5bcd23a 
HostComputers     : {CN=SQL-Server-1, DC=contoso,DC=com} 
DistinguishedName : CN=service1,CN=Managed Service Accounts,DC=contoso,DC=com </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Find the Service Accounts installed on the computer &quot;CN=SQL-Server-1,DC=contoso,DC=com&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144960</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Install-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Uninstall-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADComputerServiceAccount
		</command:name>
		<maml:description>
			<maml:para>Gets the service accounts hosted by a computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADComputerServiceAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADComputerServiceAccount cmdlet gets all of the service accounts that are hosted by the specified computer.

The Computer parameter specifies the Active Directory computer that hosts the service accounts. You can identify a computer by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the Computer parameter to a computer object variable, such as $&lt;localComputerobject&gt;, or pass a computer object through the pipeline to the Computer parameter. For example, you can use the Get-ADComputer cmdlet to retrieve a computer object and then pass the object through the pipeline to the Get-ADComputerServiceAccount cmdlet.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADComputerServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			<dev:type>
				<maml:name>ADComputer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A computer object is received by the Computer parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more objects that represent the service accounts hosted by the specified computer. 
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADComputerServiceAccount -Identity ComputerAcct1
</dev:code>
  			<dev:remarks>
 				<maml:para>Enabled           : True
Name              : SvcAcct1
UserPrincipalName :
SamAccountName    : SvcAcct1$
ObjectClass       : msDS-ManagedServiceAccount
SID               : S-1-5-21-159507390-2980359153-3438059098-1104
ObjectGUID        : 8d759d66-ef68-4360-aff6-ec3bb3425ac1
HostComputers     : {CN=ComputerAcct1,CN=Computers,DC=contoso,DC=com}
DistinguishedName : CN=SvcAcct1,CN=Managed Service Accounts,DC=contoso,DC=com</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the service accounts hosted on a computer account 'ComputerAcct1'</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144961</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADDefaultDomainPasswordPolicy
		</command:name>
		<maml:description>
			<maml:para>Gets the default password policy for an Active Directory domain.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADDefaultDomainPasswordPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADDefaultDomainPasswordPolicy cmdlet gets the default password policy for a domain.

The Identity parameter specifies the Active Directory domain. You can identify a domain by its Distinguished Name (DN), GUID, Security Identifier (SID), DNS domain name, or NETBIOS name. You can also set the parameter to a domain object variable, such as $&lt;localDomainObject&gt; or pass a domain object through the pipeline to the Identity parameter.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADDefaultDomainPasswordPolicy</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Current</maml:name>
				<maml:description>
					<maml:para>Specifies whether to return the domain of the local computer or the current logged on user (CLU). Possible values for this parameter are:
  LocalComputer or 0
  LoggedOnUser  or 1

The following example shows how to set this parameter to return the domain of the current logged on user.
  -Current LoggedOnUser</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >LocalComputer</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >LoggedOnUser</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADDefaultDomainPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDefaultDomainPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Current</maml:name>
			<maml:description>
				<maml:para>Specifies whether to return the domain of the local computer or the current logged on user (CLU). Possible values for this parameter are:
  LocalComputer or 0
  LoggedOnUser  or 1

The following example shows how to set this parameter to return the domain of the current logged on user.
  -Current LoggedOnUser</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADCurrentDomainType</command:parameterValue>
			<dev:type>
				<maml:name>ADCurrentDomainType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>LocalComputer</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>LoggedOnUser</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDefaultDomainPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADDefaultDomainPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDomain</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A domain object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDefaultDomainPasswordPolicy</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the default domain password policy object for the specified domain.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDefaultDomainPasswordPolicy -Current LoggedOnUser</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the default domain password policy from current logged on user domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDefaultDomainPasswordPolicy -Current LocalComputer</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the default domain password policy from current local computer.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDefaultDomainPasswordPolicy -Identity fabrikam.com</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the default domain password policy from a given domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(Get-ADForest -Current LoggedOnUser).Domains | %{ Get-ADDefaultDomainPasswordPolicy -Identity $_ }</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the default domain password policy objects from all the domains in the forest.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDefaultDomainPasswordPolicy</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the default domain password policy from current logged on user domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144962</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADDomain</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADAccountAuthorizationGroup
		</command:name>
		<maml:description>
			<maml:para>Gets the accounts token group information.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADAccountAuthorizationGroup</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADAuthorizationGroup cmdlet gets the security groups from the specified user, computer or service accounts token. This cmdlet requires a global catalog to perform the group search. If the forest that contains the account does not have a global catalog, the cmdlet returns a non-terminating error.

The Identity parameter specifies the user, computer, or service account. You can identify a user, computer, or service account object by its distinguished name (DN), GUID, security identifier (SID), Security Account Manager (SAM) account name or user principal name. You can also set the Identity parameter to an account object variable, such as $&lt;localAccountobject&gt;, or pass an account object through the pipeline to the Identity parameter. For example, you can use the Get-ADUser, Get-ADComputer, Get-ADServiceAccount or Search-ADAccount cmdlets to retrieve an account object and then pass the object through the pipeline to the Get-ADAccountAuthorizationGroup cmdlet. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADAccountAuthorizationGroup</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthtype</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthtype</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An account object that represents the user, computer or service account is received by the Identity parameter. Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns group objects that represent the security groups for the account. 
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADAccountAuthorizationGroup GlenJohn</dev:code>
  			<dev:remarks>
 				<maml:para>
GroupScope        : DomainLocal
objectGUID        : 00000000-0000-0000-0000-000000000000
GroupCategory     : Security
SamAccountName    : Everyone
name              : Everyone
objectClass       :
SID               : S-1-1-0
distinguishedName :

GroupScope        : DomainLocal
objectGUID        : 00000000-0000-0000-0000-000000000000
GroupCategory     : Security
SamAccountName    : Authenticated Users
name              : Authenticated Users
objectClass       :
SID               : S-1-5-11
distinguishedName :

GroupScope        : Global
objectGUID        : 86c0f0d5-8b4d-4f35-a867-85a006b92902
GroupCategory     : Security
SamAccountName    : Domain Users
name              : Domain Users
objectClass       : group
SID               : S-1-5-21-41432690-3719764436-1984117282-513
distinguishedName : CN=Domain Users,CN=Users,DC=Fabrikam,DC=com

GroupScope        : DomainLocal
objectGUID        : 869fb7ad-8cf2-4dd0-ac0f-4bd3bf324669
GroupCategory     : Security
SamAccountName    : Pre-Windows 2000 Compatible Access
name              : Pre-Windows 2000 Compatible Access
objectClass       : group
SID               : S-1-5-32-554
distinguishedName : CN=Pre-Windows 2000 Compatible Access,CN=Builtin,DC=Fabrikam,DC=com

GroupScope        : DomainLocal
objectGUID        : c1e397c5-1e44-4270-94d1-88d6c4b78ee6
GroupCategory     : Security
SamAccountName    : Users
name              : Users
objectClass       : group
SID               : S-1-5-32-545
distinguishedName : CN=Users,CN=Builtin,DC=Fabrikam,DC=com</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all security groups for the specified account with SamAccountName: GlenJohn.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADAccountAuthorizationGroup &quot;cn=GlenJohn,dc=AppNC&quot; -Server &lt;Server&gt;:50000</dev:code>
  			<dev:remarks>
 				<maml:para>distinguishedName : CN=AdminGroup,DC=AppNC
GroupCategory     : Security
GroupScope        : Global
name              : AdminGroup
objectClass       : group
objectGUID        : 4d72873f-fe09-4834-9ada-a905636d10df
SamAccountName    :
SID               : S-1-510474493-936115905-4021890855-1253703389-3958791574-3542197427</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all security groups for the specified account with DistinguishedName: &quot;cn=GlenJohn,dc=AppNC&quot; in the AD LDS instance: &lt;Server&gt;:50000.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144963</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Search-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ADOptionalFeature
		</command:name>
		<maml:description>
			<maml:para>Gets one or more Active Directory optional features.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ADOptionalFeature</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ADOptionalFeature cmdlet gets an optional feature or performs a search to retrieve multiple optional features from an Active Directory. 

The Identity parameter specifies the Active Directory optional feature that you want to get. You can identify an optional feature by its distinguished name (DN), feature GUID, or object GUID. You can also set the parameter to an optional feature object variable, such as $&lt;localOptionalFeatureObject&gt; or you can pass an optional feature object through the pipeline to the Identity parameter.

To search for and retrieve more than one optional feature, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, see about_ActiveDirectory_Filter. If you have existing LDAP query strings, you can use the LDAPFilter parameter. 

This cmdlet retrieves a default set of optional feature object properties. To retrieve additional properties use the Properties parameter. For more information about the how to determine the properties for computer objects, see the Properties parameter description.  </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ADOptionalFeature</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADOptionalFeature</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory optional feature object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  Feature GUID (featureGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Object GUID (objectGUID) 
    Example: 482ab21c-823e-401e-879a-ac7383d64eb9

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an optional feature object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to an optional feature object instance named &quot;optionalFeatureInstance&quot;.
  -Identity $optionalFeatureInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADOptionalFeature</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ADOptionalFeature</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LDAPFilter</maml:name>
				<maml:description>
					<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, see about_ActiveDirectory_Filter. 

Syntax: 
The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.

&lt;filter&gt;  ::= &quot;{&quot; &lt;FilterComponentList&gt; &quot;}&quot;

&lt;FilterComponentList&gt; ::= &lt;FilterComponent&gt; | &lt;FilterComponent&gt; &lt;JoinOperator&gt; &lt;FilterComponent&gt; | &lt;NotOperator&gt;  &lt;FilterComponent&gt;

&lt;FilterComponent&gt; ::= &lt;attr&gt; &lt;FilterOperator&gt; &lt;value&gt; | &quot;(&quot; &lt;FilterComponent&gt; &quot;)&quot;

&lt;FilterOperator&gt; ::= &quot;-eq&quot; | &quot;-le&quot; | &quot;-ge&quot; | &quot;-ne&quot; | &quot;-lt&quot; | &quot;-gt&quot;| &quot;-approx&quot; | &quot;-bor&quot; | &quot;-band&quot; | &quot;-recursivematch&quot; | &quot;-like&quot; | &quot;-notlike&quot;

&lt;JoinOperator&gt; ::= &quot;-and&quot; | &quot;-or&quot;

&lt;NotOperator&gt; ::= &quot;-not&quot;

&lt;attr&gt; ::= &lt;PropertyName&gt; | &lt;LDAPDisplayName of the attribute&gt;

&lt;value&gt;::= &lt;compare this value with an &lt;attr&gt; by using the specified &lt;FilterOperator&gt;&gt;

For a list of supported types for &lt;value&gt;, see about_ActiveDirectory_ObjectModel.

Examples: 
The following examples show how to use this syntax with Active Directory cmdlets.

To get all objects of the type specified by the cmdlet, use the asterisk wildcard:
All user objects:
Get-ADUser -Filter * 
  -or-
All computer objects:
Get-ADComputer -Filter *

To get all user objects that have an e-mail message attribute, use one of the following commands:
Get-ADUser -Filter {EmailAddress -like &quot;*&quot;} 
Get-ADUser -Filter {mail -like &quot;*&quot;} 
  -or-
Get-ADObject -Filter {(mail -like &quot;*&quot;) -and (ObjectClass -eq &quot;user&quot;)}

Note: PowerShell wildcards other than &quot;*&quot;, such as &quot;?&quot; are not supported by the Filter syntax.

To get all users objects that have surname of Smith and that have an e-mail attribute, use one of the following commands: 
Get-ADUser -filter {(EmailAddress -like &quot;*&quot;) -and (Surname  -eq &quot;smith&quot;)} 
  -or-
Get-ADUser -filter {(mail -eq &quot;*&quot;) -and (sn -eq &quot;Smith&quot;)} 

To get all user objects who have not logged on since January 1, 2007, use the following commands:
$logonDate = New-Object System.DateTime(2007, 1, 1)
Get-ADUser  -filter { lastLogon -le $logonDate  } 

To get all groups that have a group category of Security and a group scope of Global, use one of the following commands:
Get-ADGroup  -filter {GroupCategory  -eq &quot;Security&quot;  -and GroupScope -eq &quot;Global&quot;}
  -or-
Get-ADGroup -filter {GroupType -band 0x80000000}

Note: To query using LDAP query strings, use the LDAPFilter parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory optional feature object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  Feature GUID (featureGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Object GUID (objectGUID) 
    Example: 482ab21c-823e-401e-879a-ac7383d64eb9

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an optional feature object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to an optional feature object instance named &quot;optionalFeatureInstance&quot;.
  -Identity $optionalFeatureInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOptionalFeature</command:parameterValue>
			<dev:type>
				<maml:name>ADOptionalFeature</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LDAPFilter</maml:name>
			<maml:description>
				<maml:para>Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description and the about_ActiveDirectory_Filter.

The following example shows how to set this parameter to search for all objects in the organizational unit specified by the SearchBase parameter with a name beginning with &quot;sara&quot;.

 -LDAPFilter &quot;(name=sara*)&quot;  -SearchScope Subtree -SearchBase &quot;DC=NA,DC=fabrikam,DC=com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.

Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).

To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. 

To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet. The following examples show how to retrieve properties for a group where the Administrator's group is used as the sample group object.

  Get-ADGroup -Identity Administrators | Get-Member

To retrieve and display the list of all the properties for an ADGroup object, use the following command:
  Get-ADGroup -Identity Administrators -Properties *| Get-Member

The following examples show how to use the Properties parameter to retrieve individual properties as well as the default, extended or complete set of properties. 

To retrieve the extended properties &quot;OfficePhone&quot; and &quot;Organization&quot; and the default properties of an ADUser object named &quot;SaraDavis&quot;, use the following command:
  GetADUser -Identity SaraDavis  -Properties OfficePhone,Organization

To retrieve the properties with LDAP display names of &quot;otherTelephone&quot; and &quot;otherMobile&quot;, in addition to the default properties for the same user, use the following command:
   GetADUser -Identity SaraDavis  -Properties otherTelephone, otherMobile |Get-Member </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultPageSize</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultSetSize</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.Int32]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.Int32]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchBase</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchScope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSearchScope</command:parameterValue>
			<dev:type>
				<maml:name>ADSearchScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Base</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OneLevel</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Subtree</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADOptionalFeature</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An optional feature object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADOptionalFeature</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more optional feature objects. 

This cmdlet returns a default set of ADOptionalFeature property values. To retrieve additional ADOptionalFeature properties, use the Properties parameter. 

To view the properties for an ADOptionalFeature object, see the following examples. To run these examples, replace &lt;optional feature&gt; with an optional feature identifier, such as distinguished name of the optional feature.

To get a list of the default set of properties of an ADOptionalFeature object, use the following command:
   Get-ADOptionalFeature &lt;optional feature&gt;| Get-Member

To get a list of all the properties of an ADOptionalFeature object, use the following command:
   Get-ADOptionalFeature &lt;optional feature&gt; -Properties ALL | Get-Member
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADOptionalFeature -Filter *</dev:code>
  			<dev:remarks>
  			        <maml:para>Get a list of all the available optional features in the current forest.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADOptionalFeature 'Recycle Bin Feature'</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the optional feature with the name 'Recycle Bin Feature'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADOptionalFeature 766ddcd8-acd0-445e-f3b9-a7f9b6744f2a</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the optional feature with the feature guid '766ddcd8-acd0-445e-f3b9-a7f9b6744f2a'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADOptionalFeature 'Recycle Bin Feature' -server server1:50000</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the 'Recycle Bin Feature' optional feature in an AD LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144964</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-ADOptionalFeature</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-ADOptionalFeature</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Install-ADServiceAccount
		</command:name>
		<maml:description>
			<maml:para>Installs an Active Directory service account on a computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Install</command:verb>
		<command:noun>ADServiceAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Install-ADServiceAccount cmdlet installs an existing Active Directory service account on the computer on which the cmdlet is run. This cmdlet verifies that the computer is eligible to host the service account. The cmdlet also makes the required changes locally so that the service account password can be periodically reset by the computer without requiring any user action.

The Identity parameter specifies the Active Directory service account to install. You can identify a service account by its distinguished name Members (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the parameter to a service account object variable, such as $&lt;localServiceaccountObject&gt; or pass a service account object through the pipeline to the Identity parameter. For example, you can use Get-ADServiceAccount to get a service account object and then pass the object through the pipeline to the Install-ADServiceAccount.

The AccountPassword parameter allows you to pass a SecureString that contains the password of the managed service account. Alternatively, you can use the PromptForPassword parameter to be prompted for the managed service account password. The specified password should match the provisioned password of the managed service account. Passing in the password is required when you are installing a managed service account on a server located on a segmented network  or site (such as a perimeter network or DMZ) with access to a read-only domain controller (RODC) but no access to writable DCs. In this case, you should create the managed service account, link it with the appropriate computer account and assign a well-known password that needs to be passed when installing the managed service account on the server on the RODC-only site. If you pass both AccountPassword and PromptForPassword parameters, the AccountPassword parameter takes precedence.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Install-ADServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			  <maml:name>AccountPassword</maml:name>
			  <maml:description>
			    <maml:para>The AccountPassword parameter allows you to pass a SecureString value type that contains the password of a Managed Service Account that you have provisioned. This is required when you are installing a managed service account on a server located on a segmented network  or site (such as a perimeter network or DMZ) with access to a read-only domain controller (RODC) but no access to writable DCs. In this case, you should create the managed service account, link it with the appropriate computer account and assign a well-known password that needs to be passed when installing the managed service account on the server on the RODC-only site. If you pass both AccountPassword and PromptForPassword parameters, the AccountPassword parameter takes precedence.</maml:para>
			  </maml:description>
			  <command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			  <maml:name>PromptForPassword</maml:name>
			  <maml:description>
			    <maml:para>The PromptForPassword parameter allows you to enter the password of a managed service account that you have provisioned. This is required when you are installing a managed service account on a server located on a segmented network  or site (such as a perimeter network or DMZ) with access to a read-only domain controller (RODC) but no access to writable DCs. In this case, you should create the managed service account, link it with the appropriate computer account and assign a well-known password that needs to be passed when installing the managed service account on the server on the RODC-only site. If you pass both AccountPassword and PromptForPassword parameters, the AccountPassword parameter takes precedence.</maml:para>
			  </maml:description>
			  <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			  <dev:type>
			    <maml:name>SwitchParameter</maml:name> 
			    <maml:uri /> 
			  </dev:type>
			  <dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
		  <maml:name>AccountPassword</maml:name>
		  <maml:description>
		    <maml:para>The AccountPassword parameter allows you to pass a SecureString value type that contains the password of a Managed Service Account that you have provisioned. This is required when you are installing a managed service account on a server located on a segmented network  or site (such as a perimeter network or DMZ) with access to a read-only domain controller (RODC) but no access to writable DCs. In this case, you should create the managed service account, link it with the appropriate computer account and assign a well-known password that needs to be passed when installing the managed service account on the server on the RODC-only site. If you pass both AccountPassword and PromptForPassword parameters, the AccountPassword parameter takes precedence.</maml:para>
		  </maml:description>
		  <command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
		  <maml:name>PromptForPassword</maml:name>
		  <maml:description>
		    <maml:para>The PromptForPassword parameter allows you to enter the password of a managed service account that you have provisioned. This is required when you are installing a managed service account on a server located on a segmented network  or site (such as a perimeter network or DMZ) with access to a read-only domain controller (RODC) but no access to writable DCs. In this case, you should create the managed service account, link it with the appropriate computer account and assign a well-known password that needs to be passed when installing the managed service account on the server on the RODC-only site. If you pass both AccountPassword and PromptForPassword parameters, the AccountPassword parameter takes precedence.</maml:para>
		  </maml:description>
		  <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
		  <dev:type>
		    <maml:name>SwitchParameter</maml:name> 
		    <maml:uri /> 
		  </dev:type>
		  <dev:defaultValue /> 
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A service account object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Install-ADServiceAccount -Identity 'SQL-HR-svc-01' 
</dev:code>
  			<dev:remarks>
 				<maml:para>Install a Managed Service Account with the name 'SQL-HR-svc-01' on the local computer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = Get-ADServiceAccount -Filter { Name -eq 'SQL-HR-svc-01'} 
Install-ADServiceAccount $a </dev:code>
  			<dev:remarks>
  			        <maml:para>Get a Managed Service Account named 'SQL-HR-svc-01' from the default directory and install it on the local machine.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
			<dev:code>Install-ADServiceAccount -Identity 'SQL-HR-svc-01' -AccountPassword (ConvertTo-SecureString -AsPlainText &quot;p@ssw0rd&quot; -Force)
</dev:code>
			<dev:remarks>
				<maml:para>Install a Managed Service Account with the name 'SQL-HR-svc-01' after verifying the password on the local computer.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
			<dev:code>Install-ADServiceAccount -Identity 'SQL-HR-svc-01' -PromptForPassword
</dev:code>
			<dev:remarks>
				<maml:para>Please enter the current password for 'SQL-HR-svc-01'
Password:******</maml:para>
				<maml:para>Install a Managed Service Account with the name 'SQL-HR-svc-01' (after verifying the entered password) on the local computer.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144965</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Uninstall-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Reset-ADServiceAccountPassword</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Move-ADObject
		</command:name>
		<maml:description>
			<maml:para>Moves an Active Directory object or a container of objects to a different container or domain. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Move</command:verb>
		<command:noun>ADObject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Move-ADObject cmdlet moves an object or a container of objects from one container to another or from one domain to another. 

The Identity parameter specifies the Active Directory object or container to move. You can identify an object or container by its distinguished name (DN) or GUID. You can also set the Identity parameter to an object variable such as $&lt;localObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADObject cmdlet to retrieve an object and then pass the object through the pipeline to the Move-ADObject cmdlet. You can also use the Get-ADGroup, Get-ADUser, Get-ADComputer, Get-ADServiceAccount, Get-ADOrganizationalUnit and Get-ADFineGrainedPasswordPolicy cmdlets to get an object that you can pass through the pipeline to this cmdlet.

The TargetPath parameter must be specified. This parameter identifies the new location for the object or container. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Move-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>TargetPath</maml:name>
				<maml:description>
					<maml:para>Specifies the new location for the object. This location must be the path to a container or organizational unit.

The following example shows how to specify a target path by providing the distinguished name.
  -TargetPath &quot;ou=sales,dc=corp,dc=contoso,dc=com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TargetServer</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory instance to use by providing the following value for a corresponding domain name or directory server. 

Note: A cross domain move requires a FQDN server name.

Domain name values:
  Fully qualified domain name (FQDN)
    Examples: contoso.com

Directory server values:
  Fully qualified directory server name
    Example: server01.europe.contoso.com
  Fully qualified directory server name and port
    Example: server01.europe.contoso.com:3268

The following example shows how to specify a target server by specifying the fully-qualified directory server name.
  -TargetServer &quot;server01.europe.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>TargetPath</maml:name>
			<maml:description>
				<maml:para>Specifies the new location for the object. This location must be the path to a container or organizational unit.

The following example shows how to specify a target path by providing the distinguished name.
  -TargetPath &quot;ou=sales,dc=corp,dc=contoso,dc=com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>TargetServer</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory instance to use by providing the following value for a corresponding domain name or directory server. 

Note: A cross domain move requires a FQDN server name.

Domain name values:
  Fully qualified domain name (FQDN)
    Examples: contoso.com

Directory server values:
  Fully qualified directory server name
    Example: server01.europe.contoso.com
  Fully qualified directory server name and port
    Example: server01.europe.contoso.com:3268

The following example shows how to specify a target server by specifying the fully-qualified directory server name.
  -TargetServer &quot;server01.europe.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.AObject</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An Active Directory object is received by the Identity parameter. Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADOrganizationalUnit
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-ADObject -Identity &quot;OU=ManagedGroups,DC=Fabrikam,DC=Com&quot; -TargetPath &quot;OU=Managed,DC=Fabrikam,DC=Com&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Moves the Organizational Unit 'ManagedGroups' to a new location. The OU 'ManagedGroups' must NOT be protected from accidental deletion for the successful move.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-ADObject &quot;8d0bcc44-c826-4dd8-af5c-2c69960fbd47&quot; -TargetPath &quot;OU=Managed,DC=Fabrikam,DC=Com&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Moves the object identified by the specified GUID to the new location.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-ADObject &quot;8d0bcc44-c826-4dd8-af5c-2c69960fbd47&quot; -TargetPath &quot;1c2ea8a8-c2b7-4a87-8190-0e8a166aee16&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Moves an object to a new location. Both the object and the target path are specified using GUIDs.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-ADObject -Identity &quot;CN=Peter Bankov,OU=Accounting,DC=Fabrikam,DC=com&quot; -TargetPath &quot;OU=Accounting,DC=Europe,DC=Fabrikam,DC=com&quot; -TargetServer &quot;server01.europe.fabrikam.com&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Moves an object with DistinguishedName 'CN=Peter Bankov,OU=Accounting,DC=Fabrikam,DC=com' to a different domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-ADObject -Identity &quot;CN=AccountLeads,DC=AppNC&quot; -TargetPath &quot;OU=AccountDeptOU,DC=AppNC&quot; -server &quot;FABRIKAM-SRV1:60000&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Moves an object to a new location within an LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144966</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restore-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Move-ADDirectoryServer
		</command:name>
		<maml:description>
			<maml:para>Moves a directory server in Active Directory to a new site. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Move</command:verb>
		<command:noun>ADDirectoryServer</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Move-ADDirectoryServer cmdlet moves a directory server in Active Directory to a new site within the same domain.

The Identity parameter specifies the directory server to move. You can specify a directory server object by one of the following values:
  Name of the server object (name) 
  Distinguished Name (DN) of the NTDS Settings object
  Distinguished Name (DN) of the server object that represents the directory server
  GUID (objectGUID) of server object under the configuration partition
  GUID (objectGUID) of NTDS settings object under the configuration partition

You can also set the Identity parameter to a directory server object variable such as $&lt;localDirectoryServerObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADDomainController to get a directory server object and then pass that object through the pipeline to the Move-ADDirectoryServer cmdlet.

The Site parameter specifies the new site for the directory server. You can identify a site by its distinguished name (DN) or GUID.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Move-ADDirectoryServer</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory server object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

Name of the server object (name) 
  For AD LDS instances the syntax is of a name is &lt;computer-name&gt;$&lt;instance-name&gt;
    Example: asia-w7-vm4$instance1
    Note: When you type this value in Windows PowerShell, you must use the backtick (`) as an escape character for the dollar sign ($). Therefore, for the previous example you would type the following: asia-w7-vm4`$instance1
  For other Active Directory instances, use the value of the name property
    Example: corp-DC01

Distinguished Name of the NTDS Settings object
  Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-BC,CN=Sites,CN=Configuration,DC=corp,DC=contoso

Distinguished Name of the server object that represents the directory server
  Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com

GUID (objectGUID) of server object under the configuration partition
  Example: 599c3d2e-f72d-4d20-8a88-030d99495f20

GUID (objectGUID) of NTDS settings object under the configuration partition
  Example: 768c44de-f72d-66e0-8a88-0523ca495f20

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a directory server object instance named &quot;directoryServerInstance&quot;.
  -Identity   $directoryServerInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDirectoryServer</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Site</maml:name>
				<maml:description>
					<maml:para>Specifies the new site for the directory server. You can identify the site by one of the following property values. Note: The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished name (DN)
    Example: CN= NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID (ObjectGUID)
   Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Name (name)
    Example: NA-CAN-QBC 

The following example shows how use this parameter to specify a site object by using the site name.
  -Site  &quot;NA-CAN-QBC&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADSite</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthtype</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthtype</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory server object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

Name of the server object (name) 
  For AD LDS instances the syntax is of a name is &lt;computer-name&gt;$&lt;instance-name&gt;
    Example: asia-w7-vm4$instance1
    Note: When you type this value in Windows PowerShell, you must use the backtick (`) as an escape character for the dollar sign ($). Therefore, for the previous example you would type the following: asia-w7-vm4`$instance1
  For other Active Directory instances, use the value of the name property
    Example: corp-DC01

Distinguished Name of the NTDS Settings object
  Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-BC,CN=Sites,CN=Configuration,DC=corp,DC=contoso

Distinguished Name of the server object that represents the directory server
  Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com

GUID (objectGUID) of server object under the configuration partition
  Example: 599c3d2e-f72d-4d20-8a88-030d99495f20

GUID (objectGUID) of NTDS settings object under the configuration partition
  Example: 768c44de-f72d-66e0-8a88-0523ca495f20

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a directory server object instance named &quot;directoryServerInstance&quot;.
  -Identity   $directoryServerInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDirectoryServer</command:parameterValue>
			<dev:type>
				<maml:name>ADDirectoryServer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Site</maml:name>
			<maml:description>
				<maml:para>Specifies the new site for the directory server. You can identify the site by one of the following property values. Note: The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished name (DN)
    Example: CN= NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID (ObjectGUID)
   Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Name (name)
    Example: NA-CAN-QBC 

The following example shows how use this parameter to specify a site object by using the site name.
  -Site  &quot;NA-CAN-QBC&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSite</command:parameterValue>
			<dev:type>
				<maml:name>ADSite</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADDirectoryServer</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A directory server object is received b y the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-ADDirectoryServer -Identity &quot;FABRIKAM-DC2&quot; -Site &quot;Branch-Office-Site&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Move the domain controller &quot;FABRIKAM-DC2&quot; to the site &quot;Branch-Office-Site&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomainController -Filter {IsReadOnly -eq $true} | Move-ADDirectoryServer -site &quot;RODC-Site-Name&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Move all Read Only Domain Controllers to the site &quot;RODC-Site-Name&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144967</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ADDirectoryServerOperationMasterRole</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Move-ADDirectoryServerOperationMasterRole
		</command:name>
		<maml:description>
			<maml:para>Moves operation master roles to an Active Directory directory server. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Move</command:verb>
		<command:noun>ADDirectoryServerOperationMasterRole</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Move-ADDirectoryServerOperationMasterRole cmdlet moves one or more operation master roles to a directory server. You can move operation master roles to a directory server in a different domain if the credentials are the same in both domains. 

The Identity parameter specifies the directory server that receives the roles. You can specify a directory server object by one of the following values:
  Name of the server object (name) 
  Distinguished Name (DN) of the NTDS Settings object
  Distinguished Name (DN) of the server object that represents the directory server
  GUID (objectGUID) of server object under the configuration partition
  GUID (objectGUID) of NTDS settings object under the configuration partition

For AD LDS instances the syntax for the server object name is &lt;computer-name&gt;$&lt;instance-name&gt;. The following is an example of this syntax: 
  asia-w7-vm4$instance1
When you type this value in Windows PowerShell, you must use the backtick (`) as an escape character for the dollar sign ($). Therefore, for this example, you would type the following: 
  asia-w7-vm4`$instance1

You can also set the parameter to a directory server object variable, such as $&lt;localDirectoryServerObject&gt;.

The OperationMasterRole parameter specifies the operation master roles to move. Operation roles include PDCEmulator, RIDMaster, InfrastructureMaster, SchemaMaster, or DomainNamingMaster. To specify more than one role, use a comma-separated list.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Move-ADDirectoryServerOperationMasterRole</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory server object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

Name of the server object (name) 
  For AD LDS instances the syntax is of a name is &lt;computer-name&gt;$&lt;instance-name&gt;
    Example: asia-w7-vm4$instance1
    Note: When you type this value in Windows PowerShell, you must use the backtick (`) as an escape character for the dollar sign ($). Therefore, for the previous example you would type the following: asia-w7-vm4`$instance1
  For other Active Directory instances, use the value of the name property
    Example: corp-DC01

Distinguished Name of the NTDS Settings object
  Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-BC,CN=Sites,CN=Configuration,DC=corp,DC=contoso

Distinguished Name of the server object that represents the directory server
  Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com

GUID (objectGUID) of server object under the configuration partition
  Example: 599c3d2e-f72d-4d20-8a88-030d99495f20

GUID (objectGUID) of NTDS settings object under the configuration partition
  Example: 768c44de-f72d-66e0-8a88-0523ca495f20

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a directory server object instance named &quot;directoryServerInstance&quot;.
  -Identity   $directoryServerInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDirectoryServer</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>OperationMasterRole</maml:name>
				<maml:description>
					<maml:para>Specifies one or more operation master roles to move to the specified directory server in Active Directory Domain Services. Possible values for this parameter include: 
  PDCEmulator or 0
  RIDMaster or 1
  InfrastructureMaster or 2
  SchemaMaster or 3
  DomainNamingMaster or 4

To specify multiple operation master roles, use a comma-separated list.

The following example shows how to specify this parameter so that the SchemaMaster and DomainNamingMaster roles are moved.
   -OperationMasterRole SchemaMaster, 4</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADOperationMasterRole[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthtype</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthtype</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory server object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

Name of the server object (name) 
  For AD LDS instances the syntax is of a name is &lt;computer-name&gt;$&lt;instance-name&gt;
    Example: asia-w7-vm4$instance1
    Note: When you type this value in Windows PowerShell, you must use the backtick (`) as an escape character for the dollar sign ($). Therefore, for the previous example you would type the following: asia-w7-vm4`$instance1
  For other Active Directory instances, use the value of the name property
    Example: corp-DC01

Distinguished Name of the NTDS Settings object
  Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-BC,CN=Sites,CN=Configuration,DC=corp,DC=contoso

Distinguished Name of the server object that represents the directory server
  Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com

GUID (objectGUID) of server object under the configuration partition
  Example: 599c3d2e-f72d-4d20-8a88-030d99495f20

GUID (objectGUID) of NTDS settings object under the configuration partition
  Example: 768c44de-f72d-66e0-8a88-0523ca495f20

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a directory server object instance named &quot;directoryServerInstance&quot;.
  -Identity   $directoryServerInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDirectoryServer</command:parameterValue>
			<dev:type>
				<maml:name>ADDirectoryServer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>OperationMasterRole</maml:name>
			<maml:description>
				<maml:para>Specifies one or more operation master roles to move to the specified directory server in Active Directory Domain Services. Possible values for this parameter include: 
  PDCEmulator or 0
  RIDMaster or 1
  InfrastructureMaster or 2
  SchemaMaster or 3
  DomainNamingMaster or 4

To specify multiple operation master roles, use a comma-separated list.

The following example shows how to specify this parameter so that the SchemaMaster and DomainNamingMaster roles are moved.
   -OperationMasterRole SchemaMaster, 4</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADOperationMasterRole[]</command:parameterValue>
			<dev:type>
				<maml:name>ADOperationMasterRole[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>See notes</dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDirectoryServer</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A directory server object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADDirectoryServer</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified directory server object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-ADDirectoryServerOperationMasterRole &quot;FABRIKAM-DC1&quot; PDCEmulator</dev:code>
  			<dev:remarks>
  			        <maml:para>Move the PDC Emulator role to the Domain Controller &quot;FABRIKAM-DC1&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-ADDirectoryServerOperationMasterRole -Identity &quot;FABRIKAM-DC2&quot; -OperationMasterRole PDCEmulator,SchemaMaster</dev:code>
  			<dev:remarks>
  			        <maml:para>Move the PDC Emulator and Schema Master roles to the Domain Controller &quot;FABRIKAM-DC2&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-ADDirectoryServerOperationMasterRole Fabrikam-DC`$instance1 -OperationMasterRole schemaMaster -server Fabrikam-DC:50000</dev:code>
  			<dev:remarks>
  			        <maml:para>Move the schema master FSMO owner to the AD LDS instance &quot;instance1' on the server &quot;Fabrikam-DC&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144968</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ADDirectoryServer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-ADObject
		</command:name>
		<maml:description>
			<maml:para>Creates an Active Directory object. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>ADObject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The New-ADObject cmdlet creates a new Active Directory object such as a new organizational unit or new user account. You can use this cmdlet to create any type of Active Directory object. Many object properties are defined by setting cmdlet parameters. Properties that are not set by cmdlet parameters can be set by using the OtherAttributes parameter. 
You must set the Name and Type parameters to create a new Active Directory object. The Name specifies the name of the new object. The Type parameter specifies the LDAP display name of the Active Directory Schema Class that represents the type of object you want to create. Examples of Type values include computer, group, organizational unit, and user.
The Path parameter specifies the container where the object will be created.. When you do not specify the Path parameter, the cmdlet creates an object in the default naming context container for Active Directory objects in the domain.

The following methods explain different ways to create an object by using this cmdlet.
Method 1: Use the New-ADObject cmdlet, specify the required parameters, and set any additional property values by using the cmdlet parameters.
Method 2: Use a template to create the new object. To do this, create a new Active Directory object or retrieve a copy of an existing Active Directory object and set the Instance parameter to this object. The object provided to the Instance parameter is used as a template for the new object. You can override property values from the template by setting cmdlet parameters. For examples and more information, see the Instance parameter description for this cmdlet. For information about Active Directory cmdlets use the Instance parameter, see about_ActiveDirectory_Instance.
Method 3: Use the Import-CSV cmdlet with the Add-ADObject cmdlet to create multiple Active Directory Active Directory objects. To do this, use the Import-CSV cmdlet to create the custom objects from a comma-separated value (CSV) file that contains a list of object properties. Then pass these objects through the pipeline to the New-ADObject cmdlet to create the Active Directory objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>Type</maml:name>
				<maml:description>
					<maml:para>Specifies the type of object to create. Set the Type parameter to the LDAP display name of the Active Directory Schema Class that represents the type of object that you want to create. Examples of type values include user, computer, and group.

The following example shows how to use this parameter to create a new Active Directory group object.
  -Type &quot;group&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies an instance of an Active Directory object to use as a template for a new Active Directory object.

You can use an instance of an existing Active Directory object as a template or you can construct a new Active Directory object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create a new Active Directory object.

Method 1: Use an existing Active Directory object as a template for a new object. To retrieve an instance of an existing Active Directory object, use a cmdlet such as Get-ADObject. Then provide this object to the Instance parameter of the New-ADObject cmdlet to create a new Active Directory object. You can override property values of the new object by setting the appropriate parameters. 

  $objectInstance = Get-ADObject -Identity saraDavisDesktop 
  New-ADObject -Name &quot;ellenAdamsDesktop&quot;  -Instance $ObjectInstance -Type &quot;computer&quot;

Method 2: Create a new ADObject and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADObject cmdlet to create the new Active Directory object. 

$objectInstance = new-object Microsoft.ActiveDirectory.Management.ADObject $objectInstance.Description = &quot;Ellen Adams New Computer&quot; New-ADObject -Name ellenAdamsDesktop  -Instance $ObjectInstance -Type computer

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OtherAttributes</maml:name>
				<maml:description>
					<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ProtectedFromAccidentalDeletion</maml:name>
				<maml:description>
					<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies an instance of an Active Directory object to use as a template for a new Active Directory object.

You can use an instance of an existing Active Directory object as a template or you can construct a new Active Directory object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create a new Active Directory object.

Method 1: Use an existing Active Directory object as a template for a new object. To retrieve an instance of an existing Active Directory object, use a cmdlet such as Get-ADObject. Then provide this object to the Instance parameter of the New-ADObject cmdlet to create a new Active Directory object. You can override property values of the new object by setting the appropriate parameters. 

  $objectInstance = Get-ADObject -Identity saraDavisDesktop 
  New-ADObject -Name &quot;ellenAdamsDesktop&quot;  -Instance $ObjectInstance -Type &quot;computer&quot;

Method 2: Create a new ADObject and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADObject cmdlet to create the new Active Directory object. 

$objectInstance = new-object Microsoft.ActiveDirectory.Management.ADObject $objectInstance.Description = &quot;Ellen Adams New Computer&quot; New-ADObject -Name ellenAdamsDesktop  -Instance $ObjectInstance -Type computer

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OtherAttributes</maml:name>
			<maml:description>
				<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ProtectedFromAccidentalDeletion</maml:name>
			<maml:description>
				<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
			<maml:name>Type</maml:name>
			<maml:description>
				<maml:para>Specifies the type of object to create. Set the Type parameter to the LDAP display name of the Active Directory Schema Class that represents the type of object that you want to create. Examples of type values include user, computer, and group.

The following example shows how to use this parameter to create a new Active Directory group object.
  -Type &quot;group&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADObject</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An Active Directory object that is a template for the new object is received by the Instance parameter.

Derived types such as the following are also accepted:
  -Microsoft.ActiveDirectory.Management.ADPartition
  -Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  -Microsoft.ActiveDirectory.Management.ADGroup
  -Microsoft.ActiveDirectory.Management.ADUser
  -Microsoft.ActiveDirectory.Management.ADComputer
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the new Active Directory object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADObject -Name '192.168.1.0/26' -Type subnet -Description '192.168.1.0/255.255.255.192' -OtherAttributes @{location=&quot;Building A&quot;;siteObject=&quot;CN=HQ,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM&quot;} -Path &quot;CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates a subnet object in the HQ site with the described attributes.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$subnetTemplate = get-adobject -Identity &quot;CN=192.168.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=Fabrikam,DC=com&quot; -properties description,location; new-adobject -instance $subnetTemplate -name &quot;192.168.1.0/28&quot; -type subnet -path &quot;CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates a new subnet object, using a different subnet object as a template</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADObject -name SaraDavisContact -type contact -ProtectedFromAccidentalDeletion $true -OtherAttributes @{'msDS-SourceObjectDN'=&quot;CN=FabrikamContacts,DC=CONTOSO,DC=COM&quot;}</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates a new contact object, sets the msDS-SourceObjectDN property and protects the object from accidental deletion</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-adobject -name Apps -type container -path &quot;DC=AppNC&quot; -server &quot;FABRIKAM-SRV1:60000&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates a new container object named 'Apps' in an LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144969</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restore-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-ADUser
		</command:name>
		<maml:description>
			<maml:para>Creates a new Active Directory user.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>ADUser</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The New-ADUser cmdlet creates a new Active Directory user. You can set commonly used user property values by using the cmdlet parameters. 

Property values that are not associated with cmdlet parameters can be set by using the OtherAttributes parameter.  When using this parameter be sure to place single quotes around the attribute name as in the following example.

New-ADUser -SamAccountName &quot;glenjohn&quot;  -GivenName &quot;Glen&quot; -Surname &quot;John&quot; -DisplayName &quot;Glen John&quot; -Path 'CN=Users,DC=fabrikam,DC=local' -OtherAttributes @{'msDS-PhoneticDisplayName'=&quot;GlenJohn&quot;}

You must specify the SAMAccountName parameter to create a user. 

You can use the New-ADUser cmdlet to create different types of user accounts such as iNetOrgPerson accounts. To do this in AD DS, set the Type parameter to the LDAP display name for the type of account you want to create. This type can be any class in the Active Directory schema that is a subclass of user and that has an object category of person.

The Path parameter specifies the container or organizational unit (OU) for the new user. When you do not specify the Path parameter, the cmdlet creates a user object in the default container for user objects in the domain.

The following methods explain different ways to create an object by using this cmdlet.

Method 1: Use the New-ADUser cmdlet, specify the required parameters, and set any additional property values by using the cmdlet parameters.

Method 2: Use a template to create the new object. To do this, create a new user object or retrieve a copy of an existing user object and set the Instance parameter to this object. The object provided to the Instance parameter is used as a template for the new object. You can override property values from the template by setting cmdlet parameters. For examples and more information, see the Instance parameter description for this cmdlet. 

Method 3: Use the Import-CSV cmdlet with the New-ADUser cmdlet to create multiple Active Directory user objects. To do this, use the Import-CSV cmdlet to create the custom objects from a comma-separated value (CSV) file that contains a list of object properties. Then pass these objects through the pipeline to the New-ADUser cmdlet to create the user objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-ADUser</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AccountExpirationDate</maml:name>
				<maml:description>
					<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AccountNotDelegated</maml:name>
				<maml:description>
					<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AccountPassword</maml:name>
				<maml:description>
					<maml:para>Specifies a new password value for an account. This value is stored as an encrypted string.

The following conditions apply based on the manner in which the password parameter is used:

$null password is specified - No password is set and the account is disabled unless it is requested to be enabled 
No password is specified - No password is set and the account is disabled unless it is requested to be enabled 
User password is specified - Password is set and the account is disabled unless it is requested to be enabled   
Notes: 
User accounts, by default, are created without a password. If you provide a password, an attempt will be made to set that password however, this can fail due to password policy restrictions. The user account will still be created and you may use Set-ADAccountPassword to set the password on that account. In order to ensure that accounts remain secure, user accounts will never be enabled unless a valid password is set or PasswordNotRequired is set to true.  
The account is created if the password fails for any reason.

The following example shows one method to set this parameter. This command will prompt you to enter the password.
  -AccountPassword (Read-Host -AsSecureString &quot;AccountPassword&quot;)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AllowReversiblePasswordEncryption</maml:name>
				<maml:description>
					<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>CannotChangePassword</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the account password can be changed.
  -CannotChangePassword $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Certificates</maml:name>
				<maml:description>
					<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">X509Certificate[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ChangePasswordAtLogon</maml:name>
				<maml:description>
					<maml:para>Specifies whether a password must be changed during the next logon attempt. Possible values for this parameter include:
  $false or 0
  $true or 1

This parameter cannot be set to $true or 1 for an account that also has the PasswordNeverExpires property set to true.

The following example shows how to set this parameter so that the password must be changed at logon.
  -ChangePasswordAtLogon $true </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>City</maml:name>
				<maml:description>
					<maml:para>Specifies the user's town or city. This parameter sets the City property of a user. The LDAP display name (ldapDisplayName) of this property is &quot;l&quot;.

The following example shows how set this parameter.
  -City &quot;Las Vegas&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Company</maml:name>
				<maml:description>
					<maml:para>Specifies the user's company. This parameter sets the Company property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;company&quot;. 

The following example shows how to set this parameter.
  -Company &quot;Contoso&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Country</maml:name>
				<maml:description>
					<maml:para>Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;c&quot;. This value is not used by Windows 2000.

The following example shows how set this parameter.
  -Country &quot;IN&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Department</maml:name>
				<maml:description>
					<maml:para>Specifies the user's department. This parameter sets the Department property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;department&quot;. 

The following example shows how to set this parameter.
  -Department &quot;Development&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Division</maml:name>
				<maml:description>
					<maml:para>Specifies the user's division. This parameter sets the Division property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;division&quot;. 

The following example shows how to set this parameter.
  -Division &quot;Software&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>EmailAddress</maml:name>
				<maml:description>
					<maml:para>Specifies the user's e-mail address. This parameter sets the EmailAddress property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;mail&quot;. 

The following example shows how to set this parameter.
  -EmailAddress &quot;saradavis@contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>EmployeeID</maml:name>
				<maml:description>
					<maml:para>Specifies the user's employee ID. This parameter sets the EmployeeID property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;employeeID&quot;. 

The following example shows how to set this parameter.
  -EmployeeID  &quot;A123456&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>EmployeeNumber</maml:name>
				<maml:description>
					<maml:para>Specifies the user's employee number. This parameter sets the EmployeeNumber property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;employeeNumber&quot;. 

The following example shows how set this parameter.
  -EmployeeNumber &quot;12345678&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Enabled</maml:name>
				<maml:description>
					<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Fax</maml:name>
				<maml:description>
					<maml:para>Specifies the user's fax phone number. This parameter sets the Fax property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;facsimileTelephoneNumber&quot;. 

The following example shows how to set this parameter.
  -Fax  &quot;+1 (999) 555 1212&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>GivenName</maml:name>
				<maml:description>
					<maml:para>Specifies the user's given name. This parameter sets the GivenName property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;givenName&quot;.

The following example shows how to set this parameter.
  -givenName &quot;Sanjay&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>HomeDirectory</maml:name>
				<maml:description>
					<maml:para>Specifies a user's home directory. This parameter sets the HomeDirectory property of a user object. The LDAP Display Name (ldapDisplayName) for this property is &quot;homeDirectory&quot;.

The following example shows how to set this parameter.
   -HomeDirectory &quot;\\users\saraDavisHomeDir&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>HomeDrive</maml:name>
				<maml:description>
					<maml:para>Specifies a drive that is associated with the UNC path defined by the HomeDirectory property. The drive letter is specified as &quot;&lt;DriveLetter&gt;:&quot; where &lt;DriveLetter&gt; indicates the letter of the drive to associate. The &lt;DriveLetter&gt; must be a single, uppercase letter and the colon is required. This parameter sets the HomeDrive property of the user object. The LDAP Display Name (ldapDisplayName) for this property is &quot;homeDrive&quot;. 

The following example shows how to set this parameter.
   -HomeDrive &quot;D:&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>HomePage</maml:name>
				<maml:description>
					<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>HomePhone</maml:name>
				<maml:description>
					<maml:para>Specifies the user's home telephone number. This parameter sets the HomePhone property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;homePhone&quot;.

The following example shows how to set this parameter.
  -HomePhone  &quot;+1 (999) 555 1212&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Initials</maml:name>
				<maml:description>
					<maml:para>Specifies the initials that represent part of a user's name. You can use this value for the user's middle initial. This parameter sets the Initials property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;initials&quot;.

The following example shows how set this parameter.
  -Initials &quot;L&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies an instance of a user object to use as a template for a new user object.

You can use an instance of an existing user object as a template or you can construct a new user object for template use.  You can construct a new user object using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create user object templates.

Method 1: Use an existing user object as a template for a new object. To retrieve an instance of an existing user object, use a cmdlet such as Get-ADUser. Then provide this object to the Instance parameter of the New-ADUser cmdlet to create a new user object. You can override property values of the new object by setting the appropriate parameters. 

  $userInstance = Get-ADUser -Identity &quot;saraDavis&quot; 
  New-ADUser -SAMAccountName &quot;ellenAdams&quot;  -Instance $userInstance -DisplayName &quot;EllenAdams&quot;

Method 2: Create a new ADUser object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADUser cmdlet to create the new Active Directory user object. 

  $userInstance = new-object Microsoft.ActiveDirectory.Management.ADUser
  $userInstance.DisplayName = &quot;Ellen Adams&quot;
  New-ADUser -SAMAccountName &quot;ellenAdams&quot;  -Instance $userInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>LogonWorkstations</maml:name>
				<maml:description>
					<maml:para>Specifies the computers that the user can access. To specify more than one computer, create a single comma-separated list. You can identify a computer by using the Security Accounts Manager (SAM) account name (sAMAccountName) or the DNS host name of the computer. The SAM account name is the same as the NetBIOS name of the computer.

The LDAP display name (ldapDisplayName) for this property is &quot;userWorkStations&quot;. 

The following example shows how to set this parameter by using SAMAccountName (NetBIOS name) and DNSHostName values.
  -LogonWorkstations &quot;saraDavisDesktop,saraDavisLapTop,projectA.corp.contoso.com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Manager</maml:name>
				<maml:description>
					<maml:para>Specifies the user's manager. This parameter sets the Manager property of a user. This parameter is set by providing one of the following property values.  Note: The identifier in parentheses is the LDAP display name for the property.

  Distinguished Name 
    Example: CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The LDAP Display Name (ldapDisplayName) of this property is &quot;manager&quot;.

The following example shows how to set this parameter.
  -Manager saradavis </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>MobilePhone</maml:name>
				<maml:description>
					<maml:para>Specifies the user's mobile phone number. This parameter sets the MobilePhone property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;mobile&quot;.

The following example shows how to set this parameter.
  -MobilePhone  &quot;+1  (999 ) 555 1212&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Office</maml:name>
				<maml:description>
					<maml:para>Specifies the location of the user's office or place of business. This parameter sets the Office property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;office&quot;.

The following example shows how to set this parameter.
  -Office  &quot;D1042&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>OfficePhone</maml:name>
				<maml:description>
					<maml:para>Specifies the user's office telephone number. This parameter sets the OfficePhone property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;telephoneNumber&quot;.

The following example shows how to set this parameter.
  -OfficePhone  &quot;+1 (999) 555 1212&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Organization</maml:name>
				<maml:description>
					<maml:para>Specifies the user's organization. This parameter sets the Organization property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;o&quot;.

The following example shows how to set this parameter.
  -Organization &quot;Accounting&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OtherAttributes</maml:name>
				<maml:description>
					<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>OtherName</maml:name>
				<maml:description>
					<maml:para>Specifies a name in addition to a user's given name and surname, such as the user's middle name. This parameter sets the OtherName property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;middleName&quot;.

The following example shows how to set this parameter.
  -OtherName  &quot;Peter&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>PasswordNeverExpires</maml:name>
				<maml:description>
					<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>PasswordNotRequired</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account requires a password. A password is not required for a new account. This parameter sets the PasswordNotRequired property of an account object. 

The following example shows how to set this parameter to true.
  -PasswordNotRequired $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>POBox</maml:name>
				<maml:description>
					<maml:para>Specifies the user's post office box number. This parameter sets the POBox property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;postOfficeBox&quot;.

The following example shows how to set this parameter.
  -POBox  &quot;25662&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>PostalCode</maml:name>
				<maml:description>
					<maml:para>Specifies the user's postal code or zip code. This parameter sets the PostalCode property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;postalCode&quot;.

The following example shows how to set this parameter.
  -PostalCode &quot;28712&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ProfilePath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the user's profile. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ProfilePath property of the user object. The LDAP display name (ldapDisplayName) for this property is &quot;profilePath&quot;.

The following examples show how to set this parameter to a local path and to a UNC path.    -ProfilePath &quot;E:\users\profiles\saraDavis&quot;
   -ProfilePath &quot;\\users\profiles\saraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>SamAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ScriptPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the user's log on script. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ScriptPath property of the user. The LDAP display name (ldapDisplayName) for this property is &quot;scriptPath&quot;. 

The following example shows how to set this parameter.
   -ScriptPath &quot;\\logonScripts\saradavisLogin&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ServicePrincipalNames</maml:name>
				<maml:description>
					<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>SmartcardLogonRequired</maml:name>
				<maml:description>
					<maml:para>Specifies whether a smart card is required to logon. This parameter sets the SmartCardLoginRequired property for a user. This parameter also sets the ADS_UF_SMARTCARD_REQUIRED flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1 

The following example shows how to set this parameter so that a smart card is required to logon to the account.
  -SmartCardLogonRequired $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>State</maml:name>
				<maml:description>
					<maml:para>Specifies the user's or Organizational Unit's state or province. This parameter sets the State property of a User or Organizational Unit object. The LDAP display name (ldapDisplayName) of this property is &quot;st&quot;.

The following example shows how set this parameter.
  -State  &quot;Nevada&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>StreetAddress</maml:name>
				<maml:description>
					<maml:para>Specifies the user's street address. This parameter sets the StreetAddress property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;streetAddress&quot;.

The following example shows how to set this parameter.
  -StreetAddress  &quot;1200 Main Street&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Surname</maml:name>
				<maml:description>
					<maml:para>Specifies the user's last name or surname. This parameter sets the Surname property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;sn&quot;.

The following example shows how to set this parameter.
  -Surname  &quot;Patel&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Title</maml:name>
				<maml:description>
					<maml:para>Specifies the user's title. This parameter sets the Title property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;title&quot;.

The following example shows how to set this parameter.
  -Title  &quot;Manager&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>TrustedForDelegation</maml:name>
				<maml:description>
					<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Type</maml:name>
				<maml:description>
					<maml:para>Specifies the type of object to create. Set the Type parameter to the LDAP display name of the Active Directory Schema Class that represents the type of object that you want to create. The selected type must be a subclass of the User schema class.  If this parameter is not specified it will default to &quot;User&quot;.

The following example shows how to use this parameter to create a new Active Directory InetOrgPerson object.
  -Type &quot;InetOrgPerson&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>UserPrincipalName</maml:name>
				<maml:description>
					<maml:para>Each user account has a user principal name (UPN) in the format &lt;user&gt;@&lt;DNS-domain-name&gt;. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's DN, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AccountExpirationDate</maml:name>
			<maml:description>
				<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.DateTime]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AccountNotDelegated</maml:name>
			<maml:description>
				<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AccountPassword</maml:name>
			<maml:description>
				<maml:para>Specifies a new password value for an account. This value is stored as an encrypted string.

The following conditions apply based on the manner in which the password parameter is used:

$null password is specified - No password is set and the account is disabled unless it is requested to be enabled 
No password is specified - No password is set and the account is disabled unless it is requested to be enabled 
User password is specified - Password is set and the account is disabled unless it is requested to be enabled   
Notes: 
User accounts, by default, are created without a password. If you provide a password, an attempt will be made to set that password however, this can fail due to password policy restrictions. The user account will still be created and you may use Set-ADAccountPassword to set the password on that account. In order to ensure that accounts remain secure, user accounts will never be enabled unless a valid password is set or PasswordNotRequired is set to true.  
The account is created if the password fails for any reason.

The following example shows one method to set this parameter. This command will prompt you to enter the password.
  -AccountPassword (Read-Host -AsSecureString &quot;AccountPassword&quot;)</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			<dev:type>
				<maml:name>SecureString</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AllowReversiblePasswordEncryption</maml:name>
			<maml:description>
				<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>CannotChangePassword</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the account password can be changed.
  -CannotChangePassword $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Certificates</maml:name>
			<maml:description>
				<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">X509Certificate[]</command:parameterValue>
			<dev:type>
				<maml:name>X509Certificate[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ChangePasswordAtLogon</maml:name>
			<maml:description>
				<maml:para>Specifies whether a password must be changed during the next logon attempt. Possible values for this parameter include:
  $false or 0
  $true or 1

This parameter cannot be set to $true or 1 for an account that also has the PasswordNeverExpires property set to true.

The following example shows how to set this parameter so that the password must be changed at logon.
  -ChangePasswordAtLogon $true </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>City</maml:name>
			<maml:description>
				<maml:para>Specifies the user's town or city. This parameter sets the City property of a user. The LDAP display name (ldapDisplayName) of this property is &quot;l&quot;.

The following example shows how set this parameter.
  -City &quot;Las Vegas&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Company</maml:name>
			<maml:description>
				<maml:para>Specifies the user's company. This parameter sets the Company property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;company&quot;. 

The following example shows how to set this parameter.
  -Company &quot;Contoso&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Country</maml:name>
			<maml:description>
				<maml:para>Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;c&quot;. This value is not used by Windows 2000.

The following example shows how set this parameter.
  -Country &quot;IN&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Department</maml:name>
			<maml:description>
				<maml:para>Specifies the user's department. This parameter sets the Department property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;department&quot;. 

The following example shows how to set this parameter.
  -Department &quot;Development&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Division</maml:name>
			<maml:description>
				<maml:para>Specifies the user's division. This parameter sets the Division property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;division&quot;. 

The following example shows how to set this parameter.
  -Division &quot;Software&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>EmailAddress</maml:name>
			<maml:description>
				<maml:para>Specifies the user's e-mail address. This parameter sets the EmailAddress property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;mail&quot;. 

The following example shows how to set this parameter.
  -EmailAddress &quot;saradavis@contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>EmployeeID</maml:name>
			<maml:description>
				<maml:para>Specifies the user's employee ID. This parameter sets the EmployeeID property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;employeeID&quot;. 

The following example shows how to set this parameter.
  -EmployeeID  &quot;A123456&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>EmployeeNumber</maml:name>
			<maml:description>
				<maml:para>Specifies the user's employee number. This parameter sets the EmployeeNumber property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;employeeNumber&quot;. 

The following example shows how set this parameter.
  -EmployeeNumber &quot;12345678&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Enabled</maml:name>
			<maml:description>
				<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Fax</maml:name>
			<maml:description>
				<maml:para>Specifies the user's fax phone number. This parameter sets the Fax property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;facsimileTelephoneNumber&quot;. 

The following example shows how to set this parameter.
  -Fax  &quot;+1 (999) 555 1212&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>GivenName</maml:name>
			<maml:description>
				<maml:para>Specifies the user's given name. This parameter sets the GivenName property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;givenName&quot;.

The following example shows how to set this parameter.
  -givenName &quot;Sanjay&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomeDirectory</maml:name>
			<maml:description>
				<maml:para>Specifies a user's home directory. This parameter sets the HomeDirectory property of a user object. The LDAP Display Name (ldapDisplayName) for this property is &quot;homeDirectory&quot;.

The following example shows how to set this parameter.
   -HomeDirectory &quot;\\users\saraDavisHomeDir&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomeDrive</maml:name>
			<maml:description>
				<maml:para>Specifies a drive that is associated with the UNC path defined by the HomeDirectory property. The drive letter is specified as &quot;&lt;DriveLetter&gt;:&quot; where &lt;DriveLetter&gt; indicates the letter of the drive to associate. The &lt;DriveLetter&gt; must be a single, uppercase letter and the colon is required. This parameter sets the HomeDrive property of the user object. The LDAP Display Name (ldapDisplayName) for this property is &quot;homeDrive&quot;. 

The following example shows how to set this parameter.
   -HomeDrive &quot;D:&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomePage</maml:name>
			<maml:description>
				<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomePhone</maml:name>
			<maml:description>
				<maml:para>Specifies the user's home telephone number. This parameter sets the HomePhone property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;homePhone&quot;.

The following example shows how to set this parameter.
  -HomePhone  &quot;+1 (999) 555 1212&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Initials</maml:name>
			<maml:description>
				<maml:para>Specifies the initials that represent part of a user's name. You can use this value for the user's middle initial. This parameter sets the Initials property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;initials&quot;.

The following example shows how set this parameter.
  -Initials &quot;L&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies an instance of a user object to use as a template for a new user object.

You can use an instance of an existing user object as a template or you can construct a new user object for template use.  You can construct a new user object using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create user object templates.

Method 1: Use an existing user object as a template for a new object. To retrieve an instance of an existing user object, use a cmdlet such as Get-ADUser. Then provide this object to the Instance parameter of the New-ADUser cmdlet to create a new user object. You can override property values of the new object by setting the appropriate parameters. 

  $userInstance = Get-ADUser -Identity &quot;saraDavis&quot; 
  New-ADUser -SAMAccountName &quot;ellenAdams&quot;  -Instance $userInstance -DisplayName &quot;EllenAdams&quot;

Method 2: Create a new ADUser object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADUser cmdlet to create the new Active Directory user object. 

  $userInstance = new-object Microsoft.ActiveDirectory.Management.ADUser
  $userInstance.DisplayName = &quot;Ellen Adams&quot;
  New-ADUser -SAMAccountName &quot;ellenAdams&quot;  -Instance $userInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			<dev:type>
				<maml:name>ADUser</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>LogonWorkstations</maml:name>
			<maml:description>
				<maml:para>Specifies the computers that the user can access. To specify more than one computer, create a single comma-separated list. You can identify a computer by using the Security Accounts Manager (SAM) account name (sAMAccountName) or the DNS host name of the computer. The SAM account name is the same as the NetBIOS name of the computer.

The LDAP display name (ldapDisplayName) for this property is &quot;userWorkStations&quot;. 

The following example shows how to set this parameter by using SAMAccountName (NetBIOS name) and DNSHostName values.
  -LogonWorkstations &quot;saraDavisDesktop,saraDavisLapTop,projectA.corp.contoso.com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Manager</maml:name>
			<maml:description>
				<maml:para>Specifies the user's manager. This parameter sets the Manager property of a user. This parameter is set by providing one of the following property values.  Note: The identifier in parentheses is the LDAP display name for the property.

  Distinguished Name 
    Example: CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The LDAP Display Name (ldapDisplayName) of this property is &quot;manager&quot;.

The following example shows how to set this parameter.
  -Manager saradavis </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			<dev:type>
				<maml:name>ADUser</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>MobilePhone</maml:name>
			<maml:description>
				<maml:para>Specifies the user's mobile phone number. This parameter sets the MobilePhone property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;mobile&quot;.

The following example shows how to set this parameter.
  -MobilePhone  &quot;+1  (999 ) 555 1212&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Office</maml:name>
			<maml:description>
				<maml:para>Specifies the location of the user's office or place of business. This parameter sets the Office property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;office&quot;.

The following example shows how to set this parameter.
  -Office  &quot;D1042&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>OfficePhone</maml:name>
			<maml:description>
				<maml:para>Specifies the user's office telephone number. This parameter sets the OfficePhone property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;telephoneNumber&quot;.

The following example shows how to set this parameter.
  -OfficePhone  &quot;+1 (999) 555 1212&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Organization</maml:name>
			<maml:description>
				<maml:para>Specifies the user's organization. This parameter sets the Organization property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;o&quot;.

The following example shows how to set this parameter.
  -Organization &quot;Accounting&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OtherAttributes</maml:name>
			<maml:description>
				<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>OtherName</maml:name>
			<maml:description>
				<maml:para>Specifies a name in addition to a user's given name and surname, such as the user's middle name. This parameter sets the OtherName property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;middleName&quot;.

The following example shows how to set this parameter.
  -OtherName  &quot;Peter&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>PasswordNeverExpires</maml:name>
			<maml:description>
				<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>PasswordNotRequired</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account requires a password. A password is not required for a new account. This parameter sets the PasswordNotRequired property of an account object. 

The following example shows how to set this parameter to true.
  -PasswordNotRequired $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>POBox</maml:name>
			<maml:description>
				<maml:para>Specifies the user's post office box number. This parameter sets the POBox property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;postOfficeBox&quot;.

The following example shows how to set this parameter.
  -POBox  &quot;25662&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>PostalCode</maml:name>
			<maml:description>
				<maml:para>Specifies the user's postal code or zip code. This parameter sets the PostalCode property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;postalCode&quot;.

The following example shows how to set this parameter.
  -PostalCode &quot;28712&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ProfilePath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the user's profile. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ProfilePath property of the user object. The LDAP display name (ldapDisplayName) for this property is &quot;profilePath&quot;.

The following examples show how to set this parameter to a local path and to a UNC path.    -ProfilePath &quot;E:\users\profiles\saraDavis&quot;
   -ProfilePath &quot;\\users\profiles\saraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>SamAccountName</maml:name>
			<maml:description>
				<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ScriptPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the user's log on script. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ScriptPath property of the user. The LDAP display name (ldapDisplayName) for this property is &quot;scriptPath&quot;. 

The following example shows how to set this parameter.
   -ScriptPath &quot;\\logonScripts\saradavisLogin&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ServicePrincipalNames</maml:name>
			<maml:description>
				<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>SmartcardLogonRequired</maml:name>
			<maml:description>
				<maml:para>Specifies whether a smart card is required to logon. This parameter sets the SmartCardLoginRequired property for a user. This parameter also sets the ADS_UF_SMARTCARD_REQUIRED flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1 

The following example shows how to set this parameter so that a smart card is required to logon to the account.
  -SmartCardLogonRequired $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>State</maml:name>
			<maml:description>
				<maml:para>Specifies the user's or Organizational Unit's state or province. This parameter sets the State property of a User or Organizational Unit object. The LDAP display name (ldapDisplayName) of this property is &quot;st&quot;.

The following example shows how set this parameter.
  -State  &quot;Nevada&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>StreetAddress</maml:name>
			<maml:description>
				<maml:para>Specifies the user's street address. This parameter sets the StreetAddress property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;streetAddress&quot;.

The following example shows how to set this parameter.
  -StreetAddress  &quot;1200 Main Street&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Surname</maml:name>
			<maml:description>
				<maml:para>Specifies the user's last name or surname. This parameter sets the Surname property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;sn&quot;.

The following example shows how to set this parameter.
  -Surname  &quot;Patel&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Title</maml:name>
			<maml:description>
				<maml:para>Specifies the user's title. This parameter sets the Title property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;title&quot;.

The following example shows how to set this parameter.
  -Title  &quot;Manager&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>TrustedForDelegation</maml:name>
			<maml:description>
				<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Type</maml:name>
			<maml:description>
				<maml:para>Specifies the type of object to create. Set the Type parameter to the LDAP display name of the Active Directory Schema Class that represents the type of object that you want to create. The selected type must be a subclass of the User schema class.  If this parameter is not specified it will default to &quot;User&quot;.

The following example shows how to use this parameter to create a new Active Directory InetOrgPerson object.
  -Type &quot;InetOrgPerson&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>user</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>UserPrincipalName</maml:name>
			<maml:description>
				<maml:para>Each user account has a user principal name (UPN) in the format &lt;user&gt;@&lt;DNS-domain-name&gt;. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's DN, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADUser</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A user object that is a template for the new user object is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADUser</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the new user object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADUser GlenJohn -Certificate (new-object System.Security.Cryptography.X509Certificates.X509Certificate -ArgumentList &quot;export.cer&quot;) </dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new user named 'GlenJohn' with a certicate imported from the file &quot;export.cer&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADUser GlenJohn -OtherAttributes @{title=&quot;director&quot;;mail=&quot;glenjohn@fabrikam.com&quot;}</dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new user named 'GlenJohn' and set the title and mail properties on the new object.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADUser GlenJohn -Type iNetOrgPerson -Path &quot;DC=AppNC&quot; -server lds.Fabrikam.com:50000 </dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new inetOrgPerson named 'GlenJohn' on an AD LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144970</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-ADComputer
		</command:name>
		<maml:description>
			<maml:para>Creates a new Active Directory computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>ADComputer</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The New-ADComputer cmdlet creates a new Active Directory computer object. This cmdlet does not join a computer to a domain. You can set commonly used computer property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the OtherAttributes parameter. 

You can use this cmdlet to provision a computer account before the computer is added to the domain. These pre-created computer objects can be used with offline domain join, unsecure domain Join and RODC domain join scenarios.
The Path parameter specifies the container or organizational unit (OU) for the new computer. When you do not specify the Path parameter, the cmdlet creates a computer account in the default container for computer objects in the domain. 

The following methods explain different ways to create an object by using this cmdlet.
Method 1: Use the New-ADComputer cmdlet, specify the required parameters, and set any additional property values by using the cmdlet parameters.
Method 2: Use a template to create the new object. To do this, create a new computer object or retrieve a copy of an existing computer object and set the Instance parameter to this object. The object provided to the Instance parameter is used as a template for the new object. You can override property values from the template by setting cmdlet parameters. For examples and more information, see the Instance parameter description for this cmdlet. 
Method 3: Use the Import-CSV cmdlet with the Add-ADComputer cmdlet to create multiple Active Directory computer objects. To do this, use the Import-CSV cmdlet to create the custom objects from a comma-separated value (CSV) file that contains a list of object properties. Then pass these objects through the pipeline to the New-ADComputer cmdlet to create the computer objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-ADComputer</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AccountExpirationDate</maml:name>
				<maml:description>
					<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AccountNotDelegated</maml:name>
				<maml:description>
					<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AccountPassword</maml:name>
				<maml:description>
					<maml:para>Specifies a new password value for an account. This value is stored as an encrypted string.

The following conditions apply based on the manner in which the password parameter is used:

$null password is specified - Random password is set and the account is enabled unless it is requested to be disabled
 No password is specified - Random password is set and the account is enabled unless it is requested to be disabled

User password is specified - Password is set and the account is enabled unless it is requested to be disabled, unless the password you provided does not meet password policy or was not set for other reasons, at which point the account is disabled

Notes:  Computer accounts, by default, are created with a 240-character random password. If you provide a password, an attempt will be made to set that password however, this can fail due to password policy restrictions. The computer account will still be created and you can use Set-ADAccountPassword to set the password on that account. In order to ensure that accounts remain secure, computer accounts will never be enabled unless a valid password is set (either a randomly-generated or user-provided one) or PasswordNotRequired is set to true. 
The account is created if the password fails for any reason.

The new ADComputer object will always either be disabled or have a user-requested or randomly-generated password. There is no way to create an enabled computer account object with a password that violates domain password policy, such as an empty password.

The following example shows how to set this parameter. This command will prompt you to enter the password.
  -AccountPassword (Read-Host -AsSecureString &quot;AccountPassword&quot;)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AllowReversiblePasswordEncryption</maml:name>
				<maml:description>
					<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>CannotChangePassword</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the account password can be changed.
  -CannotChangePassword $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Certificates</maml:name>
				<maml:description>
					<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">X509Certificate[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ChangePasswordAtLogon</maml:name>
				<maml:description>
					<maml:para>Specifies whether a password must be changed during the next logon attempt. Possible values for this parameter include:
  $false or 0
  $true or 1

This parameter cannot be set to $true or 1 for an account that also has the PasswordNeverExpires property set to true.

The following example shows how to set this parameter so that the password must be changed at logon.
  -ChangePasswordAtLogon $true </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>DNSHostName</maml:name>
				<maml:description>
					<maml:para>Specifies the fully qualified domain name (FQDN) of the computer. This parameter sets the DNSHostName property for a computer object. The LDAP Display Name for this property is &quot;dNSHostName&quot;. 

The following example shows how to set this parameter to a FQDN.
  -DNSHostName &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Enabled</maml:name>
				<maml:description>
					<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>HomePage</maml:name>
				<maml:description>
					<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies an instance of a computer object to use as a template for a new computer object.

You can use an instance of an existing computer object as a template or you can construct a new computer object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create computer object templates.

Method 1: Use an existing computer object as a template for a new object. To retrieve an instance of an existing computer object use  Get-ADcomputer. Then provide this object to the Instance parameter of the New-ADcomputer cmdlet to create a new computer object. You can override property values of the new object by setting the appropriate parameters. 

  $computerInstance = Get-ADcomputer -Identity ellenAdamsDesktop 
  New-ADcomputer -Name &quot;saraDavisDesktop&quot;  -Instance $computerInstance -AccountPassword &quot;MustChange242&quot; 
-samAccountName &quot;saraDavisDesktop&quot;

Method 2: Create a new ADcomputer object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADcomputer cmdlet to create the new Active Directory computer object. 

  $computerInstance = new-object Microsoft.ActiveDirectory.Management.ADcomputer
  New-ADcomputer -Name &quot;saraDavisDesktop&quot;  -Instance $computerInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Location</maml:name>
				<maml:description>
					<maml:para>Specifies the location of the computer, such as an office number. This parameter sets the Location property of a computer. The LDAP display name (ldapDisplayName) of this property is &quot;location&quot;. 

The following example shows how to set this parameter.
  -Location  &quot;Test Lab A&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ManagedBy</maml:name>
				<maml:description>
					<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>OperatingSystem</maml:name>
				<maml:description>
					<maml:para>Specifies an operating system name. This parameter sets the OperatingSystem property of the computer object. The LDAP Display Name (ldapDisplayName) for this property is &quot;operatingSystem&quot;. 

The following example shows how to set this parameter.
   -OperatingSystem &quot;Windows Server 2008 Enterprise&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>OperatingSystemHotfix</maml:name>
				<maml:description>
					<maml:para>Specifies an operating system hotfix name. This parameter sets the operatingSystemHotfix property of the computer object. The LDAP display name for this property is &quot;operatingSystemHotfix&quot;.

The following example shows how to specify this parameter.
   -operatingSystemHotfix &quot;523466&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>OperatingSystemServicePack</maml:name>
				<maml:description>
					<maml:para>Specifies the name of an operating system service pack. This parameter sets the OperatingSystemServicePack property of the computer object. The LDAP display name (ldapDisplayName) for this property is &quot;operatingSystemServicePack&quot;. 

The following example shows how to specify this parameter.
   -OperatingSystemServicePack &quot;Service Pack 2&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>OperatingSystemVersion</maml:name>
				<maml:description>
					<maml:para>Specifies an operating system version. This parameter sets the OperatingSystemVersion property of the computer object. The LDAP display name (ldapDisplayName) for this property is &quot;operatingSystemVersion&quot;. 

The following example shows how to specify this parameter.
   -OperatingSystemVersion &quot;6.0 (6001)&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OtherAttributes</maml:name>
				<maml:description>
					<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>PasswordNeverExpires</maml:name>
				<maml:description>
					<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>PasswordNotRequired</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0 
  $true or 1 

The following example shows how to set this parameter so that as password is not required for the account.
  -PasswordNotRequired $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>SAMAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the SAMAccountName string provided, does not end with a '$', one will be appended if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ServicePrincipalNames</maml:name>
				<maml:description>
					<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>TrustedForDelegation</maml:name>
				<maml:description>
					<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>UserPrincipalName</maml:name>
				<maml:description>
					<maml:para>Each user account has a user principal name (UPN) in the format &lt;user&gt;@&lt;DNS-domain-name&gt;. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's DN, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AccountExpirationDate</maml:name>
			<maml:description>
				<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.DateTime]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AccountNotDelegated</maml:name>
			<maml:description>
				<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AccountPassword</maml:name>
			<maml:description>
				<maml:para>Specifies a new password value for an account. This value is stored as an encrypted string.

The following conditions apply based on the manner in which the password parameter is used:

$null password is specified - Random password is set and the account is enabled unless it is requested to be disabled
 No password is specified - Random password is set and the account is enabled unless it is requested to be disabled

User password is specified - Password is set and the account is enabled unless it is requested to be disabled, unless the password you provided does not meet password policy or was not set for other reasons, at which point the account is disabled

Notes:  Computer accounts, by default, are created with a 240-character random password. If you provide a password, an attempt will be made to set that password however, this can fail due to password policy restrictions. The computer account will still be created and you can use Set-ADAccountPassword to set the password on that account. In order to ensure that accounts remain secure, computer accounts will never be enabled unless a valid password is set (either a randomly-generated or user-provided one) or PasswordNotRequired is set to true. 
The account is created if the password fails for any reason.

The new ADComputer object will always either be disabled or have a user-requested or randomly-generated password. There is no way to create an enabled computer account object with a password that violates domain password policy, such as an empty password.

The following example shows how to set this parameter. This command will prompt you to enter the password.
  -AccountPassword (Read-Host -AsSecureString &quot;AccountPassword&quot;)</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			<dev:type>
				<maml:name>SecureString</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AllowReversiblePasswordEncryption</maml:name>
			<maml:description>
				<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>CannotChangePassword</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the account password can be changed.
  -CannotChangePassword $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Certificates</maml:name>
			<maml:description>
				<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">X509Certificate[]</command:parameterValue>
			<dev:type>
				<maml:name>X509Certificate[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ChangePasswordAtLogon</maml:name>
			<maml:description>
				<maml:para>Specifies whether a password must be changed during the next logon attempt. Possible values for this parameter include:
  $false or 0
  $true or 1

This parameter cannot be set to $true or 1 for an account that also has the PasswordNeverExpires property set to true.

The following example shows how to set this parameter so that the password must be changed at logon.
  -ChangePasswordAtLogon $true </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>DNSHostName</maml:name>
			<maml:description>
				<maml:para>Specifies the fully qualified domain name (FQDN) of the computer. This parameter sets the DNSHostName property for a computer object. The LDAP Display Name for this property is &quot;dNSHostName&quot;. 

The following example shows how to set this parameter to a FQDN.
  -DNSHostName &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Enabled</maml:name>
			<maml:description>
				<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomePage</maml:name>
			<maml:description>
				<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies an instance of a computer object to use as a template for a new computer object.

You can use an instance of an existing computer object as a template or you can construct a new computer object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create computer object templates.

Method 1: Use an existing computer object as a template for a new object. To retrieve an instance of an existing computer object use  Get-ADcomputer. Then provide this object to the Instance parameter of the New-ADcomputer cmdlet to create a new computer object. You can override property values of the new object by setting the appropriate parameters. 

  $computerInstance = Get-ADcomputer -Identity ellenAdamsDesktop 
  New-ADcomputer -Name &quot;saraDavisDesktop&quot;  -Instance $computerInstance -AccountPassword &quot;MustChange242&quot; 
-samAccountName &quot;saraDavisDesktop&quot;

Method 2: Create a new ADcomputer object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADcomputer cmdlet to create the new Active Directory computer object. 

  $computerInstance = new-object Microsoft.ActiveDirectory.Management.ADcomputer
  New-ADcomputer -Name &quot;saraDavisDesktop&quot;  -Instance $computerInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			<dev:type>
				<maml:name>ADComputer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Location</maml:name>
			<maml:description>
				<maml:para>Specifies the location of the computer, such as an office number. This parameter sets the Location property of a computer. The LDAP display name (ldapDisplayName) of this property is &quot;location&quot;. 

The following example shows how to set this parameter.
  -Location  &quot;Test Lab A&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ManagedBy</maml:name>
			<maml:description>
				<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>OperatingSystem</maml:name>
			<maml:description>
				<maml:para>Specifies an operating system name. This parameter sets the OperatingSystem property of the computer object. The LDAP Display Name (ldapDisplayName) for this property is &quot;operatingSystem&quot;. 

The following example shows how to set this parameter.
   -OperatingSystem &quot;Windows Server 2008 Enterprise&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>OperatingSystemHotfix</maml:name>
			<maml:description>
				<maml:para>Specifies an operating system hotfix name. This parameter sets the operatingSystemHotfix property of the computer object. The LDAP display name for this property is &quot;operatingSystemHotfix&quot;.

The following example shows how to specify this parameter.
   -operatingSystemHotfix &quot;523466&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>OperatingSystemServicePack</maml:name>
			<maml:description>
				<maml:para>Specifies the name of an operating system service pack. This parameter sets the OperatingSystemServicePack property of the computer object. The LDAP display name (ldapDisplayName) for this property is &quot;operatingSystemServicePack&quot;. 

The following example shows how to specify this parameter.
   -OperatingSystemServicePack &quot;Service Pack 2&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>OperatingSystemVersion</maml:name>
			<maml:description>
				<maml:para>Specifies an operating system version. This parameter sets the OperatingSystemVersion property of the computer object. The LDAP display name (ldapDisplayName) for this property is &quot;operatingSystemVersion&quot;. 

The following example shows how to specify this parameter.
   -OperatingSystemVersion &quot;6.0 (6001)&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OtherAttributes</maml:name>
			<maml:description>
				<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>PasswordNeverExpires</maml:name>
			<maml:description>
				<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>PasswordNotRequired</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0 
  $true or 1 

The following example shows how to set this parameter so that as password is not required for the account.
  -PasswordNotRequired $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>SAMAccountName</maml:name>
			<maml:description>
				<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the SAMAccountName string provided, does not end with a '$', one will be appended if needed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ServicePrincipalNames</maml:name>
			<maml:description>
				<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>TrustedForDelegation</maml:name>
			<maml:description>
				<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>UserPrincipalName</maml:name>
			<maml:description>
				<maml:para>Each user account has a user principal name (UPN) in the format &lt;user&gt;@&lt;DNS-domain-name&gt;. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's DN, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A computer object that is a template for the new computer object is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the new computer object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADComputer -Name &quot;FABRIKAM-SRV2&quot; -SamAccountName &quot;FABRIKAM-SRV2&quot; -Path &quot;OU=ApplicationServers,OU=ComputerAccounts,OU=Managed,DC=FABRIKAM,DC=COM&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new computer account in the OU: &quot;OU=ApplicationServers,OU=ComputerAccounts,OU=Managed,DC=FABRIKAM,DC=COM&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADComputer -Name &quot;FABRIKAM-SRV3&quot; -SamAccountName &quot;FABRIKAM-SRV3&quot; -Path &quot;OU=ApplicationServers,OU=ComputerAccounts,OU=Managed,DC=FABRIKAM,DC=COM&quot; -Enabled $true -Location &quot;Redmond,WA&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new computer account under a particular OU, which is enabled and located in &quot;Redmond,WA&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$templateComp = get-adcomputer &quot;LabServer-00&quot; -properties &quot;Location&quot;,&quot;OperatingSystem&quot;,&quot;OperatingSystemHotfix&quot;,&quot;OperatingSystemServicePack&quot;,&quot;OperatingSystemVersion&quot;; New-ADComputer -Instance $templateComp -Name &quot;LabServer-01&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates a new computer account from a template object.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144971</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-ADGroup
		</command:name>
		<maml:description>
			<maml:para>Creates an Active Directory group. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>ADGroup</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The New-ADGroup cmdlet creates a new Active Directory group object. Many object properties are defined by setting cmdlet parameters. Properties that cannot be set by cmdlet parameters can be set using the OtherAttributes parameter.

The Name and GroupScope parameters specify the name and scope of the group and are required to create a new group. You can define the new group as a security or distribution group by setting the GroupType parameter. The Path parameter specifies the container or organizational unit (OU) for the group.

The following methods explain different ways to create an object by using this cmdlet.
Method 1: Use the New-ADGroup cmdlet, specify the required parameters, and set any additional property values by using the cmdlet parameters.
Method 2: Use a template to create the new object. To do this, create a new group object or retrieve a copy of an existing group object and set the Instance parameter to this object. The object provided to the Instance parameter is used as a template for the new object. You can override property values from the template by setting cmdlet parameters. For examples and more information, see the Instance parameter description for this cmdlet. 
Method 3: Use the Import-CSV cmdlet with the New-ADGroup cmdlet to create multiple Active Directory group objects. To do this, use the Import-CSV cmdlet to create the custom objects from a comma-separated value (CSV) file that contains a list of object properties. Then pass these objects through the pipeline to the New-ADGroup cmdlet to create the group objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-ADGroup</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>GroupScope</maml:name>
				<maml:description>
					<maml:para>Specifies the group scope of the group. Possible values of this parameter are:
  DomainLocal or 0
  Global or 1
  Universal or 2

This parameter sets the GroupScope property of a group object to the specified value. The LDAP display name of this property is &quot;groupType&quot;.

The following example shows two ways to set this parameter to DomainLocal.
  -GroupScope DomainLocal
  -GroupScope 0</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupScope]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>GroupCategory</maml:name>
				<maml:description>
					<maml:para>Specifies the category of the group. Possible values of this parameter are:
  Distribution or 0  
  Security or 1 
 
This parameter sets the GroupCategory property of the group. This parameter value combined with other group values sets the LDAP Display Name (ldapDisplayName) attribute named &quot;groupType&quot;.

The following example shows how to specify that a group is a security group.
  -GroupCategory security</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupCategory]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>HomePage</maml:name>
				<maml:description>
					<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies an instance of a group object to use as a template for a new group object.

You can use an instance of an existing group object as a template or you can construct a new group object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create group object templates.

Method 1: Use an existing group object as a template for a new object. Use the Get-ADGroup cmdlet to retrieve a group object then pass this object to the Instance parameter of the New-ADGroup cmdlet to create a new group object. You can override property values of the new object by setting the appropriate parameters. 

  $groupInstance = Get-ADGroup -Identity &quot;KarenTohReports&quot; 
  New-ADGroup -Name &quot;Sara Davis Reports&quot;  -Instance $groupInstance GroupType DomainLocal

Method 2: Create a new ADGroup object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADGroup cmdlet to create the new group object. 

  $groupTemplate = New-Object Microsoft.ActiveDirectory.Management.ADGroup
  $groupTemplateGroupType = DomainLocal
  New-ADGroup -Name &quot;Sara Davis Reports&quot; -Instance $groupInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ManagedBy</maml:name>
				<maml:description>
					<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OtherAttributes</maml:name>
				<maml:description>
					<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>SamAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>GroupCategory</maml:name>
			<maml:description>
				<maml:para>Specifies the category of the group. Possible values of this parameter are:
  Distribution or 0  
  Security or 1 
 
This parameter sets the GroupCategory property of the group. This parameter value combined with other group values sets the LDAP Display Name (ldapDisplayName) attribute named &quot;groupType&quot;.

The following example shows how to specify that a group is a security group.
  -GroupCategory security</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupCategory]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupCategory]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Security</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
			<maml:name>GroupScope</maml:name>
			<maml:description>
				<maml:para>Specifies the group scope of the group. Possible values of this parameter are:
  DomainLocal or 0
  Global or 1
  Universal or 2

This parameter sets the GroupScope property of a group object to the specified value. The LDAP display name of this property is &quot;groupType&quot;.

The following example shows two ways to set this parameter to DomainLocal.
  -GroupScope DomainLocal
  -GroupScope 0</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupScope]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupScope]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomePage</maml:name>
			<maml:description>
				<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies an instance of a group object to use as a template for a new group object.

You can use an instance of an existing group object as a template or you can construct a new group object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create group object templates.

Method 1: Use an existing group object as a template for a new object. Use the Get-ADGroup cmdlet to retrieve a group object then pass this object to the Instance parameter of the New-ADGroup cmdlet to create a new group object. You can override property values of the new object by setting the appropriate parameters. 

  $groupInstance = Get-ADGroup -Identity &quot;KarenTohReports&quot; 
  New-ADGroup -Name &quot;Sara Davis Reports&quot;  -Instance $groupInstance GroupType DomainLocal

Method 2: Create a new ADGroup object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADGroup cmdlet to create the new group object. 

  $groupTemplate = New-Object Microsoft.ActiveDirectory.Management.ADGroup
  $groupTemplateGroupType = DomainLocal
  New-ADGroup -Name &quot;Sara Davis Reports&quot; -Instance $groupInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ManagedBy</maml:name>
			<maml:description>
				<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OtherAttributes</maml:name>
			<maml:description>
				<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>SamAccountName</maml:name>
			<maml:description>
				<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A group object that is a template for the new group object is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the new group object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADGroup -Name &quot;RODC Admins&quot; -SamAccountName RODCAdmins -GroupCategory Security -GroupScope Global -DisplayName &quot;RODC Administrators&quot; -Path &quot;CN=Users,DC=Fabrikam,DC=Com&quot; -Description &quot;Members of this group are RODC Administrators&quot; 
</dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new group named 'RODC Admins' in the container 'CN=Users,DC=Fabrikam,DC=Com' and set the GroupCategory, DisplayName, GroupScope, and Description properties on the new object.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADGroup 

cmdlet New-ADGroup at command pipeline position 1 
Supply values for the following parameters: 
GroupScope: Universal 
Name: FabrikamBranch1 </dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new group using the cmdlet default behavior.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADGroup FabrikamBranch1 -Properties Description | New-ADGroup  -Name Branch1Employees  -SamAccountName Branch1Employees -GroupCategory Distribution -PassThru 
</dev:code>
  			<dev:remarks>
 				<maml:para>GroupScope        : Universal 
Name              : Branch1Employees 
GroupCategory     : Distribution 
SamAccountName    : Branch1Employees 
ObjectClass       : group 
ObjectGUID        : 8eebce44-5df7-4bed-a98b-b987a702103e 
SID               : S-1-5-21-41432690-3719764436-1984117282-1117 
DistinguishedName : CN=Branch1Employees,CN=Users,DC=Fabrikam,DC=com </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Create a new group using the property values from a current group.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADGroup -Server localhost:60000 -Path &quot;OU=AccountDeptOU,DC=AppNC&quot; -Name AccountLeads -GroupScope DomainLocal  -GroupCategory Distribution </dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new group named 'AccountLeads' on an AD LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144972</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-CSV</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-ADFineGrainedPasswordPolicy
		</command:name>
		<maml:description>
			<maml:para>Creates a new Active Directory fine grained password policy.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>ADFineGrainedPasswordPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The New-ADFineGrainedPasswordPolicy cmdlet creates a new Active Directory fine grained password policy. You can set commonly used fine grained password policy property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be set by using the OtherAttributes parameter. 

You must set the Name and Precedence parameters to create a new fine grained password policy. 

The following methods explain different ways to create an object by using this cmdlet.
Method 1: Use the New-ADFineGrainedPasswordPolicy cmdlet, specify the required parameters, and set any additional property values by using the cmdlet parameters.

Method 2: Use a template to create the new object. To do this, create a new fine grained password policy object or retrieve a copy of an existing fine grained password policy object and set the Instance parameter to this object. The object provided to the Instance parameter is used as a template for the new object. You can override property values from the template by setting cmdlet parameters. For examples and more information, see the Instance parameter description for this cmdlet. 

Method 3: Use the Import-CSV cmdlet with the New-ADFineGrainedPasswordPolicy cmdlet to create multiple Active Directory fine grained password policy objects. To do this, use the Import-CSV cmdlet to create the custom objects from a comma-separated value (CSV) file that contains a list of object properties. Then pass these objects through the pipeline to the New-ADFineGrainedPasswordPolicy cmdlet to create the fine grained password policy objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-ADFineGrainedPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Precedence</maml:name>
				<maml:description>
					<maml:para>Specifies a value that defines the precedence of a fine-grained password policy among all fine-grained password policies. This parameter sets the Precedence property for a fine-grained password policy. The LDAP display name (ldapDisplayName) for this property is &quot;msDS-PasswordSettingsPrecedence&quot;.

This value determines which password policy to use when more than one password policy applies to a user or group. When there is a conflict, the password policy that has the lower Precedence property value has higher priority. For example, if PasswordPolicy1 has a Precedence property value of 200 and PasswordPolicy2 has a Precedence property value of 100, PasswordPolicy2 is used. 

Typically, password policy precedence values are assigned in multiples of 10 or 100, making it easier to add policies at a later time. For example, if you set the initial precedence values for your policies to 100 and 200, you can add another policy that has precedence value of 150. 

If the specified Precedence parameter is already assigned to another password policy object, the cmdlet returns a terminating error.

The following example shows how to set this parameter.
  -Precedence 100</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ComplexityEnabled</maml:name>
				<maml:description>
					<maml:para>Specifies whether password complexity is enabled for the password policy. If enabled, the password must contain two of the following three character types: 
  Uppercase characters (A, B, C, D, E, ...)
  Lowercase characters (a, b, c, d, e, ...)
  Numerals (0, 1, 2, 3, ...) 

This parameter sets the ComplexityEnabled property of a password policy. 

Possible values for this parameter include:
  $false or 0 - Disables password complexity
  $true or 1 - Enables password complexity

The following example shows how to set this parameter to true.
  -ComplexityEnabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies an instance of a fine-grained password policy object to use as a template for a new fine-grained password policy object.

You can use an instance of an existing fine-grained password policy object as a template or you can construct a new fine-grained password policy object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create a new fine-grained password policy object.

Method 1: Use an existing fine-grained password policy object as a template for a new object. To retrieve an instance of an existing fine-grained password policy object, use a cmdlet such as Get-ADFineGrainedPasswordPolicy. Then provide this object to the Instance parameter of the New-ADFineGrainedPasswordPolicy cmdlet to create a new fine-grained password policy object. You can override property values of the new object by setting the appropriate parameters. 

  $fineGrainedPasswordPolicyInstance = Get-ADFineGrainedPasswordPolicy -Identity PasswordPolicy90 
  New-ADFineGrainedPasswordPolicy -Name &quot;PasswordPolicy180&quot;  -Instance $fineGrainedPasswordPolicyInstance -Precedence 600 -MaxPasswordAge &quot;180&quot; 
 

Method 2: Create a new ADFineGrainedPasswordPolicy object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADFineGrainedPasswordPolicy cmdlet to create the new Active Directory fine-grained password policy object. 

  $fineGrainedPasswordPolicyInstance = new-object Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  $fineGrainedPasswordPolicyInstance.MaxPasswordAge = &quot;180&quot; 
  New-ADFineGrainedPasswordPolicy -Name &quot;PasswordPolicy180&quot;  -Instance $fineGrainedPasswordPolicyInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>LockoutDuration</maml:name>
				<maml:description>
					<maml:para>Specifies the length of time that an account is locked after the number of failed login attempts exceeds the lockout threshold. You cannot login to an account that is locked until the lockout duration time period has expired. This parameter sets the lockoutDuration property of a password policy object. The LDAP display name (ldapDisplayName) of this property is &quot;msDS-LockoutDuration&quot;.

The lockout duration must be greater than or equal to the lockout observation time for a password policy. Use the LockOutObservationWindow parameter to set the lockout observation time. 

Specify the lockout duration time interval in the following format.
    [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutDuration &quot;2&quot;
  Set the time to 4 hours
    -LockoutDuration &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutDuration &quot;0:5&quot;
  Set the time to 45 seconds
    LockoutDuration &quot;0:0:45&quot;

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>LockoutObservationWindow</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum time interval between two unsuccessful login attempts before the number of unsuccessful login attempts is reset to 0. An account is locked when the number of unsuccessful login attempts exceeds the password policy lockout threshold. This parameter sets the lockoutObservationWindow property of a password policy object. The LDAP Display Name (ldapDisplayName) of this property is &quot;msDS-lockoutObservationWindow&quot;.

The lockout observation window must be smaller than or equal to the lockout duration for a password policy. Use the LockoutDuration parameter to set the lockout duration time.

Specify the time interval in the following format.
   [-]D:H:M:S.F 

    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutObservationWindow &quot;2&quot;
  Set the time to 4 hours
    -LockoutObservationWindow &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutObservationWindow &quot;0:5&quot;
  Set the time to 45 seconds
    -LockoutObservationWindow &quot;0:0:45&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>LockoutThreshold</maml:name>
				<maml:description>
					<maml:para>Specifies the number of unsuccessful login attempts that are permitted before an account is locked out. This number increases when the time between unsuccessful login attempts is less than the time specified for the lockout observation time window. This parameter sets the LockoutThreshold property of a password policy. 

The following example shows how to set the lockout threshold to 3 login attempts.
  -LockoutThreshold 3</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>MaxPasswordAge</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum length of time that you can have the same password. After this time period, the password expires and you must create a new one. 

This parameter sets the maxPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;maxPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    MaxPasswordAge &quot;2&quot;
  Set the time span to the previous 2 days
    MaxPasswordAge &quot;-2&quot;
  Set the time span to 4 hours
    MaxPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    MaxPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    MaxPasswordAge &quot;0:0:45&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>MinPasswordAge</maml:name>
				<maml:description>
					<maml:para>Specifies the minimum length of time before you can change a password.

This parameter sets the minPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;minPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    -MinPasswordAge &quot;2&quot;
  Set the time span to 4 hours
    -MinPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    -MinPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    -MinPasswordAge &quot;0:0:45&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>MinPasswordLength</maml:name>
				<maml:description>
					<maml:para>Specifies the minimum number of characters that a password must contain.  This parameter sets the MinPasswordLength property of the password policy. 

The following example shows how to set this parameter.
  -MinPasswordLength 15</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OtherAttributes</maml:name>
				<maml:description>
					<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>PasswordHistoryCount</maml:name>
				<maml:description>
					<maml:para>Specifies the number of previous passwords to save.  A user cannot reuse a password in the list of saved passwords. This parameter sets the PasswordHistoryCount property for a password policy. 

The following example shows how to set this parameter to save 10 previous passwords.
  -PasswordHistoryCount 10</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ProtectedFromAccidentalDeletion</maml:name>
				<maml:description>
					<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ReversibleEncryptionEnabled</maml:name>
				<maml:description>
					<maml:para>Specifies whether the directory must  store passwords using reversible encryption. This parameter sets the ReversibleEncryption property for a password policy. Possible values for this parameter include the following:
  $false or 0
  $true or 1 


The following example shows how to set this parameter to true.
  -ReversibleEncryptionEnabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ComplexityEnabled</maml:name>
			<maml:description>
				<maml:para>Specifies whether password complexity is enabled for the password policy. If enabled, the password must contain two of the following three character types: 
  Uppercase characters (A, B, C, D, E, ...)
  Lowercase characters (a, b, c, d, e, ...)
  Numerals (0, 1, 2, 3, ...) 

This parameter sets the ComplexityEnabled property of a password policy. 

Possible values for this parameter include:
  $false or 0 - Disables password complexity
  $true or 1 - Enables password complexity

The following example shows how to set this parameter to true.
  -ComplexityEnabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>$true</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies an instance of a fine-grained password policy object to use as a template for a new fine-grained password policy object.

You can use an instance of an existing fine-grained password policy object as a template or you can construct a new fine-grained password policy object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create a new fine-grained password policy object.

Method 1: Use an existing fine-grained password policy object as a template for a new object. To retrieve an instance of an existing fine-grained password policy object, use a cmdlet such as Get-ADFineGrainedPasswordPolicy. Then provide this object to the Instance parameter of the New-ADFineGrainedPasswordPolicy cmdlet to create a new fine-grained password policy object. You can override property values of the new object by setting the appropriate parameters. 

  $fineGrainedPasswordPolicyInstance = Get-ADFineGrainedPasswordPolicy -Identity PasswordPolicy90 
  New-ADFineGrainedPasswordPolicy -Name &quot;PasswordPolicy180&quot;  -Instance $fineGrainedPasswordPolicyInstance -Precedence 600 -MaxPasswordAge &quot;180&quot; 
 

Method 2: Create a new ADFineGrainedPasswordPolicy object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADFineGrainedPasswordPolicy cmdlet to create the new Active Directory fine-grained password policy object. 

  $fineGrainedPasswordPolicyInstance = new-object Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  $fineGrainedPasswordPolicyInstance.MaxPasswordAge = &quot;180&quot; 
  New-ADFineGrainedPasswordPolicy -Name &quot;PasswordPolicy180&quot;  -Instance $fineGrainedPasswordPolicyInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>LockoutDuration</maml:name>
			<maml:description>
				<maml:para>Specifies the length of time that an account is locked after the number of failed login attempts exceeds the lockout threshold. You cannot login to an account that is locked until the lockout duration time period has expired. This parameter sets the lockoutDuration property of a password policy object. The LDAP display name (ldapDisplayName) of this property is &quot;msDS-LockoutDuration&quot;.

The lockout duration must be greater than or equal to the lockout observation time for a password policy. Use the LockOutObservationWindow parameter to set the lockout observation time. 

Specify the lockout duration time interval in the following format.
    [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutDuration &quot;2&quot;
  Set the time to 4 hours
    -LockoutDuration &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutDuration &quot;0:5&quot;
  Set the time to 45 seconds
    LockoutDuration &quot;0:0:45&quot;

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0.00:30:00 (30 Minutes)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>LockoutObservationWindow</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum time interval between two unsuccessful login attempts before the number of unsuccessful login attempts is reset to 0. An account is locked when the number of unsuccessful login attempts exceeds the password policy lockout threshold. This parameter sets the lockoutObservationWindow property of a password policy object. The LDAP Display Name (ldapDisplayName) of this property is &quot;msDS-lockoutObservationWindow&quot;.

The lockout observation window must be smaller than or equal to the lockout duration for a password policy. Use the LockoutDuration parameter to set the lockout duration time.

Specify the time interval in the following format.
   [-]D:H:M:S.F 

    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutObservationWindow &quot;2&quot;
  Set the time to 4 hours
    -LockoutObservationWindow &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutObservationWindow &quot;0:5&quot;
  Set the time to 45 seconds
    -LockoutObservationWindow &quot;0:0:45&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0.00.30.00 (30 Minutes)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>LockoutThreshold</maml:name>
			<maml:description>
				<maml:para>Specifies the number of unsuccessful login attempts that are permitted before an account is locked out. This number increases when the time between unsuccessful login attempts is less than the time specified for the lockout observation time window. This parameter sets the LockoutThreshold property of a password policy. 

The following example shows how to set the lockout threshold to 3 login attempts.
  -LockoutThreshold 3</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>MaxPasswordAge</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum length of time that you can have the same password. After this time period, the password expires and you must create a new one. 

This parameter sets the maxPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;maxPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    MaxPasswordAge &quot;2&quot;
  Set the time span to the previous 2 days
    MaxPasswordAge &quot;-2&quot;
  Set the time span to 4 hours
    MaxPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    MaxPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    MaxPasswordAge &quot;0:0:45&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>42.00:00:00 (42 days)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>MinPasswordAge</maml:name>
			<maml:description>
				<maml:para>Specifies the minimum length of time before you can change a password.

This parameter sets the minPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;minPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    -MinPasswordAge &quot;2&quot;
  Set the time span to 4 hours
    -MinPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    -MinPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    -MinPasswordAge &quot;0:0:45&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>1.00:00:00 (1day)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>MinPasswordLength</maml:name>
			<maml:description>
				<maml:para>Specifies the minimum number of characters that a password must contain.  This parameter sets the MinPasswordLength property of the password policy. 

The following example shows how to set this parameter.
  -MinPasswordLength 15</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>7</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OtherAttributes</maml:name>
			<maml:description>
				<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>PasswordHistoryCount</maml:name>
			<maml:description>
				<maml:para>Specifies the number of previous passwords to save.  A user cannot reuse a password in the list of saved passwords. This parameter sets the PasswordHistoryCount property for a password policy. 

The following example shows how to set this parameter to save 10 previous passwords.
  -PasswordHistoryCount 10</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>24</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Precedence</maml:name>
			<maml:description>
				<maml:para>Specifies a value that defines the precedence of a fine-grained password policy among all fine-grained password policies. This parameter sets the Precedence property for a fine-grained password policy. The LDAP display name (ldapDisplayName) for this property is &quot;msDS-PasswordSettingsPrecedence&quot;.

This value determines which password policy to use when more than one password policy applies to a user or group. When there is a conflict, the password policy that has the lower Precedence property value has higher priority. For example, if PasswordPolicy1 has a Precedence property value of 200 and PasswordPolicy2 has a Precedence property value of 100, PasswordPolicy2 is used. 

Typically, password policy precedence values are assigned in multiples of 10 or 100, making it easier to add policies at a later time. For example, if you set the initial precedence values for your policies to 100 and 200, you can add another policy that has precedence value of 150. 

If the specified Precedence parameter is already assigned to another password policy object, the cmdlet returns a terminating error.

The following example shows how to set this parameter.
  -Precedence 100</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ProtectedFromAccidentalDeletion</maml:name>
			<maml:description>
				<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ReversibleEncryptionEnabled</maml:name>
			<maml:description>
				<maml:para>Specifies whether the directory must  store passwords using reversible encryption. This parameter sets the ReversibleEncryption property for a password policy. Possible values for this parameter include the following:
  $false or 0
  $true or 1 


The following example shows how to set this parameter to true.
  -ReversibleEncryptionEnabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>$true</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A fine grained password policy object that is a template for the new fine grained password policy object is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the new fine grained password policy object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADFineGrainedPasswordPolicy -Name &quot;DomainUsersPSO&quot; -Precedence 500 -ComplexityEnabled $true -Description &quot;The Domain Users Password Policy&quot; -DisplayName &quot;Domain Users PSO&quot; -LockoutDuration &quot;0.12:00:00&quot; -LockoutObservationWindow &quot;0.00:15:00&quot; -LockoutThreshold 10
</dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new Fine Grained Password Policy object named 'DomainUsersPSO' and set the Precedence, ComplexityEnabled, Description, DisplayName, LockoutDuration, LockoutObservationWindw, and LockoutThreshold properties on the object.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$templatePSO = New-Object Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
$templatePSO.ComplexityEnabled = $true
$templatePSO.LockoutDuration = [TimeSpan]::Parse(&quot;0.12:00:00&quot;)
$templatePSO.LockoutObservationWindow = [TimeSpan]::Parse(&quot;0.00:15:00&quot;)
$templatePSO.LockoutThreshold = 10
$templatePSO.MinPasswordAge = [TimeSpan]::Parse(&quot;0.00:10:00&quot;)
$templatePSO.PasswordHistoryCount = 24
$templatePSO.ReversibleEncryptionEnabled = $false

New-ADFineGrainedPasswordPolicy -Instance $templatePSO -Name &quot;SvcAccPSO&quot; -Precedence 100 -Description &quot;The Service Accounts Password Policy&quot; -DisplayName &quot;Service Accounts PSO&quot; -MaxPasswordAge &quot;30.00:00:00&quot; -MinPasswordLength 20
New-ADFineGrainedPasswordPolicy -Instance $templatePSO -Name &quot;AdminsPSO&quot; -Precedence 200 -Description &quot;The Domain Administrators Password Policy&quot; -DisplayName &quot;Domain Administrators PSO&quot; -MaxPasswordAge &quot;15.00:00:00&quot; -MinPasswordLength 10</dev:code>
  			<dev:remarks>
  			        <maml:para>Create two new Fine Grained Password Policy object using a template object.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144973</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-ADOrganizationalUnit
		</command:name>
		<maml:description>
			<maml:para>Creates a new Active Directory organizational unit.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>ADOrganizationalUnit</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The New-ADOrganizationalUnit cmdlet creates a new Active Directory organizational unit. You can set commonly used organizational unit property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be set by using the OtherAttributes parameter. 

You must set the Name parameter to create a new organizational unit. When you do not specify the Path parameter, the cmdlet creates an organizational unit under the default NC head for the domain.
The following methods explain different ways to create an object by using this cmdlet.
Method 1: Use the New-ADOrganizationalUnit cmdlet, specify the required parameters, and set any additional property values by using the cmdlet parameters.
Method 2: Use a template to create the new object. To do this, create a new organizational unit object or retrieve a copy of an existing organizational unit object and set the Instance parameter to this object. The object provided to the Instance parameter is used as a template for the new object. You can override property values from the template by setting cmdlet parameters. For examples and more information, see the Instance parameter description for this cmdlet. 
Method 3: Use the Import-CSV cmdlet with the New-ADOrganizationalUnit cmdlet to create multiple Active Directory organizational unit objects. To do this, use the Import-CSV cmdlet to create the custom objects from a comma-separated value (CSV) file that contains a list of object properties. Then pass these objects through the pipeline to the New-ADOrganizationalUnit cmdlet to create the organizational unit objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-ADOrganizationalUnit</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>City</maml:name>
				<maml:description>
					<maml:para>Specifies the user's town or city. This parameter sets the City property of a user. The LDAP display name (ldapDisplayName) of this property is &quot;l&quot;.

The following example shows how set this parameter.
  -City &quot;Las Vegas&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Country</maml:name>
				<maml:description>
					<maml:para>Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;c&quot;. This value is not used by Windows 2000.

The following example shows how set this parameter.
  -Country &quot;IN&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies an instance of an organizational unit object to use as a template for a new organizational unit object.

You can use an instance of an existing organizational unit object as a template or you can construct a new organizational unit object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create organizational unit object templates.

Method 1: Use an existing organizational unit object as a template for a new object. To retrieve an instance of an existing organizational unit object use Get-ADOrganizationalUnit. Then provide this object to the Instance parameter of the New-ADOrganizationalUnit cmdlet to create a new organizational unit object. You can override property values of the new object by setting the appropriate parameters. 

  $organizationalUnitInstance = Get-ADOrganizationalUnit -Identity accountingAsia
  New-ADOrganizationalUnit -Name accountingAustralia  -Instance $OrganizationalUnitInstance -Country Australia

Method 2: Create a new ADOrganizationalUnit object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADOrganizationalUnit cmdlet to create the new Active Directory organizational unit object. 

  $OrganizationalUnitInstance = new-object Microsoft.ActiveDirectory.Management.ADOrganizationalUnit
  $OrganizationalUnitInstance.Country = Australia
  New-ADOrganizationalUnit -Name accountingAustralia  -Instance $OrganizationalUnitInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ManagedBy</maml:name>
				<maml:description>
					<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OtherAttributes</maml:name>
				<maml:description>
					<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>PostalCode</maml:name>
				<maml:description>
					<maml:para>Specifies the user's postal code or zip code. This parameter sets the PostalCode property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;postalCode&quot;.

The following example shows how to set this parameter.
  -PostalCode &quot;28712&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ProtectedFromAccidentalDeletion</maml:name>
				<maml:description>
					<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>State</maml:name>
				<maml:description>
					<maml:para>Specifies the user's or Organizational Unit's state or province. This parameter sets the State property of a User or Organizational Unit object. The LDAP display name (ldapDisplayName) of this property is &quot;st&quot;.

The following example shows how set this parameter.
  -State  &quot;Nevada&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>StreetAddress</maml:name>
				<maml:description>
					<maml:para>Specifies the organizational unit's street address. This parameter sets the StreetAddress property of a organizational unit object. The LDAP display name (ldapDisplayName) of this property is &quot;street&quot;.

The following example shows how to set this parameter.
  -StreetAddress  &quot;1200 Main Street&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>City</maml:name>
			<maml:description>
				<maml:para>Specifies the user's town or city. This parameter sets the City property of a user. The LDAP display name (ldapDisplayName) of this property is &quot;l&quot;.

The following example shows how set this parameter.
  -City &quot;Las Vegas&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Country</maml:name>
			<maml:description>
				<maml:para>Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;c&quot;. This value is not used by Windows 2000.

The following example shows how set this parameter.
  -Country &quot;IN&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies an instance of an organizational unit object to use as a template for a new organizational unit object.

You can use an instance of an existing organizational unit object as a template or you can construct a new organizational unit object by using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create organizational unit object templates.

Method 1: Use an existing organizational unit object as a template for a new object. To retrieve an instance of an existing organizational unit object use Get-ADOrganizationalUnit. Then provide this object to the Instance parameter of the New-ADOrganizationalUnit cmdlet to create a new organizational unit object. You can override property values of the new object by setting the appropriate parameters. 

  $organizationalUnitInstance = Get-ADOrganizationalUnit -Identity accountingAsia
  New-ADOrganizationalUnit -Name accountingAustralia  -Instance $OrganizationalUnitInstance -Country Australia

Method 2: Create a new ADOrganizationalUnit object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADOrganizationalUnit cmdlet to create the new Active Directory organizational unit object. 

  $OrganizationalUnitInstance = new-object Microsoft.ActiveDirectory.Management.ADOrganizationalUnit
  $OrganizationalUnitInstance.Country = Australia
  New-ADOrganizationalUnit -Name accountingAustralia  -Instance $OrganizationalUnitInstance

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			<dev:type>
				<maml:name>ADOrganizationalUnit</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ManagedBy</maml:name>
			<maml:description>
				<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OtherAttributes</maml:name>
			<maml:description>
				<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>PostalCode</maml:name>
			<maml:description>
				<maml:para>Specifies the user's postal code or zip code. This parameter sets the PostalCode property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;postalCode&quot;.

The following example shows how to set this parameter.
  -PostalCode &quot;28712&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ProtectedFromAccidentalDeletion</maml:name>
			<maml:description>
				<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>$true</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>State</maml:name>
			<maml:description>
				<maml:para>Specifies the user's or Organizational Unit's state or province. This parameter sets the State property of a User or Organizational Unit object. The LDAP display name (ldapDisplayName) of this property is &quot;st&quot;.

The following example shows how set this parameter.
  -State  &quot;Nevada&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>StreetAddress</maml:name>
			<maml:description>
				<maml:para>Specifies the organizational unit's street address. This parameter sets the StreetAddress property of a organizational unit object. The LDAP display name (ldapDisplayName) of this property is &quot;street&quot;.

The following example shows how to set this parameter.
  -StreetAddress  &quot;1200 Main Street&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADOrganizationalUnit</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An organizational unit object that is a template for the new organizational unit object is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADOrganizationalUnit</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the new organizational unit object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADOrganizationalUnit -Name UserAccounts -Path &quot;DC=FABRIKAM,DC=COM&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates a new OrganizationalUnit named 'UserAccounts' which is protected from accidental deletion.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADOrganizationalUnit -Name UserAccounts -Path &quot;DC=FABRIKAM,DC=COM&quot; -ProtectedFromAccidentalDeletion $false</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates a new OrganizationalUnit named 'UserAccounts' which is not protected from deletion.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADOrganizationalUnit -Name UserAccounts -Path &quot;DC=FABRIKAM,DC=COM&quot; -OtherAttributes @{seeAlso=&quot;CN=HumanResourceManagers,OU=Groups,OU=Managed,DC=Fabrikam,DC=com&quot;;managedBy=&quot;CN=TomC,DC=FABRIKAM,DC=COM&quot;}</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates an OrganizationalUnit name 'UserAccounts' which is protected from accidental deletion with properties 'seeAlso' and 'managedBy' set to the specified values.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$ouTemplate = Get-ADOrganizationalUnit &quot;OU=UserAccounts,DC=Fabrikam,DC=com&quot; -properties seeAlso,managedBy; New-ADOrganizationalUnit -name TomCReports -instance $ouTemplate</dev:code>
  			<dev:remarks>
  			        <maml:para>Uses the data from the OrganizationalUnit 'OU=UserAccounts,DC=Fabrikam,DC=com' as a template for another new OrganizationalUnit.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADOrganizationalUnit -name &quot;Managed&quot; -path &quot;DC=AppNC&quot; -server &quot;FABRIKAM-SRV1:60000&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates a new OrganizationalUnit named 'Managed' in an LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144974</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADOrganizationalUnit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADOrganizationalUnit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADOrganizationalUnit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-ADServiceAccount
		</command:name>
		<maml:description>
			<maml:para>Creates a new Active Directory service account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>ADServiceAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The New-ADServiceAccount cmdlet creates a new Active Directory service account. You can set commonly used service account property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be set by using the OtherAttributes parameter. 

The Path parameter specifies the container or organizational unit (OU) for the new service account object. When you do not specify the Path parameter, the cmdlet creates an object in the default container for service account objects in the domain.

The following methods explain different ways to create an object by using this cmdlet.

Method 1: Use the New-ADServiceAccount cmdlet, specify the required parameters, and set any additional property values by using the cmdlet parameters.

Method 2: Use a template to create the new object. To do this, create a new service account object or retrieve a copy of an existing service account object and set the Instance parameter to this object. The object provided to the Instance parameter is used as a template for the new object. You can override property values from the template by setting cmdlet parameters. For examples and more information, see the Instance parameter description for this cmdlet. 

Method 3: Use the Import-CSV cmdlet with the New-ADServiceAccount cmdlet to create multiple Active Directory service account objects. To do this, use the Import-CSV cmdlet to create the custom objects from a comma-separated value (CSV) file that contains a list of object properties. Then pass these objects through the pipeline to the New-ADServiceAccount cmdlet to create the service account objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-ADServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AccountExpirationDate</maml:name>
				<maml:description>
					<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AccountNotDelegated</maml:name>
				<maml:description>
					<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AccountPassword</maml:name>
				<maml:description>
					<maml:para>Specifies a new password value for an account. This value is stored as an encrypted string.

The following conditions apply based on the manner in which the password parameter is used:

$null password is specified - Random password is set and the account is enabled unless it is requested to be disabled
 No password is specified - Random password is set and the account is enabled unless it is requested to be disabled

User password is specified - Password is set and the account is enabled unless it is requested to be disabled, unless the password you provided does not meet password policy or was not set for other reasons, at which point the account is disabled

Notes: Service accounts, by default, are created with a 240-character random password. If you provide a password, an attempt will be made to set that password however, this can fail due to password policy restrictions. The service account will still be created and you can use Set-ADAccountPassword to set the password on that account. In order to ensure that accounts remain secure, service accounts will never be enabled unless a valid password is set (either a randomly-generated or user-provided one) or PasswordNotRequired is set to true.

The new ADServiceAccount object will always either be disabled or have a user-requested or randomly-generated password. There is no way to create an enabled service account object with a password that violates domain password policy, such as an empty password.
 The account is created if the password fails for any reason.

The following example shows how to set this parameter. This command will prompt you to enter the password.
  -AccountPassword (Read-Host -AsSecureString &quot;AccountPassword&quot;)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Certificates</maml:name>
				<maml:description>
					<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Enabled</maml:name>
				<maml:description>
					<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>HomePage</maml:name>
				<maml:description>
					<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies an instance of a service account object to use as a template for a new service account object.

You can use an instance of an existing service account object as a template or you can construct a new service account object for template use.  You can construct a new service account using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create service account object templates.

Method 1: Use an existing service account object as a template for a new object. To retrieve an instance of an existing service account object, use a cmdlet such as Get-ADServiceAccount. Then provide this object to the Instance parameter of the New-ADServiceAccount cmdlet to create a new service account object. You can override property values of the new object by setting the appropriate parameters. 

  $serviceaccountInstance = Get-ADServiceAccount -Identity  
  New-ADServiceAccount -Name &quot;ServiceAdmin_2&quot; -Instance $serviceaccountInstance   -Description &quot;Service Account 2&quot;

Method 2: Create a new ADServiceAccount object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADServiceAccount cmdlet to create the new Active Directory service account object. 

  $serviceaccountInstance = new-object Microsoft.ActiveDirectory.Management.ADServiceAccount
  $serviceaccountInstance. Description &quot;Service Account 2&quot;

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OtherAttributes</maml:name>
				<maml:description>
					<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>SamAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the SAMAccountName string provided, does not end with a '$', one will be appended if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ServicePrincipalNames</maml:name>
				<maml:description>
					<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>TrustedForDelegation</maml:name>
				<maml:description>
					<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AccountExpirationDate</maml:name>
			<maml:description>
				<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.DateTime]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AccountNotDelegated</maml:name>
			<maml:description>
				<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AccountPassword</maml:name>
			<maml:description>
				<maml:para>Specifies a new password value for an account. This value is stored as an encrypted string.

The following conditions apply based on the manner in which the password parameter is used:

$null password is specified - Random password is set and the account is enabled unless it is requested to be disabled
 No password is specified - Random password is set and the account is enabled unless it is requested to be disabled

User password is specified - Password is set and the account is enabled unless it is requested to be disabled, unless the password you provided does not meet password policy or was not set for other reasons, at which point the account is disabled

Notes: Service accounts, by default, are created with a 240-character random password. If you provide a password, an attempt will be made to set that password however, this can fail due to password policy restrictions. The service account will still be created and you can use Set-ADAccountPassword to set the password on that account. In order to ensure that accounts remain secure, service accounts will never be enabled unless a valid password is set (either a randomly-generated or user-provided one) or PasswordNotRequired is set to true.

The new ADServiceAccount object will always either be disabled or have a user-requested or randomly-generated password. There is no way to create an enabled service account object with a password that violates domain password policy, such as an empty password.
 The account is created if the password fails for any reason.

The following example shows how to set this parameter. This command will prompt you to enter the password.
  -AccountPassword (Read-Host -AsSecureString &quot;AccountPassword&quot;)</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			<dev:type>
				<maml:name>SecureString</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Certificates</maml:name>
			<maml:description>
				<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Enabled</maml:name>
			<maml:description>
				<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomePage</maml:name>
			<maml:description>
				<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies an instance of a service account object to use as a template for a new service account object.

You can use an instance of an existing service account object as a template or you can construct a new service account object for template use.  You can construct a new service account using the Windows PowerShell command line or by using a script. The following examples show how to use these two methods to create service account object templates.

Method 1: Use an existing service account object as a template for a new object. To retrieve an instance of an existing service account object, use a cmdlet such as Get-ADServiceAccount. Then provide this object to the Instance parameter of the New-ADServiceAccount cmdlet to create a new service account object. You can override property values of the new object by setting the appropriate parameters. 

  $serviceaccountInstance = Get-ADServiceAccount -Identity  
  New-ADServiceAccount -Name &quot;ServiceAdmin_2&quot; -Instance $serviceaccountInstance   -Description &quot;Service Account 2&quot;

Method 2: Create a new ADServiceAccount object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADServiceAccount cmdlet to create the new Active Directory service account object. 

  $serviceaccountInstance = new-object Microsoft.ActiveDirectory.Management.ADServiceAccount
  $serviceaccountInstance. Description &quot;Service Account 2&quot;

Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;. 

The following example shows how to set this parameter to a name string.
  -Name &quot;SaraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OtherAttributes</maml:name>
			<maml:description>
				<maml:para>Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

Syntax:
To specify a single value for an attribute:
   -OtherAttributes @{'AttributeLDAPDisplayName'=value}
To specify multiple values for an attribute
   -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
   -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

The following examples show how to use this parameter.

To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax: 
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;}

To set values for favColors and dateOfBirth simultaneously, use the following syntax:
   -OtherAttributes @{'favColors'=&quot;pink&quot;,&quot;purple&quot;; 'dateOfBirth'=&quot; 01/01/1960&quot;} </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.  

In many cases, a default value will be used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  -  If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Path will be set in the following cases:
  - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
  - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
  - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Path parameter will not take any default value.

The following example shows how to set this parameter to an OU.

  -Path &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot;

Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>SamAccountName</maml:name>
			<maml:description>
				<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the SAMAccountName string provided, does not end with a '$', one will be appended if needed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ServicePrincipalNames</maml:name>
			<maml:description>
				<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>TrustedForDelegation</maml:name>
			<maml:description>
				<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A service account object that is a template for the new service account object is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the new service account object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADServiceAccount service1 -Enabled $true</dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new enabled service account in AD DS by only specifying the name of the new account.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-ADServiceAccount service1 -ServicePrincipalNames &quot;MSSQLSVC/Machine3.corp.contoso.com&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Create a new service account named Service1 and register and service account's SerivcePrincipalName.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144975</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Install-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Uninstall-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADObject
		</command:name>
		<maml:description>
			<maml:para>Removes an Active Directory object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADObject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADObject cmdlet removes an Active Directory object. You can use this cmdlet to remove any type of Active Directory object.

The Identity parameter specifies the Active Directory object to remove. You can identify an object by its distinguished name (DN) or GUID. You can also set the Identity parameter to an Active Directory object variable, such as $&lt;localObject&gt;, or pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADObject cmdlet to retrieve an object and then pass the object through the pipeline to the Remove-ADObject cmdlet. 

If the object you specify to remove has child objects, you must specify the Recursive parameter. 

For AD LDS environments, the Partition parameter must be specified except when:     - Using a DN to identify objects: the partition will be auto-generated from the DN.     - Running cmdlets from an Active Directory provider drive: the current path will be used to set the partition.     - A default naming context or partition is specified. 
To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IncludeDeletedObjects</maml:name>
				<maml:description>
					<maml:para>Specifies to retrieve deleted objects and the deactivated forward and backward links. When this parameter is specified, the cmdlet uses the following LDAP controls: 
  Show Deleted Objects (1.2.840.113556.1.4.417)
  Show Deactivated Links (1.2.840.113556.1.4.2065)

Note: If this parameter is not specified, the cmdlet will not return or operate on deleted objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Recursive</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet should remove the object and any children it contains. 
  
The following example shows how to specify this parameter.
  -Recursive

Note: Specifying this parameter it will remove all child objects even if there are objects marked with ProtectedFromAccidentalDeletion.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>IncludeDeletedObjects</maml:name>
			<maml:description>
				<maml:para>Specifies to retrieve deleted objects and the deactivated forward and backward links. When this parameter is specified, the cmdlet uses the following LDAP controls: 
  Show Deleted Objects (1.2.840.113556.1.4.417)
  Show Deactivated Links (1.2.840.113556.1.4.2065)

Note: If this parameter is not specified, the cmdlet will not return or operate on deleted objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Recursive</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet should remove the object and any children it contains. 
  
The following example shows how to specify this parameter.
  -Recursive

Note: Specifying this parameter it will remove all child objects even if there are objects marked with ProtectedFromAccidentalDeletion.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADObject</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An Active Directory object is received by the Identity parameter. Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADOrganizationalUnit
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
This cmdlet does not work when connected to a Global Catalog port.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADObject 'CN=AmyAl-LPTOP,CN=Computers,DC=FABRIKAM,DC=COM'
</dev:code>
  			<dev:remarks>
 				<maml:para>Confirm
Are you sure you want to perform this action?
Performing operation &quot;Remove&quot; on Target &quot;CN=AmyAl-LPTOP,CN=Computers,DC=FABRIKAM,DC=COM&quot;.
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): y
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Remove the object identified by the DistinguishedName 'CN=AmyAl-LPTOP,CN=Computers,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADObject &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot; -Recursive
</dev:code>
  			<dev:remarks>
 				<maml:para>Confirm
Are you sure you want to perform this action?
Performing operation &quot;Remove&quot; on Target &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;.
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): y
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Deletes the container with DistinguishedName 'OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM' including the child objects. Note: All the children of the container including the ones which are protected from accidental deletion are also deleted.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADObject &quot;65511e76-ea80-45e1-bc93-08a78d8c4853&quot; -Confirm:$false</dev:code>
  			<dev:remarks>
  			        <maml:para>Removes the object with objectGUID '65511e76-ea80-45e1-bc93-08a78d8c4853' without giving the confirmation prompt.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADObject -Identity &quot;CN=InternalApps,DC=AppNC&quot; -server &quot;FABRIKAM-SRV1:60000&quot;</dev:code>
  			<dev:remarks>
 				<maml:para>Confirm
Are you sure you want to perform this action?
Performing operation &quot;Remove&quot; on Target &quot;CN=InternalApps,DC=AppNC&quot;.
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): y
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>removes the object with DistinguishedName 'CN=InternalApps,DC=AppNC' from an LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADObject -Filter 'isDeleted -eq $true -and isRecycled -ne $true -and name -ne &quot;Deleted Objects&quot; -and lastKnownParent -eq &quot;OU=Accounting,DC=Fabrikam,DC=com&quot;' -IncludeDeletedObjects | Remove-ADObject</dev:code>
  			<dev:remarks>
  			        <maml:para>Recycles all the objects in the recycle bin which used to be in the container 'OU=Accounting,DC=Fabrikam,DC=com'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144976</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADUser
		</command:name>
		<maml:description>
			<maml:para>Removes an Active Directory user.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADUser</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADUser cmdlet removes an Active Directory user.

The Identity parameter specifies the Active Directory user to remove. You can identify a user by its distinguished name (DN), GUID, security identifier (SID) or security accounts manager (SAM) account name. You can also set the Identity parameter to a user object variable, such as $&lt;localUserObject&gt;, or you can pass a user object through the pipeline to the Identity parameter. For example, you can use the Get-ADUser cmdlet to retrieve a user object and then pass the object through the pipeline to the Remove-ADUser cmdlet. 

If the ADUser is being identified by its DN, the Partition parameter will be automatically determined.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADUser</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			<dev:type>
				<maml:name>ADUser</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADUser</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A user object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADUser -Identity GlenJohn
</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove the user with samAccountName 'GlenJohn'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -AccountDisabled | where {$_.ObjectClass -eq 'user'} | Remove-ADUser
</dev:code>
  			<dev:remarks>
  			        <maml:para>Search for any users that have disabled accounts and remove them.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADUser -Identity &quot;CN=Glen John,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove the user with DistinguishedName 'CN=Glen John,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser &quot;cn=glenjohn,dc=appnc&quot; -Server Lds.Fabrikam.com:50000 | Remove-ADUser</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the user with DistinguishedName 'cn=glenjohn,dc=appnc' from the AD LDS instance and remove it.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144977</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADComputer
		</command:name>
		<maml:description>
			<maml:para>Removes an Active Directory computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADComputer</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADComputer cmdlet removes an Active Directory computer.

The Identity parameter specifies the Active Directory computer to remove. You can identify a computer by its distinguished name Members (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to a computer object variable, such as $&lt;localComputerObject&gt;, or you can pass a computer object through the pipeline to the Identity parameter. For example, you can use the Get-ADComputer cmdlet to retrieve a computer object and then pass the object through the pipeline to the Remove-ADComputer cmdlet.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADComputer</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			<dev:type>
				<maml:name>ADComputer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A computer object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADComputer -Identity &quot;FABRIKAM-SRV4&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove one particular computer.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADComputer -Filter 'Location -eq &quot;NA/HQ/Building A&quot;' | Remove-ADComputer</dev:code>
  			<dev:remarks>
 				<maml:para>Confirm
Are you sure you want to perform this action?
Performing operation &quot;Remove&quot; on Target &quot;CN=LabServer-01,CN=Computers,DC=Fabrikam,DC=com&quot;.
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): a
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Remove all computers in a given location.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADComputer -Filter 'Location -eq &quot;NA/HQ/Building A&quot;' | Remove-ADComputer -confirm:$false</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove all computers from a given location and disables the confirm prompt.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144978</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADGroup
		</command:name>
		<maml:description>
			<maml:para>Removes an Active Directory group.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADGroup</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADGroup cmdlet removes an Active Directory group object. You can use this cmdlet to remove security and distribution groups.

The Identity parameter specifies the Active Directory group to remove. You can identify a group by its distinguished name (DN), GUID, security identifier (SID), Security Accounts Manager (SAM) account name, or canonical name. You can also set the Identity parameter to an object variable such as $&lt;localADGroupObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADGroup cmdlet to retrieve a group object and then pass the object through the pipeline to the Remove-ADGroup cmdlet.

If the ADGroup is being identified by its DN, the Partition parameter will be automatically determined.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  - The cmdlet is run from an Active Directory provider drive.
  - A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADGroup</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A group object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-adgroup SanjaysReports </dev:code>
  			<dev:remarks>
 				<maml:para>Confirm 
Are you sure you want to perform this action? 
Performing operation &quot;Remove&quot; on Target &quot;CN=SanjayReports,DC=Fabrikam,DC=com&quot;. 
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Remove the group that has samAccountName 'SanjaysReports'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroup -filter 'Name -like &quot;Sanjay*&quot;' | remove-adgroup </dev:code>
  			<dev:remarks>
 				<maml:para>Confirm 
Are you sure you want to perform this action? 
Performing operation &quot;Remove&quot; on Target &quot;CN=SanjaysReports,DC=Fabrikam,DC=com&quot;. 
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all groups whose name starts with 'Sanjay' and then remove them. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-adgroup 
cmdlet Remove-ADGroup at command pipeline position 1 
Supply values for the following parameters: 
Identity: SanjaysTeam</dev:code>
  			<dev:remarks>
 				<maml:para>Confirm 
Are you sure you want to perform this action? 
Performing operation &quot;Remove&quot; on Target &quot;CN=SanjaysTeam,DC=Fabrikam,DC=com&quot;. 
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Remove the group with samAccountName 'SanjaysTeam' using the default cmdlet behavior.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144979</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADFineGrainedPasswordPolicy
		</command:name>
		<maml:description>
			<maml:para>Removes an Active Directory fine grained password policy.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADFineGrainedPasswordPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADFineGrainedPasswordPolicy cmdlet removes an Active Directory fine grained password policy.

The Identity parameter specifies the Active Directory fine grained password policy to remove. You can identify a fine grained password policy by its distinguished name, or GUID. You can also set the Identity parameter to a fine grained password object variable, such as $&lt;localFineGrainedPasswordPolicyObject&gt;, or you can pass a fine grained password policy object through the pipeline to the Identity parameter. For example, you can use the Get-ADFineGrainedPasswordPolicy cmdlet to retrieve a fine grained password policy object and then pass the object through the pipeline to the Remove-ADFineGrainedPasswordPolicy cmdlet.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADFineGrainedPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A fine grained password policy object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADFineGrainedPasswordPolicy MyPolicy
</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove the Fine Grained Password Policy object named 'MyPolicy'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADFineGrainedPasswordPolicy -Identity 'CN=MyPolicy,CN=Password Settings Container,CN=System,DC=FABRIKAM,DC=COM'
</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove the Fine Grained Password Policy object with DistinguishedName 'CN=MyPolicy,CN=Password Settings Container,CN=System,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADFineGrainedPasswordPolicy -Filter {Name -like &quot;*user*&quot;} | Remove-ADFineGrainedPasswordPolicy</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove all File Grained Password Policy objects that contain user in their names.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144980</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADFineGrainedPasswordPolicySubject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADFineGrainedPasswordPolicySubject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADFineGrainedPasswordPolicySubject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADOrganizationalUnit
		</command:name>
		<maml:description>
			<maml:para>Removes an Active Directory organizational unit.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADOrganizationalUnit</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADOrganizationalUnit cmdlet removes an Active Directory organizational unit.

The Identity parameter specifies the organizational unit to remove. You can identify an organizational unit by its distinguished name (DN) or GUID. You can also set the parameter to an organizational unit object variable, such as $&lt;localOrganizationUnitObject&gt; or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADOrganizationalUnit cmdlet to retrieve the object and then pass the object through the pipeline to the Remove-ADOrganizationalUnit cmdlet. 

If the object you specify to remove has child objects, you must specify the Recursive parameter. 

If the ProtectedFromAccidentalDeletion property of the organizational unit object is set to true, the cmdlet returns a terminating error. 

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADOrganizationalUnit</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies the identity of an Active Directory organizational unit object. The parameter accepts the following identity formats. The identifier in parentheses is the LDAP display name for the attribute that contains the identity.

  Distinguished Name 
    Example:  OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an organizational unit object instance named &quot;OUinstance&quot;.
  -Identity   $OUInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Recursive</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet remove the organizational unit and any child items it contains. You must specify this parameter to remove an organizational unit (OU) that is not empty.

Note: Specifying this parameter it will remove all child objects under an OU that has been marked with ProtectedFromAccidentalDeletion.

The following example shows how to specify this parameter.
  -Recursive</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies the identity of an Active Directory organizational unit object. The parameter accepts the following identity formats. The identifier in parentheses is the LDAP display name for the attribute that contains the identity.

  Distinguished Name 
    Example:  OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an organizational unit object instance named &quot;OUinstance&quot;.
  -Identity   $OUInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			<dev:type>
				<maml:name>ADOrganizationalUnit</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Recursive</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet remove the organizational unit and any child items it contains. You must specify this parameter to remove an organizational unit (OU) that is not empty.

Note: Specifying this parameter it will remove all child objects under an OU that has been marked with ProtectedFromAccidentalDeletion.

The following example shows how to specify this parameter.
  -Recursive</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADOrganizationalUnit</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An organizational unit object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADOrganizationalUnit -Identity &quot;OU=Accounting,DC=FABRIKAM,DC=COM&quot; -Recursive
</dev:code>
  			<dev:remarks>
 				<maml:para>Are you sure you want to remove the item and all its children?
Performing recursive remove on Target: 'OU=Accounting,DC=Fabrikam,DC=com'.
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help
(default is &quot;Y&quot;):y
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Removes an OrganizationalUnit and all of it's children. If the OrganizationalUnit is protected from deletion, then the OrganizationalUnit and it's children will not be deleted. If the OrganizationalUnit is not protected but any of the children are, then both the OrganizationalUnit and the children will be deleted.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADOrganizationalUnit -Identity &quot;1b228aa5-2c14-48b8-ad8a-2685dc22e055&quot; -confirm:$false</dev:code>
  			<dev:remarks>
  			        <maml:para>Removes an OrganizationalUnit using it's objectGUID as the Identity while suppressing the confirmation prompt.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADOrganizationalUnit -Identity &quot;OU=Accounting,DC=FABRIKAM,DC=COM&quot;</dev:code>
  			<dev:remarks>
 				<maml:para>Confirm
Are you sure you want to perform this action?
Performing operation &quot;Remove&quot; on Target &quot;OU=Accounting,DC=Fabrikam,DC=com&quot;.
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help
(default is &quot;Y&quot;):y
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Removes the Accounting OrganizationalUnit.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADOrganizationalUnit -Identity &quot;OU=Managed,DC=AppNC&quot; -server &quot;FABRIKAM-SRV1:60000&quot; -confirm:$false</dev:code>
  			<dev:remarks>
  			        <maml:para>Removes an OrganizationalUnit from an LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144981</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADOrganizationalUnit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADOrganizationalUnit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADOrganizationalUnit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADGroupMember
		</command:name>
		<maml:description>
			<maml:para>Removes one or more members from an Active Directory group.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADGroupMember</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADGroupMember cmdlet removes one or more users, groups, service accounts, or computers from an Active Directory group. 

The Identity parameter specifies the Active Directory group that contains the members to remove. You can identify a group by its distinguished name (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also specify a group object variable, such as $&lt;localGroupObject&gt;, or pass a group object through the pipeline to the Identity parameter. For example, you can use the Get-ADGroup cmdlet to retrieve a group object and then pass the object through the pipeline to the Remove-ADGroupMember cmdlet.

The Members parameter specifies the users, computers and groups to remove from the group specified by the Identity parameter. You can identify a user, computer or group by its distinguished name (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also specify user, computer, and group object variables, such as $&lt;localUserObject&gt;. If you are specifying more than one new member, use a comma-separated list. You cannot pass user, computer, or group objects through the pipeline to this cmdlet. To remove user, computer, or group objects from a group by using the pipeline, use the Remove-ADPrincipalGroupMembership cmdlet.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADGroupMember</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>Members</maml:name>
				<maml:description>
					<maml:para>Specifies a set of users, groups, and computers to remove from a group. You can identify users, groups, and computers by specifying one of the following values. Note: The identifier in parentheses is the LDAP display name.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
   Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

You can also provide objects to this parameter directly.

The following examples show how to specify this parameter.

This example specifies a user and group to remove by specifying the distinguished name and the SAM Account Name property values.
  -Members &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;, &quot;saradavisreports&quot;

This example specifies a user and a group object that are defined in the current Windows PowerShell session as input for the parameter.  

  -Members $userObject, $groupObject

The objects specified for this parameter are processed as Microsoft.ActiveDirectory.Management.ADPrincipal objects. Derived types, such as the following are also received by this parameter.
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADGroup 

You cannot pass objects through the pipeline to this parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>Members</maml:name>
			<maml:description>
				<maml:para>Specifies a set of users, groups, and computers to remove from a group. You can identify users, groups, and computers by specifying one of the following values. Note: The identifier in parentheses is the LDAP display name.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
   Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

You can also provide objects to this parameter directly.

The following examples show how to specify this parameter.

This example specifies a user and group to remove by specifying the distinguished name and the SAM Account Name property values.
  -Members &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;, &quot;saradavisreports&quot;

This example specifies a user and a group object that are defined in the current Windows PowerShell session as input for the parameter.  

  -Members $userObject, $groupObject

The objects specified for this parameter are processed as Microsoft.ActiveDirectory.Management.ADPrincipal objects. Derived types, such as the following are also received by this parameter.
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADGroup 

You cannot pass objects through the pipeline to this parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A group object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified group object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-adgroupmember -Identity &quot;DocumentReaders&quot; -Member &quot;WilsonPais&quot;</dev:code>
  			<dev:remarks>
 				<maml:para>Confirm 
Are you sure you want to perform this action? 
Performing operation &quot;Set&quot; on Target &quot;CN=DocumentReaders,CN=Users,DC=Fabrikam,DC=com&quot;. 
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Remove the user with samAccountName 'WilsonPais' from the group 'DocumentReaders'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-adgroupmember &quot;DocumentReaders&quot; &quot;administrator&quot;,&quot;Wilson Pais&quot; </dev:code>
  			<dev:remarks>
  			        <maml:para>Remove the users with samAccountNames 'administrator' and 'WilsonPais' from the group 'DocumentReaders'. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-adgroupmember
cmdlet Remove-ADGroupMember at command pipeline position 1 
Supply values for the following parameters: 
Identity: DocumentReaders 
Members[0]: Wilson Pais 
Members[1]: </dev:code>
  			<dev:remarks>
 				<maml:para>Confirm 
Are you sure you want to perform this action? 
Performing operation &quot;Set&quot; on Target &quot;CN=DocumentReaders,CN=Users,DC=Fabrikam,DC=com&quot;. 
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Remove the user 'WilsonPais' from the DocumentReaders group using the default behavior. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroup -server localhost:60000 &quot;CN=AccessControl,DC=AppNC&quot; | remove-adgroupmember -member &quot;CN=GlenJohns,DC=AppNC&quot; </dev:code>
  			<dev:remarks>
 				<maml:para>Confirm 
Are you sure you want to perform this action? 
Performing operation &quot;Set&quot; on Target &quot;CN=AccessControl,DC=AppNC&quot;. 
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Remove the user with DistinguishedName 'CN=GlenJohns,DC=AppNC' from the AccessControl group on an AD LDS instance using the pipeline.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144982</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADPrincipalGroupMembership
		</command:name>
		<maml:description>
			<maml:para>Removes a member from one or more Active Directory groups. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADPrincipalGroupMembership</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADPrincipalGroupMembership cmdlet removes a user, group, computer, service account, or any other account object from one or more Active Directory groups. 

The Identity parameter specifies the user, group, or computer to remove. You can identify the user, group, or computer by its distinguished name (DN), GUID, security identifier (SID) or SAM account name. You can also specify a user, group, or computer object variable, such as $&lt;localGroupObject&gt;, or pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADUser cmdlet to retrieve a user object and then pass the object through the pipeline to the Remove-ADPrincipalGroupMembership cmdlet. Similarly, you can use Get-ADGroup or Get-ADComputer to get group, service account and computer objects to pass through the pipeline.

This cmdlet collects all of the user, computer, service account and group objects from the pipeline, and then removes these objects from the specified group by using one Active Directory operation.

The MemberOf parameter specifies the groups that you want to remove the member from. You can identify a group by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also specify group object variable, such as $&lt;localGroupObject&gt;. To specify more than one group, use a comma-separated list. You cannot pass group objects through the pipeline to the MemberOf parameter. To remove a member from groups that are passed through the pipeline, use the Remove-ADGroupMember cmdlet.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADPrincipalGroupMembership</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory principal object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  - Microsoft.ActiveDirectory.Management.ADGroup
  - Microsoft.ActiveDirectory.Management.ADUser
  - Microsoft.ActiveDirectory.Management.ADComputer
  - Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a principal object instance named &quot;principalInstance&quot;.
  -Identity $principalInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>MemberOf</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory groups to add a user, computer, or group to as a member. You can identify a group by providing one of the following values. Note: The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,CN=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

If you are specifying more than one group, use commas to separate the groups in the list.

The following example shows how to specify this parameter by using SAM account name values.
  -MemberOf &quot;SaraDavisGroup&quot;, &quot;JohnSmithGroup&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADGroup[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory principal object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  - Microsoft.ActiveDirectory.Management.ADGroup
  - Microsoft.ActiveDirectory.Management.ADUser
  - Microsoft.ActiveDirectory.Management.ADComputer
  - Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a principal object instance named &quot;principalInstance&quot;.
  -Identity $principalInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>MemberOf</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory groups to add a user, computer, or group to as a member. You can identify a group by providing one of the following values. Note: The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,CN=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

If you are specifying more than one group, use commas to separate the groups in the list.

The following example shows how to specify this parameter by using SAM account name values.
  -MemberOf &quot;SaraDavisGroup&quot;, &quot;JohnSmithGroup&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADGroup[]</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADPrincipal</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A principal object that represents user, computer, or group is received by the Identity parameter. Derived types, such as the following are also received by this parameter.
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADGroup
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADPrincipal</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns a principal object that represents the modified user, computer or group object when the PassThru parameter is specified. By default, this cmdlet does not generate any output. 
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADPrincipalGroupMembership -Identity &quot;Wilson Pais&quot; -MemberOf &quot;Administrators&quot; </dev:code>
  			<dev:remarks>
 				<maml:para>Remove members from group 
Do you want to remove all the specified member(s) from the specified group(s)? 
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): Y</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Remove the user 'Wilson Pais' from the administrators group. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADPrincipalGroupMembership 
cmdlet Remove-ADPrincipalGroupMembership at command pipeline position 1 
Supply values for the following parameters: 
Identity: Kim Abercrombie 
MemberOf[0]: Administrators 
MemberOf[1]: AccessControl 
MemberOf[2]: </dev:code>
  			<dev:remarks>
 				<maml:para>Remove members from group 
Do you want to remove all the specified member(s) from the specified group(s)? 
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;Y&quot;): Y</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Remove the user 'Kim Abercrombie' from the Administrators and AccessControl groups using the default behavior.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-aduser -server localhost:60000 -Identity &quot;CN=GlenJohns,DC=AppNC&quot; | remove-adprincipalgroupmembership -memberof &quot;CN=AccessControl,DC=AppNC&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Retrieve the user with DistinguishedName 'CN=GlenJohns,DC=AppNC' and remove it from the group with the DistinguishedName 'CN=AccessControl,DC=AppNC' using the pipeline.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144983</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADFineGrainedPasswordPolicySubject
		</command:name>
		<maml:description>
			<maml:para>Removes one or more users from a fine grained password policy.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADFineGrainedPasswordPolicySubject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADFineGrainedPasswordPolicySubject cmdlet removes one or more global security groups and users from a fine grained password policy.

The Identity parameter specifies the fine grained password policy. You can identify a fine grained password policy by its distinguished name or GUID. You can also set the Identity parameter to a fine grained password policy object variable, such as $&lt;localFineGrainedPasswordPolicyObject&gt;, or pass a fine grained password policy object through the pipeline to the Identity parameter. For example, you can use the Get-ADFineGrainedPasswordPolicy cmdlet to retrieve a fine grained password policy object and then pass the object through the pipeline to the Remove-ADFineGrainedPasswordPolicySubject cmdlet. 

The Subjects parameter specifies the users and groups to remove from the password policy. You can identify a user or group by its distinguished name (DN), GUID, security identifier (SID), security accounts manager (SAM) account name, or canonical name. You can also specify user or group object variables, such as $&lt;localUserObject&gt;. If you are specifying more than one user or group, use a comma-separated list.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADFineGrainedPasswordPolicySubject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="2">
				<maml:name>Subjects</maml:name>
				<maml:description>
					<maml:para>Specifies one or more users or groups. To specify more than one user or group, use a comma-separated list. You can identify a user or group by one of the following property values.
  Distinguished Name (DN)
    Example: CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

Note: The identifier in parentheses is the LDAP display name for the attribute.

You can also provide objects to this parameter directly.

The following example shows how to set this parameter to a list of users and groups by using a distinguished name and SAM account names.
  -Subjects &quot;CN=SaraDavis, CN=Users,DC=corp,DC=contoso,DC=com&quot;,&quot;donhall&quot;,&quot;saradavisreports&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="2">
			<maml:name>Subjects</maml:name>
			<maml:description>
				<maml:para>Specifies one or more users or groups. To specify more than one user or group, use a comma-separated list. You can identify a user or group by one of the following property values.
  Distinguished Name (DN)
    Example: CN=SaraDavis,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

Note: The identifier in parentheses is the LDAP display name for the attribute.

You can also provide objects to this parameter directly.

The following example shows how to set this parameter to a list of users and groups by using a distinguished name and SAM account names.
  -Subjects &quot;CN=SaraDavis, CN=Users,DC=corp,DC=contoso,DC=com&quot;,&quot;donhall&quot;,&quot;saradavisreports&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A fine grained password policy object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns an object that represents the modified fine grained password policy object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADFineGrainedPasswordPolicySubject DlgtdAdminsPSO -Subjects BobKe,KimAb
</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove the Fine-Grained Password Policy named 'DlgtdAdminsPSO' from two users, with SamAccountNames 'BobKe' and 'KimAb'.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADFineGrainedPasswordPolicySubject  DlgtdAdminsPSO | where {$_.Name -like &quot;*Price&quot;} | Remove-ADFineGrainedPasswordPolicySubject DlgtdAdminsPSO</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove any subjects that have names ending with 'Price' from the name list on which the Fine-Grained Password Policy named DlgtdAdminsPSO applies.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=145019</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADFineGrainedPasswordPolicySubject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADFineGrainedPasswordPolicySubject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADDomainControllerPasswordReplicationPolicy
		</command:name>
		<maml:description>
			<maml:para>Removes users, computers and groups from the allowed or denied list of a read-only domain controller password replication policy.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADDomainControllerPasswordReplicationPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADDomainControllerPasswordReplicationPolicy cmdlet removes one or more users, computers and groups from the allowed or denied list of a read-only domain controller (RODC) password replication policy. 

The Identity parameter specifies the RODC that uses the allowed and denied lists to apply the password replication policy. You can identify a domain controller by its GUID, IPV4Address, global IPV6Address, or DNS host name. You can also identify a domain controller by the name of the server object that represents the domain controller, the Distinguished Name (DN) of the NTDS settings object or the server object, the GUID of the NTDS settings object or the server object under the configuration partition, or the DN of the computer object that represents the domain controller. You can also set the Identity parameter to a domain controller object variable, such as $&lt;localDomainControllerobject&gt;, or pass a domain controller object through the pipeline to the Identity parameter. For example, you can use the Get-ADDomainController cmdlet to retrieve a domain controller object and then pass the object through the pipeline to the Remove-ADDomainControllerPasswordReplicationPolicy cmdlet. You must provide a read-only domain controller. 

The AllowedList parameters specify the users, computers and groups to remove from the allowed list. Similarly, the DeniedList parameter specifies the users, computers and groups to remove from the denied list. You must specify either one or both of the AllowedList and DeniedList parameters. You can identify a user, computer or group by distinguished name (DN), GUID, security identifier (SID) or security accounts manager (SAM) account name. You can also specify user, computer or group variables, such as $&lt;localUserObject&gt;. If you are specifying more than one item, use a comma-separated list. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADDomainControllerPasswordReplicationPolicy</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllowedList</maml:name>
				<maml:description>
					<maml:para>Specifies the users, computers, groups, or other accounts to remove from the list of accounts allowed to replicate their passwords to this Read-only domain controller (RODC). You can specify more than one value by using a comma-separated list. To identify each user, computer, or group, use one of the following property values:
  Distinguished name 
      Example:  CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com
  GUID  (objectGUID) 
      Example:  599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security identifier (objectSid) 
      Example:  S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name (sAMAccountName) 
      Example:  saradavis

The following example shows how to specify a group and user by using a SAM account name and a distinguished name.
  -AllowedList &quot;SaraDavisGroup&quot;, &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. Unless specified otherwise, these values are for the server object that represents the domain controller.

  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name of the NTDS Settings object.
  -Identity &quot;CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso&quot;

This example shows how to set this parameter to a domain controller object instance named &quot;AD_DCInstance&quot;.
  -Identity $AD_DCInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Remove-ADDomainControllerPasswordReplicationPolicy</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>DeniedList</maml:name>
				<maml:description>
					<maml:para>Specifies the users, computers, groups or other accounts to remove from the list of accounts denied to replicate their passwords to this Read-only domain controller (RODC). You can specify more than one value by using a comma-separated list. To identify each user, computer, group, or other account, use one of the following property values:
  Distinguished name 
      Example: CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com
  GUID  (objectGUID) 
      Example:  599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security identifier (objectSid) 
      Example:  S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
      Example:  saradavis

The following example shows how to specify a group and user by using a SAM account name and a distinguished name.
  -DeniedList &quot;SaraDavisGroup&quot;, &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. Unless specified otherwise, these values are for the server object that represents the domain controller.

  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name of the NTDS Settings object.
  -Identity &quot;CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso&quot;

This example shows how to set this parameter to a domain controller object instance named &quot;AD_DCInstance&quot;.
  -Identity $AD_DCInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>AllowedList</maml:name>
			<maml:description>
				<maml:para>Specifies the users, computers, groups, or other accounts to remove from the list of accounts allowed to replicate their passwords to this Read-only domain controller (RODC). You can specify more than one value by using a comma-separated list. To identify each user, computer, or group, use one of the following property values:
  Distinguished name 
      Example:  CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com
  GUID  (objectGUID) 
      Example:  599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security identifier (objectSid) 
      Example:  S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name (sAMAccountName) 
      Example:  saradavis

The following example shows how to specify a group and user by using a SAM account name and a distinguished name.
  -AllowedList &quot;SaraDavisGroup&quot;, &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>DeniedList</maml:name>
			<maml:description>
				<maml:para>Specifies the users, computers, groups or other accounts to remove from the list of accounts denied to replicate their passwords to this Read-only domain controller (RODC). You can specify more than one value by using a comma-separated list. To identify each user, computer, group, or other account, use one of the following property values:
  Distinguished name 
      Example: CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com
  GUID  (objectGUID) 
      Example:  599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security identifier (objectSid) 
      Example:  S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
      Example:  saradavis

The following example shows how to specify a group and user by using a SAM account name and a distinguished name.
  -DeniedList &quot;SaraDavisGroup&quot;, &quot;CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADPrincipal[]</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. Unless specified otherwise, these values are for the server object that represents the domain controller.

  GUID (objectGUID)
    Example: 768c44de-f72d-66e0-8a88-0523ca495f20 
  IPV4Address
    Example:157.59.132.61
  Global IPV6Address 
    Example: 2001:4898:0:fff:200:5efe:157.59.132.61
  DNS Host Name (dNSHostName)
    Example: corp-DC01.corp.contoso.com
  Name of the server object
    Example: corp-DC01$
  Distinguished Name of the NTDS Settings object
    Example: CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso
  Distinguished Name of the server object that represents the domain controller
    Example: CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso,DC=com
  GUID of NTDS settings object under the configuration partition
    Example: 68adaf21-e28d-6012-bca8-320d93450ab0
  GUID of server object under the configuration partition
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20
  Distinguished Name of the computer object that represents the domain controller.
    Example: CN=CORP-DC12,OU=Domain Controllers,DC=corp,DC=contoso,DC=com

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name of the NTDS Settings object.
  -Identity &quot;CN=NTDS Settings,CN=CORP-DC12,CN=Servers,CN=NA-CAN-QBC,CN=Sites,CN=Configuration,DC=corp,DC=contoso&quot;

This example shows how to set this parameter to a domain controller object instance named &quot;AD_DCInstance&quot;.
  -Identity $AD_DCInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomainController</command:parameterValue>
			<dev:type>
				<maml:name>ADDomainController</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADDomainController</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A read-only domain controller (RODC) object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADDomainController</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified read-only domain controller object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADDomainControllerPasswordReplicationPolicy -Identity &quot;FABRIKAM-RODC1&quot; -AllowedList &quot;JesperAaberg&quot;, &quot;AdrianaAdams&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove the users with samAccountNames 'JesperAaberg' and'AdrianaAdams' from the Allowed list on the RODC 'FABRIKAM-RODC1'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADDomainControllerPasswordReplicationPolicy -Identity &quot;FABRIKAM-RODC1&quot; -DeniedList &quot;MichaelAllen&quot;, &quot;ElizabethAndersen&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove the users with samAccountNames 'MichaelAllen' and 'ElizabethAndersen' from the Denied list on the RODC 'FABRIKAM-RODC1'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144984</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADDomainController</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add- ADDomainControllerPasswordReplicationPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get- ADDomainControllerPasswordReplicationPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADServiceAccount
		</command:name>
		<maml:description>
			<maml:para>Remove an Active Directory service account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADServiceAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADServiceAccount cmdlet removes an Active Directory service account. This cmdlet does not make changes to any computers that use the service account. After this operation, the service account is no longer hosted on the target computer but still exists in the directory.

The Identity parameter specifies the Active Directory service account to remove. You can identify a service account by its distinguished name (DN), GUID, security identifier (SID) or security accounts manager (SAM) account name. You can also set the Identity parameter to a service account object variable, such as $&lt;localSerivceAccountObject&gt;, or you can pass a service account object through the pipeline to the Identity parameter. For example, you can use the Get-ADServiceAccount cmdlet to retrieve a service account object and then pass the object through the pipeline to the Remove-ADServiceAccount cmdlet. 

Note: Removing the service account is a different operation than uninstalling the service account locally.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A service account object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADServiceAccount -Identity SQL-SRV1
</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove the service account named 'service1'.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADServiceAccount -Filter {Name -like 'SQL*'} | Remove-ADServiceAccount </dev:code>
  			<dev:remarks>
  			        <maml:para>Remove all service accounts with names that start with 'SQL'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144985</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Install-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Uninstall-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ADComputerServiceAccount
		</command:name>
		<maml:description>
			<maml:para>Removes one or more service accounts from a computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>ADComputerServiceAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ADComputerServiceAccount cmdlet removes service accounts from an Active Directory computer.

The Computer parameter specifies the Active Directory computer that contains the service accounts to remove. You can identify a computer by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the Computer parameter to a computer object variable, such as $&lt;localComputerobject&gt;, or pass a computer object through the pipeline to the Computer parameter. For example, you can use the Get-ADComputer cmdlet to retrieve a computer object and then pass the object through the pipeline to the Remove-ADComputerServiceAccount cmdlet. 

The ServiceAccount parameter specifies the service accounts to remove. You can identify a service account by its distinguished name (DN), GUID, security identifier (SID) or security accounts manager (SAM) account name. You can also specify service account object variables, such as $&lt;localServiceAccountObject&gt;. If you are specifying more than one service account, use a comma-separated list. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ADComputerServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>ServiceAccount</maml:name>
				<maml:description>
					<maml:para>Specifies one or more Active Directory service accounts. You can identify a service account by using one of the following property values: 
  Distinguished Name 
    Example: CN=serviceadmin,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
   GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
   SAM Account Name (sAMAccountName) 
    Example: serviceadmin

The following example shows how to specify a service account for this parameter using the SAM Account Name.
  -ServiceAccount &quot;serviceAdminEurope&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ADServiceAccount[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			<dev:type>
				<maml:name>ADComputer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>ServiceAccount</maml:name>
			<maml:description>
				<maml:para>Specifies one or more Active Directory service accounts. You can identify a service account by using one of the following property values: 
  Distinguished Name 
    Example: CN=serviceadmin,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
   GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
   SAM Account Name (sAMAccountName) 
    Example: serviceadmin

The following example shows how to specify a service account for this parameter using the SAM Account Name.
  -ServiceAccount &quot;serviceAdminEurope&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ADServiceAccount[]</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A computer object is received by the Computer parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns an object that represents the modified computer object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADComputerServiceAccount -Computer ComputerAcct1 -serviceAccount SvcAcct1 
</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove a service account 'SvcAcct1' from a Computer Account 'ComputerAcct1'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-ADComputerServiceAccount  -Computer ComputerAcct1 -serviceAccount SvcAcct1,SvcAcct2</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove service accounts: 'SvcAcct1,SvcAcct2' from a Computer Account: 'ComputerAcct1'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144986</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Rename-ADObject
		</command:name>
		<maml:description>
			<maml:para>Changes the name of an Active Directory object. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Rename</command:verb>
		<command:noun>ADObject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Rename-ADObject cmdlet renames an Active Directory object. This cmdlet sets the Name property of an Active Directory object that has an LDAP Display Name (ldapDisplayName) of &quot;name&quot;. To modify the given name, surname and other name of a user, use the Set-ADUser cmdlet. To modify the Security Accounts Manager (SAM) account name of a user, computer, or group, use the Set-ADUser, Set-ADComputer or Set-ADGroup cmdlet.

The Identity parameter specifies the object to rename. You can identify an object or container by its distinguished name (DN) or GUID. You can also set the Identity parameter to an object variable such as $&lt;localObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADObject cmdlet to retrieve an object and then pass the object through the pipeline to the Rename-ADObject cmdlet. You can also use the Get-ADGroup, Get-ADUser, Get-ADComputer, Get-ADServiceAccount, Get-ADOrganizationalUnit and Get-ADFineGrainedPasswordPolicy cmdlets to get an object that you can pass through the pipeline to this cmdlet.

The NewName parameter defines the new name for the object and must be specified. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Rename-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>NewName</maml:name>
				<maml:description>
					<maml:para>Specifies the new name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;.

The following example shows how to set this parameter to a name string.
  -NewName &quot;SaraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>NewName</maml:name>
			<maml:description>
				<maml:para>Specifies the new name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;.

The following example shows how to set this parameter to a name string.
  -NewName &quot;SaraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADObject</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An Active Directory object is received by the Identity parameter.

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADOrganizationalUnit
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy

				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Rename-ADObject -Identity &quot;CN=HQ,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM&quot; -NewName UnitedKingdomHQ</dev:code>
  			<dev:remarks>
  			        <maml:para>Rename the name of an existing site 'HQ' to the new name 'UnitedKingdomHQ'. If the distinguished name is provided in the -Identity parameter, then the -Partition parameter is not required.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Rename-ADObject -Identity &quot;4777c8e8-cd29-4699-91e8-c507705a0966&quot; -NewName &quot;AmsterdamHQ&quot; -Partition &quot;CN=Configuration,DC=FABRIKAM,DC=COM&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Rename the object with objectGUID '4777c8e8-cd29-4699-91e8-c507705a096'6 to 'SiteNewName'. Note -Partition parameter is required because the Naming Context of the site object is not known from the GUID provided to the -Identity parameter. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Rename-ADObject &quot;OU=ManagedGroups,OU=Managed,DC=Fabrikam,DC=Com&quot; -NewName Groups</dev:code>
  			<dev:remarks>
  			        <maml:para>Rename the object with the DistinguisehdName 'OU=ManagedGroups,OU=Managed,DC=Fabrikam,DC=Com' to 'Groups'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Rename-ADObject -Identity &quot;4777c8e8-cd29-4699-91e8-c507705a0966&quot; -NewName &quot;DavidAhs&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Rename the object with objectGUID '4777c8e8-cd29-4699-91e8-c507705a0966' to 'DavidAhs'. Note that the -Partition parameter is not specified because the object is in the Default Naming Context of the domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Rename-ADObject &quot;CN=Apps,DC=AppNC&quot; -NewName &quot;InternalApps&quot; -server &quot;FABRIKAM-SRV1:60000&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Rename the container 'CN=Apps,DC=AppNC' to 'InternalApps' in an LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144987</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restore-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText></maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Restore-ADObject
		</command:name>
		<maml:description>
			<maml:para>Restores an Active Directory object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Restore</command:verb>
		<command:noun>ADObject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Restore-ADObject cmdlet restores a deleted Active Directory object. 

The NewName parameter specifies the new name for the restored object. If the NewName parameter is not specified, the value of the Active Directory attribute with an LDAP display name of &quot;msDS-lastKnownRDN&quot; is used. The TargetPath parameter specifies the new location for the restored object. If the TargetPath is not specified, the value of the Active Directory attribute with an LDAP display name of &quot;lastKnownParent&quot; is used.

The Identity parameter specifies the Active Directory object to restore. You can identify an object by its distinguished name (DN) or GUID. You can also set the Identity parameter to an object variable such as $&lt;localObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADObject cmdlet to retrieve a deleted object by specifying the IncludeDeletedObjects parameter. You can then pass the object through the pipeline to the Restore-ADObject cmdlet. 

Note: You can get the distinguished names of deleted objects by using the Get-ADObject cmdlet with the -IncludedeDeletedObjects parameter specified.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Restore-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NewName</maml:name>
				<maml:description>
					<maml:para>Specifies the new name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;.

The following example shows how to set this parameter to a name string.
  -NewName &quot;SaraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TargetPath</maml:name>
				<maml:description>
					<maml:para>Specifies the new location for the object. This location must be the path to a container or organizational unit.

The following example shows how to specify a target path by providing the distinguished name.
  -TargetPath &quot;ou=sales,dc=corp,dc=contoso,dc=com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthtype</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthtype</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NewName</maml:name>
			<maml:description>
				<maml:para>Specifies the new name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name (ldapDisplayName) of this property is &quot;name&quot;.

The following example shows how to set this parameter to a name string.
  -NewName &quot;SaraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>TargetPath</maml:name>
			<maml:description>
				<maml:para>Specifies the new location for the object. This location must be the path to a container or organizational unit.

The following example shows how to specify a target path by providing the distinguished name.
  -TargetPath &quot;ou=sales,dc=corp,dc=contoso,dc=com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADObject</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An Active Directory object is received by the Identity parameter. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADOrganizationalUnit
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the restored object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Restore-ADObject -Identity &quot;613dc90a-2afd-49fb-8bd8-eac48c6ab59f&quot; -NewName &quot;Kim Abercrombie&quot; -TargetPath &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Restores the ADObject while setting the 'msDS-LastKnownRDN' attribute of the deleted object to -NewName parameter and setting the 'lastKnownRDN' to the -TargetPath parameter.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Restore-ADObject -Identity &quot;CN=Kim Abercrombie\0ADEL:613dc90a-2afd-49fb-8bd8-eac48c6ab59f,CN=Deleted Objects,DC=FABRIKAM,DC=COM&quot; -NewName &quot;Kim Abercrombie&quot; -TargetPath &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Restores the ADObject while setting the 'msDS-LastKnownRDN' attribute of the deleted object to -NewName parameter and setting the 'lastKnownRDN' to the -TargetPath parameter.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADObject -Filter 'samaccountname -eq &quot;kimabercrombie&quot;' -IncludeDeletedObjects | Restore-ADObject</dev:code>
  			<dev:remarks>
  			        <maml:para>Find a deleted user whose samaccountname is kimabercrombie, and restore it.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Restore-ADObject  -Identity '6bb3bfe9-4355-48ee-b3b6-4fda6917d31d' -Server server1:50000 </dev:code>
  			<dev:remarks>
  			        <maml:para>Restore an AD-LDS object using ObjectGUID.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADObject -Filter 'msds-lastknownrdn -eq &quot;user1&quot;'  -Server server1:50000 -IncludeDeletedObjects -SearchBase &quot;o=app1,c=us&quot; | Restore-ADObject </dev:code>
  			<dev:remarks>
  			        <maml:para>Restore an AD-LDS object using msds-LastKnownRDN.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144988</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText></maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Search-ADAccount
		</command:name>
		<maml:description>
			<maml:para>Gets Active Directory user, computer, or service accounts.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Search</command:verb>
		<command:noun>ADAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Search-ADAccount cmdlet retrieves one or more user, computer, or service accounts that meet the criteria specified by the parameters. Search criteria include account and password status. For example, you can search for all accounts that have expired by specifying the AccountExpired parameter. Similarly, you can search for all accounts with an expired password by specifying the PasswordExpired parameter. You can limit the search to user accounts by specifying the UsersOnly parameter. Similarly, when you specify the ComputersOnly parameter, the cmdlet only retrieves computer accounts.

Some search parameters, such as AccountExpiring and AccountInactive use a default time that you can change by specifying the DateTime or TimeSpan parameter. The DateTime parameter specifies a distinct time. The TimeSpan parameter specifies a time range from the current time. For example, to search for all accounts that expire in 10 days, specify the AccountExpiring and TimeSpan parameter and set the value of TimeSpan to &quot;10.00:00:00&quot;. To search for all accounts that expire before December 31, 2012, set the DateTime parameter to &quot;12/31/2012&quot;. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Search-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountDisabled</maml:name>
				<maml:description>
					<maml:para>Specifies a search for accounts that are disabled. An account is disabled when the ADAccount Enabled property is set to false. 

The following example shows how to specify the AccountDisabled parameter.
  -AccountDisabled</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComputersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search of only computer accounts.

The following example shows how to specify this parameter.
  -ComputersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UsersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search for user accounts only. 

The following example shows how to specify this parameter.
  -UsersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Search-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountExpired</maml:name>
				<maml:description>
					<maml:para>Specifies a search for accounts that are expired. An account is expired when the ADAccount AccountExpirationDate property is set to a time in the past. The LDAP Display Name (ldapDisplayName) for the AccountExpirationDate property is accountExpires.

The following example shows how to specify the AccountExpired parameter.
  -AccountExpired</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComputersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search of only computer accounts.

The following example shows how to specify this parameter.
  -ComputersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UsersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search for user accounts only. 

The following example shows how to specify this parameter.
  -UsersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Search-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountExpiring</maml:name>
				<maml:description>
					<maml:para>Specifies a search for accounts that are expiring in a given time period or by a specified time. To specify a time period, use the AccountExpiring parameter with the TimeSpan parameter. To specify a specific time, use the AccountExpiring parameter with the DateTime parameter. 

The following example shows how to specify a search for accounts that expire in the next 10 days.
  -AccountExpiring -TimeSpan 10

The following example shows how to specify a search for accounts that expire before June 18, 2012 at 2:00 AM.
  -AccountExpiring -DateTime &quot;6/18/2012 2:00:00 AM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DateTime</maml:name>
				<maml:description>
					<maml:para>Specifies a distinct time value for Search-ADAccount parameters such as AccountExpiring, AccountInactive, and PasswordExpiring.

Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to midnight local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC.
  &quot;2000-04-17T14:22:48.0000000&quot; 

The following example shows how to set the AccountExpiring parameter to a DateTime value of June 18, 2012 at 2:00:00 AM.

  -AccountExpiring -DateTime &quot;6/18/2012 2:00:00 AM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TimeSpan</maml:name>
				<maml:description>
					<maml:para>Sets a time interval. This parameter is used to specify a time value for Search-ADAccount parameters such as AccountExpiring.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time to 2 days
    -TimeSpan &quot;2&quot;
  Set the time span to the previous 2 days
   -TimeSpan &quot;-2&quot;
  Set the time to 4 hours
    -TimeSpan &quot;4:00&quot;

For example, to search for all accounts that are expiring in 10 days, specify the AccountExpiring and TimeSpan parameters as follows.

  -AccountExpiring -TimeSpan &quot;10&quot;
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">TimeSpan</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComputersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search of only computer accounts.

The following example shows how to specify this parameter.
  -ComputersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UsersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search for user accounts only. 

The following example shows how to specify this parameter.
  -UsersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Search-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountInactive</maml:name>
				<maml:description>
					<maml:para>Specifies to search for accounts that have not logged in within a given time period or since a specified time. To specify a time period, use the TimeSpan parameter. To specify a specific time, use the DateTime parameter. Note that this attribute is only used when the domain is in Windows Server 2003 Domain Functional Level, so this parameter will only work in that mode.

The following example shows how to set this parameter to search for accounts that have been inactive for the past 10 days.
  -AccountInactive -TimeSpan 10

The following example shows how to set this parameter to search for accounts that have been inactive since July 16, 2008 at 12:00 AM.
  -AccountInactive  -DateTime &quot;7/16/2008&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DateTime</maml:name>
				<maml:description>
					<maml:para>Specifies a distinct time value for Search-ADAccount parameters such as AccountExpiring, AccountInactive, and PasswordExpiring.

Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to midnight local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC.
  &quot;2000-04-17T14:22:48.0000000&quot; 

The following example shows how to set the AccountExpiring parameter to a DateTime value of June 18, 2012 at 2:00:00 AM.

  -AccountExpiring -DateTime &quot;6/18/2012 2:00:00 AM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TimeSpan</maml:name>
				<maml:description>
					<maml:para>Sets a time interval. This parameter is used to specify a time value for Search-ADAccount parameters such as AccountExpiring.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time to 2 days
    -TimeSpan &quot;2&quot;
  Set the time span to the previous 2 days
   -TimeSpan &quot;-2&quot;
  Set the time to 4 hours
    -TimeSpan &quot;4:00&quot;

For example, to search for all accounts that are expiring in 10 days, specify the AccountExpiring and TimeSpan parameters as follows.

  -AccountExpiring -TimeSpan &quot;10&quot;
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">TimeSpan</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComputersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search of only computer accounts.

The following example shows how to specify this parameter.
  -ComputersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UsersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search for user accounts only. 

The following example shows how to specify this parameter.
  -UsersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Search-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LockedOut</maml:name>
				<maml:description>
					<maml:para>Specifies a search for accounts that are locked out.

The following example shows how to specify a search for accounts that are locked out.
  -LockedOut</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComputersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search of only computer accounts.

The following example shows how to specify this parameter.
  -ComputersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UsersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search for user accounts only. 

The following example shows how to specify this parameter.
  -UsersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Search-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordExpired</maml:name>
				<maml:description>
					<maml:para>Specifies a search for accounts that have an expired password. 

The following example shows how to specify this parameter.
  -PasswordExpired</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComputersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search of only computer accounts.

The following example shows how to specify this parameter.
  -ComputersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UsersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search for user accounts only. 

The following example shows how to specify this parameter.
  -UsersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Search-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordNeverExpires</maml:name>
				<maml:description>
					<maml:para>Specifies a search for accounts that have a password that does not expire.

The following example shows how to specify the PasswordNeverExpires parameter.
   -PasswordNeverExpires </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComputersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search of only computer accounts.

The following example shows how to specify this parameter.
  -ComputersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultPageSize</maml:name>
				<maml:description>
					<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ResultSetSize</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchBase</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SearchScope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Base</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OneLevel</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Subtree</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UsersOnly</maml:name>
				<maml:description>
					<maml:para>Specifies a search for user accounts only. 

The following example shows how to specify this parameter.
  -UsersOnly</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountDisabled</maml:name>
			<maml:description>
				<maml:para>Specifies a search for accounts that are disabled. An account is disabled when the ADAccount Enabled property is set to false. 

The following example shows how to specify the AccountDisabled parameter.
  -AccountDisabled</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountExpired</maml:name>
			<maml:description>
				<maml:para>Specifies a search for accounts that are expired. An account is expired when the ADAccount AccountExpirationDate property is set to a time in the past. The LDAP Display Name (ldapDisplayName) for the AccountExpirationDate property is accountExpires.

The following example shows how to specify the AccountExpired parameter.
  -AccountExpired</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountExpiring</maml:name>
			<maml:description>
				<maml:para>Specifies a search for accounts that are expiring in a given time period or by a specified time. To specify a time period, use the AccountExpiring parameter with the TimeSpan parameter. To specify a specific time, use the AccountExpiring parameter with the DateTime parameter. 

The following example shows how to specify a search for accounts that expire in the next 10 days.
  -AccountExpiring -TimeSpan 10

The following example shows how to specify a search for accounts that expire before June 18, 2012 at 2:00 AM.
  -AccountExpiring -DateTime &quot;6/18/2012 2:00:00 AM&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountInactive</maml:name>
			<maml:description>
				<maml:para>Specifies to search for accounts that have not logged in within a given time period or since a specified time. To specify a time period, use the TimeSpan parameter. To specify a specific time, use the DateTime parameter. Note that this attribute is only used when the domain is in Windows Server 2003 Domain Functional Level, so this parameter will only work in that mode.

The following example shows how to set this parameter to search for accounts that have been inactive for the past 10 days.
  -AccountInactive -TimeSpan 10

The following example shows how to set this parameter to search for accounts that have been inactive since July 16, 2008 at 12:00 AM.
  -AccountInactive  -DateTime &quot;7/16/2008&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ComputersOnly</maml:name>
			<maml:description>
				<maml:para>Specifies a search of only computer accounts.

The following example shows how to specify this parameter.
  -ComputersOnly</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DateTime</maml:name>
			<maml:description>
				<maml:para>Specifies a distinct time value for Search-ADAccount parameters such as AccountExpiring, AccountInactive, and PasswordExpiring.

Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to midnight local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC.
  &quot;2000-04-17T14:22:48.0000000&quot; 

The following example shows how to set the AccountExpiring parameter to a DateTime value of June 18, 2012 at 2:00:00 AM.

  -AccountExpiring -DateTime &quot;6/18/2012 2:00:00 AM&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			<dev:type>
				<maml:name>DateTime</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LockedOut</maml:name>
			<maml:description>
				<maml:para>Specifies a search for accounts that are locked out.

The following example shows how to specify a search for accounts that are locked out.
  -LockedOut</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordExpired</maml:name>
			<maml:description>
				<maml:para>Specifies a search for accounts that have an expired password. 

The following example shows how to specify this parameter.
  -PasswordExpired</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordNeverExpires</maml:name>
			<maml:description>
				<maml:para>Specifies a search for accounts that have a password that does not expire.

The following example shows how to specify the PasswordNeverExpires parameter.
   -PasswordNeverExpires </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultPageSize</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to include in one page for an Active Directory Domain Services query. 

The default is 256 objects per page. 

The following example shows how to set this parameter.
  -ResultPageSize 500</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ResultSetSize</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $null (null value). You can use Ctrl+c to stop the query and return of objects. 
The default is $null. 
The following example shows how to set this parameter so that you receive all of the returned objects.
  -ResultSetSize $null</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchBase</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory path to search under. 

When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.

When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.

When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.

The following example shows how to set this parameter to search under an OU.
  -SearchBase &quot;ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com&quot; 

When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
The following example shows how to set this parameter to an empty string.   -SearchBase &quot;&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SearchScope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope of an Active Directory search. Possible values for this parameter are:
  Base or 0
  OneLevel or 1
  Subtree or 2

A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.

The following example shows how to set this parameter to a subtree search.
  -SearchScope Subtree</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADSearchScope</command:parameterValue>
			<dev:type>
				<maml:name>ADSearchScope</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Subtree</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Base</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OneLevel</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Subtree</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>TimeSpan</maml:name>
			<maml:description>
				<maml:para>Sets a time interval. This parameter is used to specify a time value for Search-ADAccount parameters such as AccountExpiring.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time to 2 days
    -TimeSpan &quot;2&quot;
  Set the time span to the previous 2 days
   -TimeSpan &quot;-2&quot;
  Set the time to 4 hours
    -TimeSpan &quot;4:00&quot;

For example, to search for all accounts that are expiring in 10 days, specify the AccountExpiring and TimeSpan parameters as follows.

  -AccountExpiring -TimeSpan &quot;10&quot;
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">TimeSpan</command:parameterValue>
			<dev:type>
				<maml:name>TimeSpan</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UsersOnly</maml:name>
			<maml:description>
				<maml:para>Specifies a search for user accounts only. 

The following example shows how to specify this parameter.
  -UsersOnly</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more account objects that meet the conditions set by the parameters.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -AccountDisabled | FT Name,ObjectClass -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name            ObjectClass
----            -----------
Guest           user
krbtgt          user
krbtgt_51399    user
AmyAl-LPTOP     computer
DeepakAn-DSKTOP computer
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all users, computers and service accounts that are disabled.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -AccountDisabled -UsersOnly | FT Name,ObjectClass -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name         ObjectClass
----         -----------
Guest        user
krbtgt       user
krbtgt_51399 user
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all users that are disabled.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -AccountExpired | FT Name,ObjectClass -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name            ObjectClass
----            -----------
Greg Chapman    user
Claus Hansen    user
Tomasz Bochenek user
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all users, computers and service accounts that are expired.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -AccountExpiring -TimeSpan 6.00:00:00 | FT Name,ObjectClass -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name           ObjectClass
----           -----------
Iulian Calinov user
John Campbell  user
Garth Fort     user
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all users, computers and service accounts that will expire in the next 6 days.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -AccountInactive -TimeSpan 90.00:00:00 | FT Name,ObjectClass -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name                        ObjectClass
----                        -----------
FABRIKAM-RODC1              computer
Guest                       user
krbtgt                      user
krbtgt_51399                user
Almudena Benito             user
Aaron Con                   user
Adina Hagege                user
Aaron Nicholls              user
Aaron M. Painter            user
Jeff Phillips               user
Flemming Pedersen           use
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all accounts that have been inactive for the last 90 days.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -PasswordExpired | FT Name,ObjectClass -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name                        ObjectClass
----                        -----------
Stan Orme                   user
Danni Ortman                user
Matej Potokar               user
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all accounts where the password has expired.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -PasswordNeverExpires | FT Name,ObjectClass -A
</dev:code>
  			<dev:remarks>
 				<maml:para>Name           ObjectClass
----           -----------
Guest          user
Toni Poe       user
Anders Riis    user
Fabien Hernoux user
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all accounts with a password that will never expire.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -LockedOut | FT Name,ObjectClass -A</dev:code>
  			<dev:remarks>
 				<maml:para>Name           ObjectClass
----           -----------
Toni Poe       user
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all accounts that have been locked out.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 9 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -AccountDisabled -ComputersOnly | FT Name,ObjectClass -A</dev:code>
  			<dev:remarks>
 				<maml:para>Name           ObjectClass
----           -----------
TPOE-PC1       computer
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all disabled computer accounts.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 10 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-ADAccount -AccountExpiring -DateTime &quot;3/18/2009&quot; | FT Name,ObjectClass -A</dev:code>
  			<dev:remarks>
 				<maml:para>Name         ObjectClass
----         -----------
Anders Riis  user

</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all accounts which expire on the 18th of March, 2009.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 11 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Search-AdAccount -AccountDisabled -SearchBase &quot;DC=AppNC&quot; -Server &quot;FABRIKAM-SRV1:60000&quot;</dev:code>
  			<dev:remarks>
 				<maml:para>Enabled               : False
Name                  : SanjayPatel
UserPrincipalName     :
PasswordNeverExpires  :
LockedOut             : False
ObjectGUID            : d671de28-6e40-42a7-b32c-63d336de296d
ObjectClass           : user
SID                   : S-1-510474493-936115905-2231798853-1260534229-4171027843-767619944
PasswordExpired       : False
LastLogonDate         :
DistinguishedName     : CN=SanjayPatel,OU=AccountDeptOU,DC=AppNC
AccountExpirationDate :</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Returns all users, computers and service accounts that are disabled in the LDS instance: &quot;FABRIKAM-SRV1:60000&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144989</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unlock-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountControl</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountExpiration</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ADAccountExpiration</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADAccountPassword</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADAccountResultantPasswordReplicationPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADObject
		</command:name>
		<maml:description>
			<maml:para>Modifies an Active Directory object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADObject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADObject cmdlet modifies the properties of an Active Directory object. You can modify commonly used property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the Add, Replace, Clear and Remove parameters.  

The Identity parameter specifies the Active Directory object to modify. You can identify an object by its distinguished name (DN) or GUID. You can also set the Identity parameter to an object variable such as $&lt;localObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADObject cmdlet to retrieve an object and then pass the object through the pipeline to the Set-ADObject cmdlet.

The Instance parameter provides a way to update an object by applying the changes made to a copy of the object. When you set the Instance parameter to a copy of an Active Directory object that has been modified, the Set-ADObject cmdlet makes the same changes to the original object. To get a copy of the object to modify, use the Get-ADObject object. The Identity parameter is not allowed when you use the Instance parameter. For more information about the Instance parameter, see the Instance parameter description. For more information about how the Instance concept is used in Active Directory cmdlets, see about_ActiveDirectory_Instance.

The following examples show how to modify the DisplayName property of an object by using three methods:
 -By specifying the Identity and the DisplayName parameters
 -By passing an object through the pipeline and specifying the DisplayName parameter
 -By specifying the Instance parameter.

Method 1: Modify the DisplayName property for the SecurityLevel2AccessGroup object by using the Identity and DisplayName parameters. 

 Set-ADObject -Identity &quot;SecurityLevel2AccessGroup&quot; -DisplayName &quot;Security Level 2&quot;

Method 2: Modify the DisplayName property for the SecurityLevel2AccessGroup object by passing the SecurityLevel2AccessGroup object through the pipeline and specifying the DisplayName parameter.

 Get-ADObject -Identity &quot;SecurityLevel2AccessGroup&quot; | Set-ADObject -DisplayName &quot;Security Level 2&quot;

Method 3: Modify the DisplayName property for the SecurityLevel2AccessGroup object by using the Windows PowerShell command line to modify a local instance of the SecurityLevel2AccessGroup object. Then set the Instance parameter to the local instance.

 $adobject = Get-ADObject -Identity &quot;SecurityLevel2AccessGroup&quot;
 $adobject.DisplayName = &quot;Security Level 2&quot; 
 Set-ADObject -Instance $adobject. 

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Add</maml:name>
				<maml:description>
					<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Clear</maml:name>
				<maml:description>
					<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ProtectedFromAccidentalDeletion</maml:name>
				<maml:description>
					<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Remove</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Replace</maml:name>
				<maml:description>
					<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ADObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies a modified copy of an Active Directory object to use to update the actual Active Directory object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update Active Directory objects that have been retrieved by using the Get-ADObject cmdlet.  When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADObject cmdlet to retrieve an instance of the object. The object is modified by using the Windows PowerShell command line. Then the Set-ADObject cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $objectInstance = Get-ADObject -Identity  &quot;CN=someObject, DC=contoso,DC=com&quot;
Step 2: Modify one or more properties of the object instance.
    $objectInstance.Description = &quot;New Description&quot;
Step3: Save your changes to the object
    Set-ADObject -Instance $objectInstance </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Add</maml:name>
			<maml:description>
				<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Clear</maml:name>
			<maml:description>
				<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies a modified copy of an Active Directory object to use to update the actual Active Directory object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update Active Directory objects that have been retrieved by using the Get-ADObject cmdlet.  When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADObject cmdlet to retrieve an instance of the object. The object is modified by using the Windows PowerShell command line. Then the Set-ADObject cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $objectInstance = Get-ADObject -Identity  &quot;CN=someObject, DC=contoso,DC=com&quot;
Step 2: Modify one or more properties of the object instance.
    $objectInstance.Description = &quot;New Description&quot;
Step3: Save your changes to the object
    Set-ADObject -Instance $objectInstance </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADObject</command:parameterValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ProtectedFromAccidentalDeletion</maml:name>
			<maml:description>
				<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Remove</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Replace</maml:name>
			<maml:description>
				<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADObject</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An Active Directory object is received by the Identity parameter. Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADOrganizationalUnit
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

An object that was retrieved by using the Get-ADObject cmdlet and then modified is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADObject 'CN=AntonioAl Direct Reports,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM' -Description 'Distribution List of Antonio Alwan Direct Reports'
</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the Description property on the object with DistinguishedName 'CN=AntonioAl Direct Reports,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADObject 'CN=DEFAULTIPSITELINK,CN=IP,CN=Inter-Site Transports,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM' -Add @{siteList='CN=BO3,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM'} -Partition 'CN=Configuration,DC=FABRIKAM,DC=COM'
</dev:code>
  			<dev:remarks>
  			        <maml:para>Add the site 'CN=BO3,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM' to the property siteList on the object with DistinguishedName 'CN=DEFAULTIPSITELINK,CN=IP,CN=Inter-Site Transports,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$urlValues = @()
$urlValues += &quot;www.contoso.com&quot;
$urlValues += &quot;www.fabrikam.com&quot;

Set-ADObject &quot;cdadd380-d3a8-4fd1-9d30-5cf72d94a056&quot; -Add @{url=$urlValues}</dev:code>
  			<dev:remarks>
  			        <maml:para>Add two new urls to the property urlValues in the object with objectGuid 'cdadd380-d3a8-4fd1-9d30-5cf72d94a056'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$urlValues = @()
$urlValues += &quot;www.contoso.com&quot;
$urlValues += &quot;www.fabrikam.com&quot;

Set-ADObject &quot;cdadd380-d3a8-4fd1-9d30-5cf72d94a056&quot; -Replace @{url=$urlValues;description=&quot;Antonio Alwan&quot;}</dev:code>
  			<dev:remarks>
  			        <maml:para>Replaces the old values of the multi-valued attribute 'url' with the new values and sets the value of the attribute 'description'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADObject &quot;cdadd380-d3a8-4fd1-9d30-5cf72d94a056&quot; -Remove @{url=&quot;www.contoso.com&quot;} -Replace @{description=&quot;Antonio Alwan (European Manager)&quot;}</dev:code>
  			<dev:remarks>
  			        <maml:para>Removes the specified value from the attribute 'url' and sets the value of the attribute 'description'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$myComp = Get-ADObject -identity &quot;cdadd380-d3a8-4fd1-9d30-5cf72d94a056&quot; -Properties &quot;userAccountControl&quot;,&quot;description&quot;

#Now set the new account control using powershell bitwise OR operation (-bor) and set description
$myComp.userAccountControl = $myComp.userAccountControl -bor 50
$myComp.description = &quot;Setting a new UAC on the object&quot;

#Save the changes
Set-ADObject -Instance $myComp</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets a new UAC bit on an object by updating the attribute 'userAccountControl' and setting the value of the attribute 'description'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-adobject &quot;CN=InternalApps,DC=AppNC&quot; -protectedFromAccidentalDeletion $true -server &quot;FABRIKAM-SRV1:60000&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets container &quot;CN=InternalApps,DC=AppNC&quot; in an LDS instance to be protected from accidental deletion</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144990</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADObject</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADUser
		</command:name>
		<maml:description>
			<maml:para>Modifies an Active Directory user.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADUser</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADUser cmdlet modifies the properties of an Active Directory user. You can modify commonly used property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the Add, Replace, Clear and Remove parameters.

The Identity parameter specifies the Active Directory user to modify. You can identify a user by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to an object variable such as $&lt;localUserObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADUser cmdlet to retrieve a user object and then pass the object through the pipeline to the Set-ADUser cmdlet.

The Instance parameter provides a way to update a user object by applying the changes made to a copy of the object. When you set the Instance parameter to a copy of an Active Directory user object that has been modified, the Set-ADUser cmdlet makes the same changes to the original user object. To get a copy of the object to modify, use the Get-ADUser object. The Identity parameter is not allowed when you use the Instance parameter. For more information about the Instance parameter, see the Instance parameter description. For more information about how the Instance concept is used in Active Directory cmdlets, see about_ActiveDirectory_Instance.

The following examples show how to modify the Manager property of a user object by using three methods:
 -By specifying the Identity and the Manager parameters
 -By passing a user object through the pipeline and specifying the Manager parameter
 -By specifying the Instance parameter.

Method 1: Modify the Manager property for the &quot;saraDavis&quot; user by using the Identity and Manager parameters. 

 Set-ADUser -Identity &quot;saraDavis&quot; -Manager &quot;JimCorbin&quot;

Method 2: Modify the Manager property for the &quot;saraDavis&quot; user by passing the &quot;saraDavis&quot; user through the pipeline and specifying the Manager parameter.

 Get-ADUser -Identity &quot;saraDavis&quot; | Set-ADUser -Manager &quot;JimCorbin&quot;

Method 3: Modify the Manager property for the &quot;saraDavis&quot; user by using the Windows PowerShell command line to modify a local instance of the &quot;saraDavis&quot; user. Then set the Instance parameter to the local instance.

 $user = Get-ADUser -Identity &quot;saraDavis&quot;
 $user.Manager = &quot;JimCorbin&quot; 
 Set-ADUser -Instance $user. 

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADUser</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountExpirationDate</maml:name>
				<maml:description>
					<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountNotDelegated</maml:name>
				<maml:description>
					<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Add</maml:name>
				<maml:description>
					<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllowReversiblePasswordEncryption</maml:name>
				<maml:description>
					<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CannotChangePassword</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the account password can be changed.
  -CannotChangePassword $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Certificates</maml:name>
				<maml:description>
					<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ChangePasswordAtLogon</maml:name>
				<maml:description>
					<maml:para>Specifies whether a password must be changed during the next logon attempt. Possible values for this parameter include:
  $false or 0
  $true or 1

This parameter cannot be set to $true or 1 for an account that also has the PasswordNeverExpires property set to true.

The following example shows how to set this parameter so that the password must be changed at logon.
  -ChangePasswordAtLogon $true </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>City</maml:name>
				<maml:description>
					<maml:para>Specifies the user's town or city. This parameter sets the City property of a user. The LDAP display name (ldapDisplayName) of this property is &quot;l&quot;.

The following example shows how set this parameter.
  -City &quot;Las Vegas&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Clear</maml:name>
				<maml:description>
					<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Company</maml:name>
				<maml:description>
					<maml:para>Specifies the user's company. This parameter sets the Company property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;company&quot;. 

The following example shows how to set this parameter.
  -Company &quot;Contoso&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Country</maml:name>
				<maml:description>
					<maml:para>Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;c&quot;. This value is not used by Windows 2000.

The following example shows how set this parameter.
  -Country &quot;IN&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Department</maml:name>
				<maml:description>
					<maml:para>Specifies the user's department. This parameter sets the Department property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;department&quot;. 

The following example shows how to set this parameter.
  -Department &quot;Development&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Division</maml:name>
				<maml:description>
					<maml:para>Specifies the user's division. This parameter sets the Division property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;division&quot;. 

The following example shows how to set this parameter.
  -Division &quot;Software&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>EmailAddress</maml:name>
				<maml:description>
					<maml:para>Specifies the user's e-mail address. This parameter sets the EmailAddress property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;mail&quot;. 

The following example shows how to set this parameter.
  -EmailAddress &quot;saradavis@contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>EmployeeID</maml:name>
				<maml:description>
					<maml:para>Specifies the user's employee ID. This parameter sets the EmployeeID property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;employeeID&quot;. 

The following example shows how to set this parameter.
  -EmployeeID  &quot;A123456&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>EmployeeNumber</maml:name>
				<maml:description>
					<maml:para>Specifies the user's employee number. This parameter sets the EmployeeNumber property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;employeeNumber&quot;. 

The following example shows how set this parameter.
  -EmployeeNumber &quot;12345678&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Enabled</maml:name>
				<maml:description>
					<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Fax</maml:name>
				<maml:description>
					<maml:para>Specifies the user's fax phone number. This parameter sets the Fax property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;facsimileTelephoneNumber&quot;. 

The following example shows how to set this parameter.
  -Fax  &quot;+1 (999) 555 1212&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GivenName</maml:name>
				<maml:description>
					<maml:para>Specifies the user's given name. This parameter sets the GivenName property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;givenName&quot;.

The following example shows how to set this parameter.
  -givenName &quot;Sanjay&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>HomeDirectory</maml:name>
				<maml:description>
					<maml:para>Specifies a user's home directory. This parameter sets the HomeDirectory property of a user object. The LDAP Display Name (ldapDisplayName) for this property is &quot;homeDirectory&quot;.

The following example shows how to set this parameter.
   -HomeDirectory &quot;\\users\saraDavisHomeDir&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>HomeDrive</maml:name>
				<maml:description>
					<maml:para>Specifies a drive that is associated with the UNC path defined by the HomeDirectory property. The drive letter is specified as &quot;&lt;DriveLetter&gt;:&quot; where &lt;DriveLetter&gt; indicates the letter of the drive to associate. The &lt;DriveLetter&gt; must be a single, uppercase letter and the colon is required. This parameter sets the HomeDrive property of the user object. The LDAP Display Name (ldapDisplayName) for this property is &quot;homeDrive&quot;. 

The following example shows how to set this parameter.
   -HomeDrive &quot;D:&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>HomePage</maml:name>
				<maml:description>
					<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>HomePhone</maml:name>
				<maml:description>
					<maml:para>Specifies the user's home telephone number. This parameter sets the HomePhone property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;homePhone&quot;.

The following example shows how to set this parameter.
  -HomePhone  &quot;+1 (999) 555 1212&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Initials</maml:name>
				<maml:description>
					<maml:para>Specifies the initials that represent part of a user's name. You can use this value for the user's middle initial. This parameter sets the Initials property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;initials&quot;.

The following example shows how set this parameter.
  -Initials &quot;L&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LogonWorkstations</maml:name>
				<maml:description>
					<maml:para>Specifies the computers that the user can access. To specify more than one computer, create a single comma-separated list. You can identify a computer by using the Security Accounts Manager (SAM) account name (sAMAccountName) or the DNS host name of the computer. The SAM account name is the same as the NetBIOS name of the computer.

The LDAP display name (ldapDisplayName) for this property is &quot;userWorkStations&quot;. 

The following example shows how to set this parameter by using SAMAccountName (NetBIOS name) and DNSHostName values.
  -LogonWorkstations &quot;saraDavisDesktop,saraDavisLapTop,projectA.corp.contoso.com&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Manager</maml:name>
				<maml:description>
					<maml:para>Specifies the user's manager. This parameter sets the Manager property of a user. This parameter is set by providing one of the following property values.  Note: The identifier in parentheses is the LDAP display name for the property.

  Distinguished Name 
    Example: CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The LDAP Display Name (ldapDisplayName) of this property is &quot;manager&quot;.

The following example shows how to set this parameter.
  -Manager saradavis </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MobilePhone</maml:name>
				<maml:description>
					<maml:para>Specifies the user's mobile phone number. This parameter sets the MobilePhone property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;mobile&quot;.

The following example shows how to set this parameter.
  -MobilePhone  &quot;+1  (999 ) 555 1212&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Office</maml:name>
				<maml:description>
					<maml:para>Specifies the location of the user's office or place of business. This parameter sets the Office property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;office&quot;.

The following example shows how to set this parameter.
  -Office  &quot;D1042&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OfficePhone</maml:name>
				<maml:description>
					<maml:para>Specifies the user's office telephone number. This parameter sets the OfficePhone property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;telephoneNumber&quot;.

The following example shows how to set this parameter.
  -OfficePhone  &quot;+1 (999) 555 1212&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Organization</maml:name>
				<maml:description>
					<maml:para>Specifies the user's organization. This parameter sets the Organization property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;o&quot;.

The following example shows how to set this parameter.
  -Organization &quot;Accounting&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OtherName</maml:name>
				<maml:description>
					<maml:para>Specifies a name in addition to a user's given name and surname, such as the user's middle name. This parameter sets the OtherName property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;middleName&quot;.

The following example shows how to set this parameter.
  -OtherName  &quot;Peter&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordNeverExpires</maml:name>
				<maml:description>
					<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordNotRequired</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0 
  $true or 1 

The following example shows how to set this parameter so that as password is not required for the account.
  -PasswordNotRequired $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>POBox</maml:name>
				<maml:description>
					<maml:para>Specifies the user's post office box number. This parameter sets the POBox property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;postOfficeBox&quot;.

The following example shows how to set this parameter.
  -POBox  &quot;25662&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PostalCode</maml:name>
				<maml:description>
					<maml:para>Specifies the user's postal code or zip code. This parameter sets the PostalCode property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;postalCode&quot;.

The following example shows how to set this parameter.
  -PostalCode &quot;28712&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ProfilePath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the user's profile. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ProfilePath property of the user object. The LDAP display name (ldapDisplayName) for this property is &quot;profilePath&quot;.

The following examples show how to set this parameter to a local path and to a UNC path.    -ProfilePath &quot;E:\users\profiles\saraDavis&quot;
   -ProfilePath &quot;\\users\profiles\saraDavis&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Remove</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Replace</maml:name>
				<maml:description>
					<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SamAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ScriptPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the user's log on script. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ScriptPath property of the user. The LDAP display name (ldapDisplayName) for this property is &quot;scriptPath&quot;. 

The following example shows how to set this parameter.
   -ScriptPath &quot;\\logonScripts\saradavisLogin&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ServicePrincipalNames</maml:name>
				<maml:description>
					<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SmartcardLogonRequired</maml:name>
				<maml:description>
					<maml:para>Specifies whether a smart card is required to logon. This parameter sets the SmartCardLoginRequired property for a user. This parameter also sets the ADS_UF_SMARTCARD_REQUIRED flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1 

The following example shows how to set this parameter so that a smart card is required to logon to the account.
  -SmartCardLogonRequired $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>State</maml:name>
				<maml:description>
					<maml:para>Specifies the user's or Organizational Unit's state or province. This parameter sets the State property of a User or Organizational Unit object. The LDAP display name (ldapDisplayName) of this property is &quot;st&quot;.

The following example shows how set this parameter.
  -State  &quot;Nevada&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>StreetAddress</maml:name>
				<maml:description>
					<maml:para>Specifies the user's street address. This parameter sets the StreetAddress property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;streetAddress&quot;.

The following example shows how to set this parameter.
  -StreetAddress  &quot;1200 Main Street&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Surname</maml:name>
				<maml:description>
					<maml:para>Specifies the user's last name or surname. This parameter sets the Surname property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;sn&quot;.

The following example shows how to set this parameter.
  -Surname  &quot;Patel&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Title</maml:name>
				<maml:description>
					<maml:para>Specifies the user's title. This parameter sets the Title property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;title&quot;.

The following example shows how to set this parameter.
  -Title  &quot;Manager&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TrustedForDelegation</maml:name>
				<maml:description>
					<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UserPrincipalName</maml:name>
				<maml:description>
					<maml:para>Each user account has a user principal name (UPN) in the format &lt;user&gt;@&lt;DNS-domain-name&gt;. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's DN, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ADUser</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies an ADUser object that identifies the Active Directory user object that should be modified and the set of changes that should be made to that object. When this parameter is used, any modifications made to the ADUser object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed. 
The ADUser object specified as the value of the -Instance parameter must have been retrieved by using the Get-ADUser cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set individual properties on the object.

The following is an example of how to use the Get-ADUser cmdlet to retrieve an instance of the ADUser object. The object is modified by using the Windows PowerShell command line. Then the Set-ADUser cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $userInstance = Get-ADUser  -Identity saraDavis
Step 2: Modify one or more properties of the object instance.
    $userInstance.EmailAddress = &quot;saradavis@contoso.com&quot;
Step3: Save your changes to saraDavis.
    Set-ADUser -Instance $userInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SamAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountExpirationDate</maml:name>
			<maml:description>
				<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.DateTime]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountNotDelegated</maml:name>
			<maml:description>
				<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Add</maml:name>
			<maml:description>
				<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AllowReversiblePasswordEncryption</maml:name>
			<maml:description>
				<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CannotChangePassword</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the account password can be changed.
  -CannotChangePassword $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Certificates</maml:name>
			<maml:description>
				<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ChangePasswordAtLogon</maml:name>
			<maml:description>
				<maml:para>Specifies whether a password must be changed during the next logon attempt. Possible values for this parameter include:
  $false or 0
  $true or 1

This parameter cannot be set to $true or 1 for an account that also has the PasswordNeverExpires property set to true.

The following example shows how to set this parameter so that the password must be changed at logon.
  -ChangePasswordAtLogon $true </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>City</maml:name>
			<maml:description>
				<maml:para>Specifies the user's town or city. This parameter sets the City property of a user. The LDAP display name (ldapDisplayName) of this property is &quot;l&quot;.

The following example shows how set this parameter.
  -City &quot;Las Vegas&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Clear</maml:name>
			<maml:description>
				<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Company</maml:name>
			<maml:description>
				<maml:para>Specifies the user's company. This parameter sets the Company property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;company&quot;. 

The following example shows how to set this parameter.
  -Company &quot;Contoso&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Country</maml:name>
			<maml:description>
				<maml:para>Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;c&quot;. This value is not used by Windows 2000.

The following example shows how set this parameter.
  -Country &quot;IN&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Department</maml:name>
			<maml:description>
				<maml:para>Specifies the user's department. This parameter sets the Department property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;department&quot;. 

The following example shows how to set this parameter.
  -Department &quot;Development&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Division</maml:name>
			<maml:description>
				<maml:para>Specifies the user's division. This parameter sets the Division property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;division&quot;. 

The following example shows how to set this parameter.
  -Division &quot;Software&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>EmailAddress</maml:name>
			<maml:description>
				<maml:para>Specifies the user's e-mail address. This parameter sets the EmailAddress property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;mail&quot;. 

The following example shows how to set this parameter.
  -EmailAddress &quot;saradavis@contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>EmployeeID</maml:name>
			<maml:description>
				<maml:para>Specifies the user's employee ID. This parameter sets the EmployeeID property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;employeeID&quot;. 

The following example shows how to set this parameter.
  -EmployeeID  &quot;A123456&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>EmployeeNumber</maml:name>
			<maml:description>
				<maml:para>Specifies the user's employee number. This parameter sets the EmployeeNumber property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;employeeNumber&quot;. 

The following example shows how set this parameter.
  -EmployeeNumber &quot;12345678&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Enabled</maml:name>
			<maml:description>
				<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Fax</maml:name>
			<maml:description>
				<maml:para>Specifies the user's fax phone number. This parameter sets the Fax property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;facsimileTelephoneNumber&quot;. 

The following example shows how to set this parameter.
  -Fax  &quot;+1 (999) 555 1212&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GivenName</maml:name>
			<maml:description>
				<maml:para>Specifies the user's given name. This parameter sets the GivenName property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;givenName&quot;.

The following example shows how to set this parameter.
  -givenName &quot;Sanjay&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>HomeDirectory</maml:name>
			<maml:description>
				<maml:para>Specifies a user's home directory. This parameter sets the HomeDirectory property of a user object. The LDAP Display Name (ldapDisplayName) for this property is &quot;homeDirectory&quot;.

The following example shows how to set this parameter.
   -HomeDirectory &quot;\\users\saraDavisHomeDir&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>HomeDrive</maml:name>
			<maml:description>
				<maml:para>Specifies a drive that is associated with the UNC path defined by the HomeDirectory property. The drive letter is specified as &quot;&lt;DriveLetter&gt;:&quot; where &lt;DriveLetter&gt; indicates the letter of the drive to associate. The &lt;DriveLetter&gt; must be a single, uppercase letter and the colon is required. This parameter sets the HomeDrive property of the user object. The LDAP Display Name (ldapDisplayName) for this property is &quot;homeDrive&quot;. 

The following example shows how to set this parameter.
   -HomeDrive &quot;D:&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>HomePage</maml:name>
			<maml:description>
				<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>HomePhone</maml:name>
			<maml:description>
				<maml:para>Specifies the user's home telephone number. This parameter sets the HomePhone property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;homePhone&quot;.

The following example shows how to set this parameter.
  -HomePhone  &quot;+1 (999) 555 1212&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			<dev:type>
				<maml:name>ADUser</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Initials</maml:name>
			<maml:description>
				<maml:para>Specifies the initials that represent part of a user's name. You can use this value for the user's middle initial. This parameter sets the Initials property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;initials&quot;.

The following example shows how set this parameter.
  -Initials &quot;L&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies an ADUser object that identifies the Active Directory user object that should be modified and the set of changes that should be made to that object. When this parameter is used, any modifications made to the ADUser object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed. 
The ADUser object specified as the value of the -Instance parameter must have been retrieved by using the Get-ADUser cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set individual properties on the object.

The following is an example of how to use the Get-ADUser cmdlet to retrieve an instance of the ADUser object. The object is modified by using the Windows PowerShell command line. Then the Set-ADUser cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $userInstance = Get-ADUser  -Identity saraDavis
Step 2: Modify one or more properties of the object instance.
    $userInstance.EmailAddress = &quot;saradavis@contoso.com&quot;
Step3: Save your changes to saraDavis.
    Set-ADUser -Instance $userInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			<dev:type>
				<maml:name>ADUser</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LogonWorkstations</maml:name>
			<maml:description>
				<maml:para>Specifies the computers that the user can access. To specify more than one computer, create a single comma-separated list. You can identify a computer by using the Security Accounts Manager (SAM) account name (sAMAccountName) or the DNS host name of the computer. The SAM account name is the same as the NetBIOS name of the computer.

The LDAP display name (ldapDisplayName) for this property is &quot;userWorkStations&quot;. 

The following example shows how to set this parameter by using SAMAccountName (NetBIOS name) and DNSHostName values.
  -LogonWorkstations &quot;saraDavisDesktop,saraDavisLapTop,projectA.corp.contoso.com&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Manager</maml:name>
			<maml:description>
				<maml:para>Specifies the user's manager. This parameter sets the Manager property of a user. This parameter is set by providing one of the following property values.  Note: The identifier in parentheses is the LDAP display name for the property.

  Distinguished Name 
    Example: CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The LDAP Display Name (ldapDisplayName) of this property is &quot;manager&quot;.

The following example shows how to set this parameter.
  -Manager saradavis </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADUser</command:parameterValue>
			<dev:type>
				<maml:name>ADUser</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MobilePhone</maml:name>
			<maml:description>
				<maml:para>Specifies the user's mobile phone number. This parameter sets the MobilePhone property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;mobile&quot;.

The following example shows how to set this parameter.
  -MobilePhone  &quot;+1  (999 ) 555 1212&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Office</maml:name>
			<maml:description>
				<maml:para>Specifies the location of the user's office or place of business. This parameter sets the Office property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;office&quot;.

The following example shows how to set this parameter.
  -Office  &quot;D1042&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OfficePhone</maml:name>
			<maml:description>
				<maml:para>Specifies the user's office telephone number. This parameter sets the OfficePhone property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;telephoneNumber&quot;.

The following example shows how to set this parameter.
  -OfficePhone  &quot;+1 (999) 555 1212&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Organization</maml:name>
			<maml:description>
				<maml:para>Specifies the user's organization. This parameter sets the Organization property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;o&quot;.

The following example shows how to set this parameter.
  -Organization &quot;Accounting&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OtherName</maml:name>
			<maml:description>
				<maml:para>Specifies a name in addition to a user's given name and surname, such as the user's middle name. This parameter sets the OtherName property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;middleName&quot;.

The following example shows how to set this parameter.
  -OtherName  &quot;Peter&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordNeverExpires</maml:name>
			<maml:description>
				<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordNotRequired</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0 
  $true or 1 

The following example shows how to set this parameter so that as password is not required for the account.
  -PasswordNotRequired $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>POBox</maml:name>
			<maml:description>
				<maml:para>Specifies the user's post office box number. This parameter sets the POBox property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;postOfficeBox&quot;.

The following example shows how to set this parameter.
  -POBox  &quot;25662&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PostalCode</maml:name>
			<maml:description>
				<maml:para>Specifies the user's postal code or zip code. This parameter sets the PostalCode property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;postalCode&quot;.

The following example shows how to set this parameter.
  -PostalCode &quot;28712&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ProfilePath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the user's profile. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ProfilePath property of the user object. The LDAP display name (ldapDisplayName) for this property is &quot;profilePath&quot;.

The following examples show how to set this parameter to a local path and to a UNC path.    -ProfilePath &quot;E:\users\profiles\saraDavis&quot;
   -ProfilePath &quot;\\users\profiles\saraDavis&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Remove</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Replace</maml:name>
			<maml:description>
				<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SamAccountName</maml:name>
			<maml:description>
				<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ScriptPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the user's log on script. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ScriptPath property of the user. The LDAP display name (ldapDisplayName) for this property is &quot;scriptPath&quot;. 

The following example shows how to set this parameter.
   -ScriptPath &quot;\\logonScripts\saradavisLogin&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ServicePrincipalNames</maml:name>
			<maml:description>
				<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SmartcardLogonRequired</maml:name>
			<maml:description>
				<maml:para>Specifies whether a smart card is required to logon. This parameter sets the SmartCardLoginRequired property for a user. This parameter also sets the ADS_UF_SMARTCARD_REQUIRED flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1 

The following example shows how to set this parameter so that a smart card is required to logon to the account.
  -SmartCardLogonRequired $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>State</maml:name>
			<maml:description>
				<maml:para>Specifies the user's or Organizational Unit's state or province. This parameter sets the State property of a User or Organizational Unit object. The LDAP display name (ldapDisplayName) of this property is &quot;st&quot;.

The following example shows how set this parameter.
  -State  &quot;Nevada&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>StreetAddress</maml:name>
			<maml:description>
				<maml:para>Specifies the user's street address. This parameter sets the StreetAddress property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;streetAddress&quot;.

The following example shows how to set this parameter.
  -StreetAddress  &quot;1200 Main Street&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Surname</maml:name>
			<maml:description>
				<maml:para>Specifies the user's last name or surname. This parameter sets the Surname property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;sn&quot;.

The following example shows how to set this parameter.
  -Surname  &quot;Patel&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Title</maml:name>
			<maml:description>
				<maml:para>Specifies the user's title. This parameter sets the Title property of a user object. The LDAP display name (ldapDisplayName) of this property is &quot;title&quot;.

The following example shows how to set this parameter.
  -Title  &quot;Manager&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>TrustedForDelegation</maml:name>
			<maml:description>
				<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UserPrincipalName</maml:name>
			<maml:description>
				<maml:para>Each user account has a user principal name (UPN) in the format &lt;user&gt;@&lt;DNS-domain-name&gt;. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's DN, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADUser</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A user object is received by the Identity parameter.

A user object that was retrieved by using the Get-ADUser cmdlet and then modified is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADUser</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified user object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADUser AntonioAl -HomePage 'http://fabrikam.com/employees/AntonioAl' -LogonWorkstations 'AntonioAl-DSKTOP,AntonioAl-LPTOP'
</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the user with samAccountName AntonioAL's property homepage to http://fabrikam.com/employees/AntonioAl and the LogonWorkstations property to AntonioAl-DSKTOP,AntonioAl-LPTOP.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADUser -Filter 'Name -like &quot;*&quot;' -SearchBase 'OU=HumanResources,OU=UserAccounts,DC=FABRIKAM,DC=COM' -Properties DisplayName | % {Set-ADUser $_ -DisplayName ($_.Surname + ' ' + $_.GivenName)}
</dev:code>
  			<dev:remarks>
  			        <maml:para>Get all the users in the directory that are located underneath the OU=HumanResources,OU=UserAccounts,DC=FABRIKAM,DC=COM organizationalUnit.  Set the DisplayName property on these user objects to the concatentation of the Surname property and the GivenName property.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADUser GlenJohn -Replace @{title=&quot;director&quot;;mail=&quot;glenjohn@fabrikam.com&quot;} </dev:code>
  			<dev:remarks>
  			        <maml:para>Set the user with samAccountNAme GlenJohn's property title to director and property mail to glenjohn@fabrikam.com.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADUser GlenJohn -Remove @{otherMailbox=&quot;glen.john&quot;} -Add @{url=&quot;fabrikam.com&quot;} -Replace @{title=&quot;manager&quot;} -Clear description</dev:code>
  			<dev:remarks>
  			        <maml:para>Modify the user with samAccountName GlenJohn's object by removing glen.john from the otherMailbox property, adding fabrikam.com to the url property, replacing the title property with manager and clearing the description property.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$user = Get-ADUser GlenJohn -Properties mail,department 
$user.mail = &quot;glen@fabrikam.com&quot;
$user.department = &quot;Accounting&quot;
Set-ADUser -instance $user </dev:code>
  			<dev:remarks>
  			        <maml:para>Set the mail and department properties on the user object with samAccountName GlenJohn by using the instance parameter.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code># create a byte array for the M-F 8:00 am to 5 pm logon hours
$hours = New-Object byte[] 21
$hours[5] = 255; $hours[8] = 255; $hours[11] = 255; $hours[14] = 255; $hours[17] = 255;
$hours[6] = 1; $hours[9] = 1; $hours[12] = 1; $hours[15] = 1; $hours[18] = 1;

# create a hashtable to update the logon hours and a description
$replaceHashTable = New-Object HashTable
$replaceHashTable.Add(&quot;logonHours&quot;, $hours)
$replaceHashTable.Add(&quot;description&quot;, &quot;Sarah Davis can only logon from Monday through Friday from 8:00 AM to 5:00 PM&quot;)

# set the value of the logonHours and description attributes
Set-ADUser &quot;SarahDavis&quot; -Replace $replaceHashTable
</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the user logon hours to Monday through Friday from 8:00 AM to 5:00 PM and add a description. It updates the &quot;logonHours&quot; attribute with the specified byte array and the description attribute with the specified string.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144991</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADComputer
		</command:name>
		<maml:description>
			<maml:para>Modifies an Active Directory computer object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADComputer</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADComputer cmdlet modifies the properties of an Active Directory computer object. You can modify commonly used property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the Add, Replace, Clear and Remove parameters.

The Identity parameter specifies the Active Directory computer to modify. You can identify a computer by its distinguished name Members (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to an object variable such as $&lt;localComputerObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADComputer cmdlet to retrieve a computer object and then pass the object through the pipeline to Set-ADComputer.

The Instance parameter provides a way to update a computer by applying the changes made to a copy of the computer object. When you set the Instance parameter to a copy of an Active Directory computer object that has been modified, the Set-ADComputer cmdlet makes the same changes to the original computer object. To get a copy of the object to modify, use the Get-ADComputer object. When you specify the Instance parameter you should not pass the identity parameter. For more information about the Instance parameter, see the Instance parameter description. For more information about how the instance concept is used in Active Directory cmdlets, see about_ActiveDirectory_Instance.

The following examples show how to modify the Location property of a computer object by using three methods:
 -By specifying the Identity and the Location parameters
 -By passing a computer object through the pipeline and specifying the Location parameter
 -By specifying the Instance parameter.

Method 1: Modify the Location property for the saraDavisLaptop computer by using the Identity and Location parameters. 

 Set-ADComputer  -Identity SaraDavisLaptop  -Location  &quot;W4013&quot;

Method 2: Modify the Location property for the saraDavisLaptop computer by passing the computer object through the pipeline and specifying the Location parameter.

 Get-ADComputer SaraDavisLaptop | Set-ADcomputer -Location  &quot;W4013&quot;

Method 3:  Modify the Location property for the saraDavisLaptop computer by using the Windows PowerShell command line to modify a local instance of the computer object. Then set the Instance parameter to the local instance.

 $computer = Get-ADcomputer saraDavisLaptop
 $computer.Location=  &quot;W4013&quot;
 Set-ADComputer -Instance $computer</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADComputer</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountExpirationDate</maml:name>
				<maml:description>
					<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountNotDelegated</maml:name>
				<maml:description>
					<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Add</maml:name>
				<maml:description>
					<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllowReversiblePasswordEncryption</maml:name>
				<maml:description>
					<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CannotChangePassword</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the account password can be changed.
  -CannotChangePassword $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Certificates</maml:name>
				<maml:description>
					<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Clear</maml:name>
				<maml:description>
					<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DNSHostName</maml:name>
				<maml:description>
					<maml:para>Specifies the fully qualified domain name (FQDN) of the computer. This parameter sets the DNSHostName property for a computer object. The LDAP Display Name for this property is &quot;dNSHostName&quot;. 

The following example shows how to set this parameter to a FQDN.
  -DNSHostName &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Enabled</maml:name>
				<maml:description>
					<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>HomePage</maml:name>
				<maml:description>
					<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Location</maml:name>
				<maml:description>
					<maml:para>Specifies the location of the computer, such as an office number. This parameter sets the Location property of a computer. The LDAP display name (ldapDisplayName) of this property is &quot;location&quot;. 

The following example shows how to set this parameter.
  -Location  &quot;Test Lab A&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ManagedBy</maml:name>
				<maml:description>
					<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OperatingSystem</maml:name>
				<maml:description>
					<maml:para>Specifies an operating system name. This parameter sets the OperatingSystem property of the computer object. The LDAP Display Name (ldapDisplayName) for this property is &quot;operatingSystem&quot;. 

The following example shows how to set this parameter.
   -OperatingSystem &quot;Windows Server 2008 Enterprise&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OperatingSystemHotfix</maml:name>
				<maml:description>
					<maml:para>Specifies an operating system hotfix name. This parameter sets the operatingSystemHotfix property of the computer object. The LDAP display name for this property is &quot;operatingSystemHotfix&quot;.

The following example shows how to specify this parameter.
   -operatingSystemHotfix &quot;523466&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OperatingSystemServicePack</maml:name>
				<maml:description>
					<maml:para>Specifies the name of an operating system service pack. This parameter sets the OperatingSystemServicePack property of the computer object. The LDAP display name (ldapDisplayName) for this property is &quot;operatingSystemServicePack&quot;. 

The following example shows how to specify this parameter.
   -OperatingSystemServicePack &quot;Service Pack 2&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OperatingSystemVersion</maml:name>
				<maml:description>
					<maml:para>Specifies an operating system version. This parameter sets the OperatingSystemVersion property of the computer object. The LDAP display name (ldapDisplayName) for this property is &quot;operatingSystemVersion&quot;. 

The following example shows how to specify this parameter.
   -OperatingSystemVersion &quot;6.0 (6001)&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordNeverExpires</maml:name>
				<maml:description>
					<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordNotRequired</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0 
  $true or 1 

The following example shows how to set this parameter so that as password is not required for the account.
  -PasswordNotRequired $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Remove</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Replace</maml:name>
				<maml:description>
					<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ServicePrincipalNames</maml:name>
				<maml:description>
					<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TrustedForDelegation</maml:name>
				<maml:description>
					<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UserPrincipalName</maml:name>
				<maml:description>
					<maml:para>Each user account has a user principal name (UPN) in the format &lt;user&gt;@&lt;DNS-domain-name&gt;. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's DN, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ChangePasswordAtLogon</maml:name>
				<maml:description>
					<maml:para>Specifies whether a password must be changed during the next logon attempt. Possible values for this parameter include:
  $false or 0
  $true or 1

This parameter cannot be set to $true or 1 for an account that also has the PasswordNeverExpires property set to true.

The following example shows how to set this parameter so that the password must be changed at logon.
  -ChangePasswordAtLogon $true </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SAMAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ADComputer</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies a modified copy of a computer object to use to update the actual Active Directory computer object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update computer objects that have been retrieved by using the Get-ADComputer cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADComputer cmdlet to retrieve an instance of the ADComputer object. The object is modified by using the Windows PowerShell command line. Then the Set-ADComputer cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $computerInstance = Get-ADComputer  -Identity saraDavisDesktop
Step 2: Modify one or more properties of the object instance.
    $computerInstance.Description = &quot;Sara Davis Computer&quot;
Step3: Save your changes to saraDavisDesktop.
    Set-ADComputer -Instance $computerInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ChangePasswordAtLogon</maml:name>
				<maml:description>
					<maml:para>Specifies whether a password must be changed during the next logon attempt. Possible values for this parameter include:
  $false or 0
  $true or 1

This parameter cannot be set to $true or 1 for an account that also has the PasswordNeverExpires property set to true.

The following example shows how to set this parameter so that the password must be changed at logon.
  -ChangePasswordAtLogon $true </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SAMAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountExpirationDate</maml:name>
			<maml:description>
				<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.DateTime]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountNotDelegated</maml:name>
			<maml:description>
				<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Add</maml:name>
			<maml:description>
				<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AllowReversiblePasswordEncryption</maml:name>
			<maml:description>
				<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CannotChangePassword</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the account password can be changed.
  -CannotChangePassword $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Certificates</maml:name>
			<maml:description>
				<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ChangePasswordAtLogon</maml:name>
			<maml:description>
				<maml:para>Specifies whether a password must be changed during the next logon attempt. Possible values for this parameter include:
  $false or 0
  $true or 1

This parameter cannot be set to $true or 1 for an account that also has the PasswordNeverExpires property set to true.

The following example shows how to set this parameter so that the password must be changed at logon.
  -ChangePasswordAtLogon $true </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Clear</maml:name>
			<maml:description>
				<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DNSHostName</maml:name>
			<maml:description>
				<maml:para>Specifies the fully qualified domain name (FQDN) of the computer. This parameter sets the DNSHostName property for a computer object. The LDAP Display Name for this property is &quot;dNSHostName&quot;. 

The following example shows how to set this parameter to a FQDN.
  -DNSHostName &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Enabled</maml:name>
			<maml:description>
				<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>HomePage</maml:name>
			<maml:description>
				<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID  (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager Account Name (sAMAccountName) 
    Example: SaraDavisDesktop

The cmdlet searches the default naming context or partition to find the object. If the identifier given is a DN, the partition to search will be computed from that DN. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saraDavisDesktop,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a computer object instance named &quot;computerInstance&quot;.
  -Identity   $computerInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			<dev:type>
				<maml:name>ADComputer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies a modified copy of a computer object to use to update the actual Active Directory computer object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update computer objects that have been retrieved by using the Get-ADComputer cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADComputer cmdlet to retrieve an instance of the ADComputer object. The object is modified by using the Windows PowerShell command line. Then the Set-ADComputer cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $computerInstance = Get-ADComputer  -Identity saraDavisDesktop
Step 2: Modify one or more properties of the object instance.
    $computerInstance.Description = &quot;Sara Davis Computer&quot;
Step3: Save your changes to saraDavisDesktop.
    Set-ADComputer -Instance $computerInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADComputer</command:parameterValue>
			<dev:type>
				<maml:name>ADComputer</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Location</maml:name>
			<maml:description>
				<maml:para>Specifies the location of the computer, such as an office number. This parameter sets the Location property of a computer. The LDAP display name (ldapDisplayName) of this property is &quot;location&quot;. 

The following example shows how to set this parameter.
  -Location  &quot;Test Lab A&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ManagedBy</maml:name>
			<maml:description>
				<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OperatingSystem</maml:name>
			<maml:description>
				<maml:para>Specifies an operating system name. This parameter sets the OperatingSystem property of the computer object. The LDAP Display Name (ldapDisplayName) for this property is &quot;operatingSystem&quot;. 

The following example shows how to set this parameter.
   -OperatingSystem &quot;Windows Server 2008 Enterprise&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OperatingSystemHotfix</maml:name>
			<maml:description>
				<maml:para>Specifies an operating system hotfix name. This parameter sets the operatingSystemHotfix property of the computer object. The LDAP display name for this property is &quot;operatingSystemHotfix&quot;.

The following example shows how to specify this parameter.
   -operatingSystemHotfix &quot;523466&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OperatingSystemServicePack</maml:name>
			<maml:description>
				<maml:para>Specifies the name of an operating system service pack. This parameter sets the OperatingSystemServicePack property of the computer object. The LDAP display name (ldapDisplayName) for this property is &quot;operatingSystemServicePack&quot;. 

The following example shows how to specify this parameter.
   -OperatingSystemServicePack &quot;Service Pack 2&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OperatingSystemVersion</maml:name>
			<maml:description>
				<maml:para>Specifies an operating system version. This parameter sets the OperatingSystemVersion property of the computer object. The LDAP display name (ldapDisplayName) for this property is &quot;operatingSystemVersion&quot;. 

The following example shows how to specify this parameter.
   -OperatingSystemVersion &quot;6.0 (6001)&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordNeverExpires</maml:name>
			<maml:description>
				<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordNotRequired</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0 
  $true or 1 

The following example shows how to set this parameter so that as password is not required for the account.
  -PasswordNotRequired $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Remove</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Replace</maml:name>
			<maml:description>
				<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SAMAccountName</maml:name>
			<maml:description>
				<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ServicePrincipalNames</maml:name>
			<maml:description>
				<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>TrustedForDelegation</maml:name>
			<maml:description>
				<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UserPrincipalName</maml:name>
			<maml:description>
				<maml:para>Each user account has a user principal name (UPN) in the format &lt;user&gt;@&lt;DNS-domain-name&gt;. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's DN, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A computer object is received by the Identity parameter.

A computer object that was retrieved by using the Get-ADComputer cmdlet and then modified is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADComputer</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified computer object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
This cmdlet does not work when connected to Global Catalog port.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADComputer &quot;FABRIKAM-SRV1&quot; -ServicePrincipalName @{Replace=&quot;MSSQLSVC/FABRIKAM-SRV1.FABRIKAM.COM:1456&quot;,&quot;MSOLAPSVC.3/FABRIKAM-SRV1.FABRIKAM.COM:analyze&quot;}</dev:code>
  			<dev:remarks>
  			        <maml:para>Modify the SPN value for a given computer.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADComputer &quot;FABRIKAM-SRV1&quot; -Location &quot;NA/HQ/Building A&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Modify the location for a given computer.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADComputer &quot;FABRIKAM-SRV1&quot; -ManagedBy &quot;CN=SQL Administrator 01,OU=UserAccounts,OU=Managed,DC=FABRIKAM,DC=COM&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the managed by attribute value for a given computer using the SAM account name of the user.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$comp = Get-ADComputer &quot;FABRIKAM-SRV1&quot;; $comp.Location = &quot;NA/HQ/Building A&quot;; $comp.ManagedBy = &quot;CN=SQL Administrator 01,OU=UserAccounts,OU=Managed,DC=FABRIKAM,DC=COM&quot;; Set-ADComputer -Instance $comp</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the location and managed-by attributes of a given computer using the instance parameter set.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144992</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADGroup
		</command:name>
		<maml:description>
			<maml:para>Modifies an Active Directory group.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADGroup</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADGroup cmdlet modifies the properties of an Active Directory group. You can modify commonly used property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the Add, Replace, Clear and Remove parameters.  

The Identity parameter specifies the Active Directory group to modify. You can identify a group by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to an object variable such as $&lt;localGroupObject&gt;, or you can pass a group object through the pipeline to the Identity parameter. For example, you can use the Get-ADGroup cmdlet to retrieve a group object and then pass the object through the pipeline to the Set-ADGroup cmdlet.

The Instance parameter provides a way to update a group object by applying the changes made to a copy of the object. When you set the Instance parameter to a copy of an Active Directory group object that has been modified, the Set-ADGroup cmdlet makes the same changes to the original group object. To get a copy of the object to modify, use the Get-ADGroup object. The Identity parameter is not allowed when you use the Instance parameter. For more information about the Instance parameter, see the Instance parameter description. For more information about how the Instance concept is used in Active Directory cmdlets, see about_ActiveDirectory_Instance

The following examples show how to modify the Description property of a group object by using three methods:
 -By specifying the Identity and the Description parameters
 -By passing a group object through the pipeline and specifying the Description parameter
 -By specifying the Instance parameter.

Method 1: Modify the Description property for the SecurityLevel2Access group by using the Identity and Description parameters. 

Set-ADGroup -Identity SecurityLevel2Access -Description &quot;Used to authorize Security Level 2 access.&quot;

Method 2: Modify the Description property for the SecurityLevel2Access group by passing the SecurityLevel2Access group through the pipeline and specifying the Description parameter.

Get-ADGroup -Identity &quot;SecurityLevel2Access&quot; | Set-ADGroup -Description &quot;Used to authorize Security Level 2 access.&quot;

Method 3: Modify the &lt;property&gt; property for the SecurityLevel2Access group by using the Windows PowerShell command line to modify a local instance of the SecurityLevel2Access group. Then set the Instance parameter to the local instance.

 $group = Get-ADGroup -Identity &quot;SecurityLevel2Access&quot;
 $group.Description = &quot;Used to authorize Security Level 2 access.&quot; 
 Set-ADGroup -Instance $group. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADGroup</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Add</maml:name>
				<maml:description>
					<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Clear</maml:name>
				<maml:description>
					<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GroupCategory</maml:name>
				<maml:description>
					<maml:para>Specifies the category of the group. Possible values of this parameter are:
  Distribution or 0  
  Security or 1 
 
This parameter sets the GroupCategory property of the group. This parameter value combined with other group values sets the LDAP Display Name (ldapDisplayName) attribute named &quot;groupType&quot;.

The following example shows how to specify that a group is a security group.
  -GroupCategory security</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupCategory]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GroupScope</maml:name>
				<maml:description>
					<maml:para>Specifies the group scope of the group. Possible values of this parameter are:
  DomainLocal or 0
  Global or 1
  Universal or 2

This parameter sets the GroupScope property of a group object to the specified value. The LDAP display name of this property is &quot;groupType&quot;.

The following example shows two ways to set this parameter to DomainLocal.
  -GroupScope DomainLocal
  -GroupScope 0</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupScope]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>HomePage</maml:name>
				<maml:description>
					<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ManagedBy</maml:name>
				<maml:description>
					<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Remove</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Replace</maml:name>
				<maml:description>
					<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SamAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ADGroup</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies a modified copy of a group object to use to update the actual Active Directory group object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update group objects that have been retrieved by using the Get-ADGroup cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADGroup cmdlet to retrieve an instance of the ADGroup object. The object is modified by using the Windows PowerShell command line. Then the Set-ADGroup cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $groupInstance = Get-ADGroup  -Identity &quot;SaraDavisReports&quot;
Step 2: Modify one or more properties of the object instance.
    $groupInstance.GroupScope= &quot;Global&quot;  

Step3: Save your changes to &quot;SaraDavisReports&quot;.
    Set-ADGroup -Instance $groupInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Add</maml:name>
			<maml:description>
				<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Clear</maml:name>
			<maml:description>
				<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GroupCategory</maml:name>
			<maml:description>
				<maml:para>Specifies the category of the group. Possible values of this parameter are:
  Distribution or 0  
  Security or 1 
 
This parameter sets the GroupCategory property of the group. This parameter value combined with other group values sets the LDAP Display Name (ldapDisplayName) attribute named &quot;groupType&quot;.

The following example shows how to specify that a group is a security group.
  -GroupCategory security</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupCategory]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupCategory]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Security</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GroupScope</maml:name>
			<maml:description>
				<maml:para>Specifies the group scope of the group. Possible values of this parameter are:
  DomainLocal or 0
  Global or 1
  Universal or 2

This parameter sets the GroupScope property of a group object to the specified value. The LDAP display name of this property is &quot;groupType&quot;.

The following example shows two ways to set this parameter to DomainLocal.
  -GroupScope DomainLocal
  -GroupScope 0</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupScope]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[Microsoft.ActiveDirectory.Management.ADGroupScope]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>HomePage</maml:name>
			<maml:description>
				<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  Security Accounts Manager (SAM) Account Name (sAMAccountName) 
    Example: saradavisreports

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=saradavisreports,OU=europe,CN=users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a group object instance named &quot;ADGroupInstance&quot;.
  -Identity $ADGroupInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies a modified copy of a group object to use to update the actual Active Directory group object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update group objects that have been retrieved by using the Get-ADGroup cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADGroup cmdlet to retrieve an instance of the ADGroup object. The object is modified by using the Windows PowerShell command line. Then the Set-ADGroup cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $groupInstance = Get-ADGroup  -Identity &quot;SaraDavisReports&quot;
Step 2: Modify one or more properties of the object instance.
    $groupInstance.GroupScope= &quot;Global&quot;  

Step3: Save your changes to &quot;SaraDavisReports&quot;.
    Set-ADGroup -Instance $groupInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADGroup</command:parameterValue>
			<dev:type>
				<maml:name>ADGroup</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ManagedBy</maml:name>
			<maml:description>
				<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Remove</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Replace</maml:name>
			<maml:description>
				<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SamAccountName</maml:name>
			<maml:description>
				<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A group object is received by the Identity parameter.

A group object that was retrieved by using the Get-ADGroup cmdlet and then modified is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADGroup</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified group object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-adgroup -server localhost:60000 -Identity &quot;CN=AccessControl,DC=AppNC&quot; -description &quot;Access Group&quot; -passthru 
</dev:code>
  			<dev:remarks>
 				<maml:para>DistinguishedName : CN=AccessControl,DC=AppNC 
GroupCategory     : Security 
GroupScope        : DomainLocal 
Name              : AccessControl 
ObjectClass       : group 
ObjectGUID        : d65f5e8f-36da-4390-9840-8b9fde6282fc 
SID               : S-1-510474493-936115905-2782881406-1264922549-3814061485-1557022459 </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Set the description property of the group AccessControl to &quot;Access Group&quot; on an ADAM instance. 
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-adgroup -filter 'name -like &quot;Access*&quot;' | set-adgroup -description &quot;Access Group&quot; </dev:code>
  			<dev:remarks>
  			        <maml:para>Modify the description on all groups that have a name that starts with access via the pipeline. 
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>PS adam:\DC=AppNC&gt; get-adgroup -filter 'name -like &quot;Access*&quot;' | set-adgroup -description &quot;Access Group&quot; 
PS adam:\DC=AppNC&gt; $group = get-adgroup -server localhost:60000 -Identity &quot;CN=AccessControl,DC=AppNC&quot; 
PS adam:\DC=AppNC&gt; $group.description = &quot;Access Group&quot; 
PS adam:\DC=AppNC&gt; set-adgroup -Instance $group -passthru </dev:code>
  			<dev:remarks>
 				<maml:para>DistinguishedName : CN=AccessControl,DC=AppNC 
GroupCategory     : Security 
GroupScope        : DomainLocal 
Name              : AccessControl 
ObjectClass       : group 
ObjectGUID        : d65f5e8f-36da-4390-9840-8b9fde6282fc 
SID               : S-1-510474493-936115905-2782881406-1264922549-3814061485-1557022459 </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Set the description property on the AccessControl group via the instance parameter.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144993</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroup</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADGroupMember</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADPrincipalGroupMembership</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADFineGrainedPasswordPolicy
		</command:name>
		<maml:description>
			<maml:para>Modifies an Active Directory fine grained password policy.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADFineGrainedPasswordPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADFineGrainedPasswordPolicy cmdlet modifies the properties of an Active Directory fine grained password policy. You can modify commonly used property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the Add, Replace, Clear and Remove parameters.  

The Identity parameter specifies the Active Directory fine grained password policy to modify. You can identify a fine grained password policy by its distinguished name (DN), GUID or name. You can also set the Identity parameter to an object variable such as $&lt;localFineGrainedPasswordPolicyObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADFineGrainedPasswordPolicy cmdlet to retrieve a fine grained password policy object and then pass the object through the pipeline to the Set-ADFineGrainedPasswordPolicy cmdlet.

The Instance parameter provides a way to update a fine grained password policy object by applying the changes made to a copy of the object. When you set the Instance parameter to a copy of an Active Directory fine grained password policy object that has been modified, the Set-ADFineGrainedPasswordPolicy cmdlet makes the same changes to the original fine grained password policy object. To get a copy of the object to modify, use the Get-ADFineGrainedPasswordPolicy object. The Identity parameter is not allowed when you use the Instance parameter. For more information about the Instance parameter, see the Instance parameter description. For more information about how the Instance concept is used in Active Directory cmdlets, see about_ActiveDirectory_Instance

The following examples show how to modify the Precedence property of a fine grained password policy object by using three methods:
 -By specifying the Identity and the Precedence parameters
 -By passing a fine grained password policy object through the pipeline and specifying the Precedence parameter
 -By specifying the Instance parameter.

Method 1: Modify the Precedence property for the Level3Policyfine grained password policy by using the Identity and Precedence parameters. 

 Set-ADFineGrainedPasswordPolicy -Identity &quot;Level3Policy&quot; -Precedence 150

Method 2: Modify the Precedence property for the Level3Policyfine grained password policy by passing the Level3Policyfine grained password policy through the pipeline and specifying the Precedence parameter.

 Get-ADFineGrainedPasswordPolicy -Identity &quot;Level3Policy&quot;| Set-ADFineGrainedPasswordPolicy -Precedence 150

Method 3: Modify the Precedence property for the Level3Policy fine grained password policy by using the Windows PowerShell command line to modify a local instance of the Level3Policyfine grained password policy. Then set the Instance parameter to the local instance.

$fineGrainedPasswordPolicy = Get-ADFineGrainedPasswordPolicy Level3Policy
 $fineGrainedPasswordPolicy.Precedence = 150 
 Set-ADFineGrainedPasswordPolicy -Instance $fineGrainedPasswordPolicy</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADFineGrainedPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Add</maml:name>
				<maml:description>
					<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Clear</maml:name>
				<maml:description>
					<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComplexityEnabled</maml:name>
				<maml:description>
					<maml:para>Specifies whether password complexity is enabled for the password policy. If enabled, the password must contain two of the following three character types: 
  Uppercase characters (A, B, C, D, E, ...)
  Lowercase characters (a, b, c, d, e, ...)
  Numerals (0, 1, 2, 3, ...) 

This parameter sets the ComplexityEnabled property of a password policy. 

Possible values for this parameter include:
  $false or 0 - Disables password complexity
  $true or 1 - Enables password complexity

The following example shows how to set this parameter to true.
  -ComplexityEnabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LockoutDuration</maml:name>
				<maml:description>
					<maml:para>Specifies the length of time that an account is locked after the number of failed login attempts exceeds the lockout threshold. You cannot login to an account that is locked until the lockout duration time period has expired. This parameter sets the lockoutDuration property of a password policy object. The LDAP display name (ldapDisplayName) of this property is &quot;msDS-LockoutDuration&quot;.

The lockout duration must be greater than or equal to the lockout observation time for a password policy. Use the LockOutObservationWindow parameter to set the lockout observation time. 

Specify the lockout duration time interval in the following format.
    [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutDuration &quot;2&quot;
  Set the time to 4 hours
    -LockoutDuration &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutDuration &quot;0:5&quot;
  Set the time to 45 seconds
    LockoutDuration &quot;0:0:45&quot;

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LockoutObservationWindow</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum time interval between two unsuccessful login attempts before the number of unsuccessful login attempts is reset to 0. An account is locked when the number of unsuccessful login attempts exceeds the password policy lockout threshold. This parameter sets the lockoutObservationWindow property of a password policy object. The LDAP Display Name (ldapDisplayName) of this property is &quot;msDS-lockoutObservationWindow&quot;.

The lockout observation window must be smaller than or equal to the lockout duration for a password policy. Use the LockoutDuration parameter to set the lockout duration time.

Specify the time interval in the following format.
   [-]D:H:M:S.F 

    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutObservationWindow &quot;2&quot;
  Set the time to 4 hours
    -LockoutObservationWindow &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutObservationWindow &quot;0:5&quot;
  Set the time to 45 seconds
    -LockoutObservationWindow &quot;0:0:45&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LockoutThreshold</maml:name>
				<maml:description>
					<maml:para>Specifies the number of unsuccessful login attempts that are permitted before an account is locked out. This number increases when the time between unsuccessful login attempts is less than the time specified for the lockout observation time window. This parameter sets the LockoutThreshold property of a password policy. 

The following example shows how to set the lockout threshold to 3 login attempts.
  -LockoutThreshold 3</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MaxPasswordAge</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum length of time that you can have the same password. After this time period, the password expires and you must create a new one. 

This parameter sets the maxPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;maxPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    MaxPasswordAge &quot;2&quot;
  Set the time span to the previous 2 days
    MaxPasswordAge &quot;-2&quot;
  Set the time span to 4 hours
    MaxPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    MaxPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    MaxPasswordAge &quot;0:0:45&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MinPasswordAge</maml:name>
				<maml:description>
					<maml:para>Specifies the minimum length of time before you can change a password.

This parameter sets the minPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;minPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    -MinPasswordAge &quot;2&quot;
  Set the time span to 4 hours
    -MinPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    -MinPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    -MinPasswordAge &quot;0:0:45&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MinPasswordLength</maml:name>
				<maml:description>
					<maml:para>Specifies the minimum number of characters that a password must contain.  This parameter sets the MinPasswordLength property of the password policy. 

The following example shows how to set this parameter.
  -MinPasswordLength 15</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordHistoryCount</maml:name>
				<maml:description>
					<maml:para>Specifies the number of previous passwords to save.  A user cannot reuse a password in the list of saved passwords. This parameter sets the PasswordHistoryCount property for a password policy. 

The following example shows how to set this parameter to save 10 previous passwords.
  -PasswordHistoryCount 10</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Precedence</maml:name>
				<maml:description>
					<maml:para>Specifies a value that defines the precedence of a fine-grained password policy among all fine-grained password policies. This parameter sets the Precedence property for a fine-grained password policy. The LDAP display name (ldapDisplayName) for this property is &quot;msDS-PasswordSettingsPrecedence&quot;.

This value determines which password policy to use when more than one password policy applies to a user or group. When there is a conflict, the password policy that has the lower Precedence property value has higher priority. For example, if PasswordPolicy1 has a Precedence property value of 200 and PasswordPolicy2 has a Precedence property value of 100, PasswordPolicy2 is used. 

Typically, password policy precedence values are assigned in multiples of 10 or 100, making it easier to add policies at a later time. For example, if you set the initial precedence values for your policies to 100 and 200, you can add another policy that has precedence value of 150. 

If the specified Precedence parameter is already assigned to another password policy object, the cmdlet returns a terminating error.

The following example shows how to set this parameter.
  -Precedence 100</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ProtectedFromAccidentalDeletion</maml:name>
				<maml:description>
					<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Remove</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Replace</maml:name>
				<maml:description>
					<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ReversibleEncryptionEnabled</maml:name>
				<maml:description>
					<maml:para>Specifies whether the directory must  store passwords using reversible encryption. This parameter sets the ReversibleEncryption property for a password policy. Possible values for this parameter include the following:
  $false or 0
  $true or 1 


The following example shows how to set this parameter to true.
  -ReversibleEncryptionEnabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ADFineGrainedPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies a modified copy of a fine-grained password policy object to use to update the actual Active Directory fine-grained password policy object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update fine-grained password policy objects that have been retrieved by using the Get-ADFineGrainedPasswordPolicy cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
 
The following is an example of how to use the Get-ADFineGrainedPasswordPolicy cmdlet to retrieve an instance of the ADFineGrainedPasswordPolicy object. The object is modified by using the Windows PowerShell command line. Then the Set-ADFineGrainedPasswordPolicy cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $fineGrainedPasswordPolicyInstance = Get-ADFineGrainedPasswordPolicy  -Identity PasswordPolicyLevel2
Step 2: Modify one or more properties of the object instance.
    $fineGrainedPasswordPolicyInstance.Precedence = 250
Step3: Save your changes to PasswordPolicyLevel2.
    Set-ADFineGrainedPasswordPolicy -Instance $fineGrainedPasswordPolicyInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Add</maml:name>
			<maml:description>
				<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Clear</maml:name>
			<maml:description>
				<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ComplexityEnabled</maml:name>
			<maml:description>
				<maml:para>Specifies whether password complexity is enabled for the password policy. If enabled, the password must contain two of the following three character types: 
  Uppercase characters (A, B, C, D, E, ...)
  Lowercase characters (a, b, c, d, e, ...)
  Numerals (0, 1, 2, 3, ...) 

This parameter sets the ComplexityEnabled property of a password policy. 

Possible values for this parameter include:
  $false or 0 - Disables password complexity
  $true or 1 - Enables password complexity

The following example shows how to set this parameter to true.
  -ComplexityEnabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name (distinguishedName)
    Example: CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Name (name) 
    Example: PasswordPolicyLevel1

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=Strict Password Policy,CN=Password Settings Container,CN=System,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a fine-grained password policy object instance named &quot;fineGrainedPasswordPolicyInstance&quot;.
  -Identity $fineGrainedPasswordPolicyInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies a modified copy of a fine-grained password policy object to use to update the actual Active Directory fine-grained password policy object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update fine-grained password policy objects that have been retrieved by using the Get-ADFineGrainedPasswordPolicy cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
 
The following is an example of how to use the Get-ADFineGrainedPasswordPolicy cmdlet to retrieve an instance of the ADFineGrainedPasswordPolicy object. The object is modified by using the Windows PowerShell command line. Then the Set-ADFineGrainedPasswordPolicy cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $fineGrainedPasswordPolicyInstance = Get-ADFineGrainedPasswordPolicy  -Identity PasswordPolicyLevel2
Step 2: Modify one or more properties of the object instance.
    $fineGrainedPasswordPolicyInstance.Precedence = 250
Step3: Save your changes to PasswordPolicyLevel2.
    Set-ADFineGrainedPasswordPolicy -Instance $fineGrainedPasswordPolicyInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADFineGrainedPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LockoutDuration</maml:name>
			<maml:description>
				<maml:para>Specifies the length of time that an account is locked after the number of failed login attempts exceeds the lockout threshold. You cannot login to an account that is locked until the lockout duration time period has expired. This parameter sets the lockoutDuration property of a password policy object. The LDAP display name (ldapDisplayName) of this property is &quot;msDS-LockoutDuration&quot;.

The lockout duration must be greater than or equal to the lockout observation time for a password policy. Use the LockOutObservationWindow parameter to set the lockout observation time. 

Specify the lockout duration time interval in the following format.
    [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutDuration &quot;2&quot;
  Set the time to 4 hours
    -LockoutDuration &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutDuration &quot;0:5&quot;
  Set the time to 45 seconds
    LockoutDuration &quot;0:0:45&quot;

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LockoutObservationWindow</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum time interval between two unsuccessful login attempts before the number of unsuccessful login attempts is reset to 0. An account is locked when the number of unsuccessful login attempts exceeds the password policy lockout threshold. This parameter sets the lockoutObservationWindow property of a password policy object. The LDAP Display Name (ldapDisplayName) of this property is &quot;msDS-lockoutObservationWindow&quot;.

The lockout observation window must be smaller than or equal to the lockout duration for a password policy. Use the LockoutDuration parameter to set the lockout duration time.

Specify the time interval in the following format.
   [-]D:H:M:S.F 

    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutObservationWindow &quot;2&quot;
  Set the time to 4 hours
    -LockoutObservationWindow &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutObservationWindow &quot;0:5&quot;
  Set the time to 45 seconds
    -LockoutObservationWindow &quot;0:0:45&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LockoutThreshold</maml:name>
			<maml:description>
				<maml:para>Specifies the number of unsuccessful login attempts that are permitted before an account is locked out. This number increases when the time between unsuccessful login attempts is less than the time specified for the lockout observation time window. This parameter sets the LockoutThreshold property of a password policy. 

The following example shows how to set the lockout threshold to 3 login attempts.
  -LockoutThreshold 3</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MaxPasswordAge</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum length of time that you can have the same password. After this time period, the password expires and you must create a new one. 

This parameter sets the maxPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;maxPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    MaxPasswordAge &quot;2&quot;
  Set the time span to the previous 2 days
    MaxPasswordAge &quot;-2&quot;
  Set the time span to 4 hours
    MaxPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    MaxPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    MaxPasswordAge &quot;0:0:45&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MinPasswordAge</maml:name>
			<maml:description>
				<maml:para>Specifies the minimum length of time before you can change a password.

This parameter sets the minPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;minPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    -MinPasswordAge &quot;2&quot;
  Set the time span to 4 hours
    -MinPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    -MinPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    -MinPasswordAge &quot;0:0:45&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MinPasswordLength</maml:name>
			<maml:description>
				<maml:para>Specifies the minimum number of characters that a password must contain.  This parameter sets the MinPasswordLength property of the password policy. 

The following example shows how to set this parameter.
  -MinPasswordLength 15</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordHistoryCount</maml:name>
			<maml:description>
				<maml:para>Specifies the number of previous passwords to save.  A user cannot reuse a password in the list of saved passwords. This parameter sets the PasswordHistoryCount property for a password policy. 

The following example shows how to set this parameter to save 10 previous passwords.
  -PasswordHistoryCount 10</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Precedence</maml:name>
			<maml:description>
				<maml:para>Specifies a value that defines the precedence of a fine-grained password policy among all fine-grained password policies. This parameter sets the Precedence property for a fine-grained password policy. The LDAP display name (ldapDisplayName) for this property is &quot;msDS-PasswordSettingsPrecedence&quot;.

This value determines which password policy to use when more than one password policy applies to a user or group. When there is a conflict, the password policy that has the lower Precedence property value has higher priority. For example, if PasswordPolicy1 has a Precedence property value of 200 and PasswordPolicy2 has a Precedence property value of 100, PasswordPolicy2 is used. 

Typically, password policy precedence values are assigned in multiples of 10 or 100, making it easier to add policies at a later time. For example, if you set the initial precedence values for your policies to 100 and 200, you can add another policy that has precedence value of 150. 

If the specified Precedence parameter is already assigned to another password policy object, the cmdlet returns a terminating error.

The following example shows how to set this parameter.
  -Precedence 100</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ProtectedFromAccidentalDeletion</maml:name>
			<maml:description>
				<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Remove</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Replace</maml:name>
			<maml:description>
				<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ReversibleEncryptionEnabled</maml:name>
			<maml:description>
				<maml:para>Specifies whether the directory must  store passwords using reversible encryption. This parameter sets the ReversibleEncryption property for a password policy. Possible values for this parameter include the following:
  $false or 0
  $true or 1 


The following example shows how to set this parameter to true.
  -ReversibleEncryptionEnabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A fine grained password policy object is received by the Identity parameter.

A fine grained password policy object that was retrieved by using the Get-ADFineGrainedPasswordPolicy cmdlet and then modified is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified fine grained password policy object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADFineGrainedPasswordPolicy MyPolicy -Precedence 100 -LockoutDuration 00:40:00 -LockoutObservationWindow 00:20:00 -ComplexityEnabled $true -ReversibleEncryptionEnabled $false -MinPasswordLength 12</dev:code>
  			<dev:remarks>
  			        <maml:para>Update the Precedence, LockoutDuration, LockoutObservationWindow, ComplexityEnabled, ReversibleEncryptionEnabled, and MinPasswordLength properties on the FineGrainedPasswordPolicy object with name MyPolicy.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADFineGrainedPasswordPolicy 'CN=MyPolicy,CN=Password Settings Container,CN=System,DC=FABRIKAM,DC=COM' -MinPasswordLength 12
</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the MinPasswordLength property on the FineGrainedPasswordPolicy object with DistinguishedName CN=MyPolicy,CN=Password Settings Container,CN=System,DC=FABRIKAM,DC=COM.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$fgpp = Get-ADFineGrainedPasswordPolicy MyPolicy
$fgpp.LockoutObservationWindow = [TimeSpan]::Parse(&quot;0.00:15:00&quot;)
$fgpp.LockoutThreshold = 10
$fgpp.MinPasswordLength = 8
$fgpp.PasswordHistoryCount = 24
Set-ADFineGrainedPasswordPolicy -Instance $fgpp
</dev:code>
  			<dev:remarks>
  			        <maml:para>Get the FineGrainedPasswordPolicy object with name MyPolicy,  Update a set of properties on the object and then write the modifications back to the directory using the instance parameter.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144994</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADFineGrainedPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADDomain
		</command:name>
		<maml:description>
			<maml:para>Modifies an Active Directory domain.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADDomain</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADDomain cmdlet modifies the properties of an Active Directory domain. You can modify commonly used property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the Add, Replace, Clear and Remove parameters.

The Identity parameter specifies the domain to modify. You can identify a domain by its distinguished name (DN), GUID, security identifier (SID), DNS domain name, or NetBIOS name. You can also set the Identity parameter to an object variable such as $&lt;localDomainObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADDomain cmdlet to retrieve a domain object and then pass the object through the pipeline to the Set-ADDomain cmdlet.

The Instance parameter provides a way to update a domain object by applying the changes made to a copy of the domain object. When you set the Instance parameter to a copy of an Active Directory domain object that has been modified, the Set-ADDomain cmdlet makes the same changes to the original domain object. To get a copy of the object to modify, use the Get-ADDomain object. When you specify the Instance parameter you should not pass the identity parameter.  For more information about the Instance parameter, see the Instance parameter description. 

The following examples show how to modify the ManagedBy property of a domain object by using three methods:
 -By specifying the Identity and the ManagedBy parameters
 -By passing a domain object through the pipeline and specifying the ManagedBy parameter
 -By specifying the Instance parameter.

Method 1: Modify the ManagedBy property for the London domain by using the Identity and ManagedBy parameters. 

 Set-ADDomain -Identity London -ManagedBy SaraDavis

Method 2: Modify the ManagedBy property for the London domain by passing the London domain through the pipeline and specifying the ManagedBy parameter.

 Get-ADDomain London | Set-ADDomain -ManagedBy SaraDavis

Method 3: Modify the ManagedBy property for the London domain by using the Windows PowerShell command line to modify a local instance of the London domain. Then set the Instance parameter to the local instance.

 $domain = Get-ADDomain London
 $domain.ManagedBy = SaraDavis 
 Set-ADDomain -Instance $domain. 
</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADDomain</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomain</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Add</maml:name>
				<maml:description>
					<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Clear</maml:name>
				<maml:description>
					<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Remove</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Replace</maml:name>
				<maml:description>
					<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllowedDNSSuffixes</maml:name>
				<maml:description>
					<maml:para>Modifies the list of domain name server (DNS) suffixes that are allowed in a domain. This parameter sets the value of the msDS-AllowedDNSSuffixes attribute of the domainDNS object. This parameter uses the following syntax to add, remove, replace, or clear DNS suffix values. 

To add values:
  -AllowedDNSSuffixes @{Add=value1,value2,...}

To remove values:
  -AllowedDNSSuffixes @{Remove=value3,value4,...}

To replace values:
  -AllowedDNSSuffixes @{Replace=value1,value2,...}

To clear all values:
  -AllowedDNSSuffixes $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove DNS suffix values: 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove DNS suffixes for a domain.
  -AllowedDNSSuffixes@{Add= &quot;corp.contoso.com,contoso.com&quot;};@{Remove=&quot;corpnet.contoso.com&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LastLogonReplicationInterval</maml:name>
				<maml:description>
					<maml:para>Specifies the time, in days, within which the last logon time of an account must be replicated across all domain controllers in the domain. This parameter sets the LastLogonReplicationInterval property for a domain. The LDAP display name (ldapDisplayName) for this property is msDS-LogonTimeSyncInterval. The last logon replication interval must be at least one day. Setting the last logon replication interval to a low value can significantly increase domain-wide replication.

The following example shows how to set this parameter to 10 days.
  -LastLogonReplicationInterval &quot;10&quot;

Note: This value does not apply when the domain mode is set to the value &quot;Windows2000&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ManagedBy</maml:name>
				<maml:description>
					<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ADDomain</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies a modified copy of a domain object to use to update the actual Active Directory domain object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update domain objects that have been retrieved by using the Get-ADDomain cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADDomain cmdlet to retrieve an instance of the ADDomain object. The object is modified by using the Windows PowerShell command line. Then the Set-ADDomain cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $domainInstance = Get-ADDomain -Identity &quot;contosoDomain&quot;
Step 2: Modify one or more properties of the object instance.
    $domainInstance.ManagedBy = &quot;saraDavisGroup&quot;
Step3: Save your changes to contosoDomain.
    Set-ADDomain -Instance $domainInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomain</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllowedDNSSuffixes</maml:name>
				<maml:description>
					<maml:para>Modifies the list of domain name server (DNS) suffixes that are allowed in a domain. This parameter sets the value of the msDS-AllowedDNSSuffixes attribute of the domainDNS object. This parameter uses the following syntax to add, remove, replace, or clear DNS suffix values. 

To add values:
  -AllowedDNSSuffixes @{Add=value1,value2,...}

To remove values:
  -AllowedDNSSuffixes @{Remove=value3,value4,...}

To replace values:
  -AllowedDNSSuffixes @{Replace=value1,value2,...}

To clear all values:
  -AllowedDNSSuffixes $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove DNS suffix values: 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove DNS suffixes for a domain.
  -AllowedDNSSuffixes@{Add= &quot;corp.contoso.com,contoso.com&quot;};@{Remove=&quot;corpnet.contoso.com&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LastLogonReplicationInterval</maml:name>
				<maml:description>
					<maml:para>Specifies the time, in days, within which the last logon time of an account must be replicated across all domain controllers in the domain. This parameter sets the LastLogonReplicationInterval property for a domain. The LDAP display name (ldapDisplayName) for this property is msDS-LogonTimeSyncInterval. The last logon replication interval must be at least one day. Setting the last logon replication interval to a low value can significantly increase domain-wide replication.

The following example shows how to set this parameter to 10 days.
  -LastLogonReplicationInterval &quot;10&quot;

Note: This value does not apply when the domain mode is set to the value &quot;Windows2000&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ManagedBy</maml:name>
				<maml:description>
					<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Add</maml:name>
			<maml:description>
				<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AllowedDNSSuffixes</maml:name>
			<maml:description>
				<maml:para>Modifies the list of domain name server (DNS) suffixes that are allowed in a domain. This parameter sets the value of the msDS-AllowedDNSSuffixes attribute of the domainDNS object. This parameter uses the following syntax to add, remove, replace, or clear DNS suffix values. 

To add values:
  -AllowedDNSSuffixes @{Add=value1,value2,...}

To remove values:
  -AllowedDNSSuffixes @{Remove=value3,value4,...}

To replace values:
  -AllowedDNSSuffixes @{Replace=value1,value2,...}

To clear all values:
  -AllowedDNSSuffixes $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove DNS suffix values: 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove DNS suffixes for a domain.
  -AllowedDNSSuffixes@{Add= &quot;corp.contoso.com,contoso.com&quot;};@{Remove=&quot;corpnet.contoso.com&quot;}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Clear</maml:name>
			<maml:description>
				<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomain</command:parameterValue>
			<dev:type>
				<maml:name>ADDomain</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies a modified copy of a domain object to use to update the actual Active Directory domain object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update domain objects that have been retrieved by using the Get-ADDomain cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADDomain cmdlet to retrieve an instance of the ADDomain object. The object is modified by using the Windows PowerShell command line. Then the Set-ADDomain cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $domainInstance = Get-ADDomain -Identity &quot;contosoDomain&quot;
Step 2: Modify one or more properties of the object instance.
    $domainInstance.ManagedBy = &quot;saraDavisGroup&quot;
Step3: Save your changes to contosoDomain.
    Set-ADDomain -Instance $domainInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomain</command:parameterValue>
			<dev:type>
				<maml:name>ADDomain</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LastLogonReplicationInterval</maml:name>
			<maml:description>
				<maml:para>Specifies the time, in days, within which the last logon time of an account must be replicated across all domain controllers in the domain. This parameter sets the LastLogonReplicationInterval property for a domain. The LDAP display name (ldapDisplayName) for this property is msDS-LogonTimeSyncInterval. The last logon replication interval must be at least one day. Setting the last logon replication interval to a low value can significantly increase domain-wide replication.

The following example shows how to set this parameter to 10 days.
  -LastLogonReplicationInterval &quot;10&quot;

Note: This value does not apply when the domain mode is set to the value &quot;Windows2000&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ManagedBy</maml:name>
			<maml:description>
				<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Remove</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Replace</maml:name>
			<maml:description>
				<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADDomain</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A domain object is received by the Identity parameter.

A domain object that was retrieved by using the Get-ADDomain cmdlet and then modified is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADDomain</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified domain object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADDomain -Identity FABRIKAM -AllowedDNSSuffixes @{Replace=&quot;fabrikam.com&quot;,&quot;corp.fabrikam.com&quot;}
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the value of AllowedDNSSuffixes to {&quot;fabrikam.com&quot;,&quot;corp.fabrikam.com&quot;} in domain &quot;FABRIKAM&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADDomain -Identity FABRIKAM -AllowedDNSSuffixes @{Add=&quot;corp.fabrikam.com&quot;}
</dev:code>
  			<dev:remarks>
 				<maml:para>Adds the value &quot;corp.fabrikam.com&quot; to the AllowedDNSSuffixes in domain &quot;FABRIKAM&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADDomain -Identity FABRIKAM -ManagedBy 'CN=Domain Admins,CN=Users,DC=FABRIKAM,DC=COM'
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the ManagedBy property in domain &quot;FABRIKAM&quot; to 'CN=Domain Admins,CN=Users,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDomain | Set-ADDomain -LastLogonReplicationInterval &quot;10&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the LastLogonReplicationInterval of the current logged on user domain to &quot;10&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144995</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADDomain</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADForest
		</command:name>
		<maml:description>
			<maml:para>Modifies an Active Directory forest.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADForest</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADForest cmdlet modifies the properties of an Active Directory forest. You can modify commonly used property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the Add, Replace, Clear and Remove parameters.

The Identity parameter specifies the Active Directory forest to modify. You can identify a forest by its fully qualified domain name (FQDN), GUID, DNS host name, or NetBIOS name. You can also set the Identity parameter to an object variable such as $&lt;localADForestObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADForest cmdlet to retrieve a forest object and then pass the object through the pipeline to the Set-ADForest cmdlet.

The Instance parameter provides a way to update a forest object by applying the changes made to a copy of the object. When you set the Instance parameter to a copy of an Active Directory forest object that has been modified, the Set-ADForest cmdlet makes the same changes to the original forest object. To get a copy of the object to modify, use the Get-ADForest object. The Identity parameter is not allowed when you use the Instance parameter. For more information about the Instance parameter, see the Instance parameter description. 

The following examples show how to modify the UPNSuffixes property of a forest object by using three methods:
 -By specifying the Identity and the UPNSuffixes parameters
 -By passing a forest object through the pipeline and specifying the UPNSuffixes parameter
 -By specifying the Instance parameter.

Method 1: Modify the UPNSuffixes property for the fabrikam.com forest by using the Identity and UPNSuffixes parameters. 

 Set-ADForest -Identity fabrikam.com -UPNSuffixes @{replace=&quot;fabrikam.com&quot;,&quot;fabrikam&quot;,&quot;corp.fabrikam.com&quot;}

Method 2: Modify the UPNSuffixes property for the fabrikam.com forest by passing the fabrikam.com forest through the pipeline and specifying the UPNSuffixes parameter.

 Get-ADForest -Identity fabrikam.com | Set-ADForest -UPNSuffixes @{replace=&quot;fabrikam.com&quot;,&quot;fabrikam&quot;,&quot;corp.fabrikam.com&quot;}

Method 3: Modify the UPNSuffixes property for the fabrikam.com forest by using the Windows PowerShell command line to modify a local instance of the fabrikam.com forest. Then set the Instance parameter to the local instance.

 $forest = Get-ADForest -Identity fabrikam.com
 $forest.UPNSuffixes = &quot;fabrikam.com&quot;,&quot;fabrikam&quot;,&quot;corp.fabrikam.com&quot;
 Set-ADForest -Instance $forest. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADForest</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory forest object by providing one of the following attribute values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  DNS host name
    Example: dnsServer.corp.contoso.com
  NetBIOS name
    Example: corp

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a forest object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to a forest object instance named &quot;forestInstance&quot;.
  -Identity $forestInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADForest</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SPNSuffixes</maml:name>
				<maml:description>
					<maml:para>Modifies the list of service principal name (SPN) suffixes of the forest. This parameter sets the multi-valued msDS-SPNSuffixes property of the cross-reference container. This parameter uses the following syntax to add remove, replace, or clear SPN suffix values.

Syntax:
To add values:
  -SPNSuffixes @{Add=value1,value2,...}
To remove values:
  -SPNSuffixes @{Remove=value3,value4,...}
To replace values:
  -SPNSuffixes @{Replace=value1,value2,...}
To clear all values:
  -SPNSuffixes $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove SPN suffix values 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove SPNSuffixes for a forest.
  -@{Add=&quot;ContosoEurope&quot;, &quot;ContosoAsia&quot;};@{Remove=&quot;Contoso&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UPNSuffixes</maml:name>
				<maml:description>
					<maml:para>Modifies the list of user principal name (UPN) suffixes of the forest. This parameter sets the multi-valued msDS-UPNSuffixes property of the cross-reference container. This parameter uses the following syntax to add remove, replace, or clear UPN suffix values. 

Syntax:
To add values:
  -UPNSuffixes  @{Add=value1,value2,...}
To remove values:
  -UPNSuffixes @{Remove=value3,value4,...}
To replace values:
  -UPNSuffixes @{Replace=value1,value2,...}
To clear all values:
  -UPNSuffixes $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove UPN suffix values 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove UPN suffixes for a forest.
  -UPNSuffixes @{Add=&quot;Fabrikam.Com&quot;, &quot;Corp.Fabrikam.Com&quot;}; @{Remove=&quot;NA.Fabrikam.Com&quot;,&quot;Europe.Fabrikam.Com&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory forest object by providing one of the following attribute values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  DNS host name
    Example: dnsServer.corp.contoso.com
  NetBIOS name
    Example: corp

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a forest object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to a forest object instance named &quot;forestInstance&quot;.
  -Identity $forestInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADForest</command:parameterValue>
			<dev:type>
				<maml:name>ADForest</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SPNSuffixes</maml:name>
			<maml:description>
				<maml:para>Modifies the list of service principal name (SPN) suffixes of the forest. This parameter sets the multi-valued msDS-SPNSuffixes property of the cross-reference container. This parameter uses the following syntax to add remove, replace, or clear SPN suffix values.

Syntax:
To add values:
  -SPNSuffixes @{Add=value1,value2,...}
To remove values:
  -SPNSuffixes @{Remove=value3,value4,...}
To replace values:
  -SPNSuffixes @{Replace=value1,value2,...}
To clear all values:
  -SPNSuffixes $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove SPN suffix values 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove SPNSuffixes for a forest.
  -@{Add=&quot;ContosoEurope&quot;, &quot;ContosoAsia&quot;};@{Remove=&quot;Contoso&quot;}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UPNSuffixes</maml:name>
			<maml:description>
				<maml:para>Modifies the list of user principal name (UPN) suffixes of the forest. This parameter sets the multi-valued msDS-UPNSuffixes property of the cross-reference container. This parameter uses the following syntax to add remove, replace, or clear UPN suffix values. 

Syntax:
To add values:
  -UPNSuffixes  @{Add=value1,value2,...}
To remove values:
  -UPNSuffixes @{Remove=value3,value4,...}
To replace values:
  -UPNSuffixes @{Replace=value1,value2,...}
To clear all values:
  -UPNSuffixes $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove UPN suffix values 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove UPN suffixes for a forest.
  -UPNSuffixes @{Add=&quot;Fabrikam.Com&quot;, &quot;Corp.Fabrikam.Com&quot;}; @{Remove=&quot;NA.Fabrikam.Com&quot;,&quot;Europe.Fabrikam.Com&quot;}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADForest</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A forest object is received by the Identity parameter.

A forest object that was retrieved by using the Get-ADForest cmdlet and then modified is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADForest</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified forest object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADForest -Identity fabrikam.com -UPNSuffixes @{replace=&quot;fabrikam.com&quot;,&quot;fabrikam&quot;,&quot;corp.fabrikam.com&quot;}
</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the UPNSuffixes property on the fabrikam.com forest.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADForest -Identity fabrikam.com -SPNSuffixes @{add=&quot;corp.fabrikam.com&quot;}
</dev:code>
  			<dev:remarks>
  			        <maml:para>Add corp.fabrikam.com to the SPNSuffixes property on the forest fabrikam.com</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADForest | Set-ADForest -SPNSuffixes @{Add=&quot;corp.fabrikam.com&quot;;Remove=&quot;fabrikam&quot;} </dev:code>
  			<dev:remarks>
  			        <maml:para>Get the forest of the current logged on user and update the SPNSuffixes property.
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADForest | Set-ADForest -UPNSuffixes $null </dev:code>
  			<dev:remarks>
  			        <maml:para>Get the forest of the current logged on user and clear the UPNSuffixes property. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144996</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADForest</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADForestMode</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADOrganizationalUnit
		</command:name>
		<maml:description>
			<maml:para>Modifies an Active Directory organizational unit.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADOrganizationalUnit</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADOrganizationalUnit cmdlet modifies the properties of an Active Directory organizational unit. You can modify commonly used property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the Add, Replace, Clear and Remove parameters.  

The Identity parameter specifies the Active Directory organizational unit to modify. You can identify an organizational unit by its distinguished name (DN) or GUID.
 You can also set the Identity parameter to an object variable such as $&lt;localADOrganizationalUnitObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADOrganizationalUnit cmdlet to retrieve an organizational unit object and then pass the object through the pipeline to the Set-ADOrganizationalUnit cmdlet.

The Instance parameter provides a way to update an organizational unit object by applying the changes made to a copy of the object. When you set the Instance parameter to a copy of an Active Directory organizational unit object that has been modified, the Set-ADOrganizationalUnit cmdlet makes the same changes to the original organizational unit object. To get a copy of the object to modify, use the Get-ADOrganizationalUnit object. When you specify the Instance parameter you should not pass the Identity parameter. For more information about the Instance parameter, see the Instance parameter description. 

For more information about how the Instance concept is used in Active Directory cmdlets, see about_ActiveDirectory_Instance.

The following examples show how to modify the ManagedBy property of an organizational unit object by using three methods:
 -By specifying the Identity and the ManagedBy parameters
 -By passing an organizational unit object through the pipeline and specifying the ManagedBy parameter
 -By specifying the Instance parameter.

Method 1: Modify the ManagedBy property for the &quot;AccountingDepartment&quot; organizational unit by using the Identity and ManagedBy parameters. 

 Set-ADOrganizationalUnit -Identity &quot;AccountingDepartment&quot; -ManagedBy &quot;SaraDavisGroup&quot;

Method 2: Modify the ManagedBy property for the &quot;AccountingDepartment&quot; organizational unit by passing the &quot;AccountingDepartment&quot; organizational unit through the pipeline and specifying the ManagedBy parameter.

 Get-ADOrganizationalUnit -Identity &quot;&quot;AccountingDepartment&quot;&quot; | Set-ADOrganizationalUnit -ManagedBy &quot;SaraDavisGroup&quot;

Method 3: Modify the ManagedBy property for the &quot;AccountingDepartment&quot; organizational unit by using the Windows PowerShell command line to modify a local instance of the &quot;AccountingDepartment&quot; organizational unit. Then set the Instance parameter to the local instance.

 $organizational unit = Get-ADOrganizationalUnit -Identity &quot;AccountingDepartment&quot;
 $organizational unit.ManagedBy = &quot;SaraDavisGroup&quot; 
 Set-ADOrganizationalUnit -Instance $organizational unit. 

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADOrganizationalUnit</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Add</maml:name>
				<maml:description>
					<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>City</maml:name>
				<maml:description>
					<maml:para>Specifies the user's town or city. This parameter sets the City property of a user. The LDAP display name (ldapDisplayName) of this property is &quot;l&quot;.

The following example shows how set this parameter.
  -City &quot;Las Vegas&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Clear</maml:name>
				<maml:description>
					<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Country</maml:name>
				<maml:description>
					<maml:para>Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;c&quot;. This value is not used by Windows 2000.

The following example shows how set this parameter.
  -Country &quot;IN&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ManagedBy</maml:name>
				<maml:description>
					<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PostalCode</maml:name>
				<maml:description>
					<maml:para>Specifies the user's postal code or zip code. This parameter sets the PostalCode property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;postalCode&quot;.

The following example shows how to set this parameter.
  -PostalCode &quot;28712&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ProtectedFromAccidentalDeletion</maml:name>
				<maml:description>
					<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Remove</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Replace</maml:name>
				<maml:description>
					<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>State</maml:name>
				<maml:description>
					<maml:para>Specifies the user's or Organizational Unit's state or province. This parameter sets the State property of a User or Organizational Unit object. The LDAP display name (ldapDisplayName) of this property is &quot;st&quot;.

The following example shows how set this parameter.
  -State  &quot;Nevada&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>StreetAddress</maml:name>
				<maml:description>
					<maml:para>Specifies the organizational unit's street address. This parameter sets the StreetAddress property of a organizational unit object. The LDAP display name (ldapDisplayName) of this property is &quot;street&quot;.

The following example shows how to set this parameter.
  -StreetAddress  &quot;1200 Main Street&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ADOrganizationalUnit</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies a modified copy of an organizational unit object to use to update the actual Active Directory organizational unit object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update organizational unit objects that have been retrieved by using the Get-ADOrganizationalUnit cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADOrganizationalUnit cmdlet to retrieve an instance of the ADOrganizationalUnit object. The object is modified by using the Windows PowerShell command line. Then the Set-ADOrganizationalUnit cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $organizationalUnitInstance = Get-ADOrganizationalUnit  -Identity &quot;OU=Accounting,DC=corp,DC=contoso,DC=com&quot;
Step 2: Modify one or more properties of the object instance.
    $organizationalUnitInstance.ManagedBy = &quot;CN=SaraDavisGroup,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;
Step3: Save your changes to Accounting.
    Set-ADOrganizationalUnit -Instance $organizationalUnitInstance </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Add</maml:name>
			<maml:description>
				<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>City</maml:name>
			<maml:description>
				<maml:para>Specifies the user's town or city. This parameter sets the City property of a user. The LDAP display name (ldapDisplayName) of this property is &quot;l&quot;.

The following example shows how set this parameter.
  -City &quot;Las Vegas&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Clear</maml:name>
			<maml:description>
				<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Country</maml:name>
			<maml:description>
				<maml:para>Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP Display Name (ldapDisplayName) of this property is &quot;c&quot;. This value is not used by Windows 2000.

The following example shows how set this parameter.
  -Country &quot;IN&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=saradavis,OU=users,OU=asia,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADGroup
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
  Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy
  Microsoft.ActiveDirectory.Management.ADDomain

This example shows how to set this parameter to an ADObject object instance named &quot;ADObjectInstance&quot;.
  -Identity   $ADObjectInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			<dev:type>
				<maml:name>ADOrganizationalUnit</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies a modified copy of an organizational unit object to use to update the actual Active Directory organizational unit object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.

The Instance parameter can only update organizational unit objects that have been retrieved by using the Get-ADOrganizationalUnit cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADOrganizationalUnit cmdlet to retrieve an instance of the ADOrganizationalUnit object. The object is modified by using the Windows PowerShell command line. Then the Set-ADOrganizationalUnit cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $organizationalUnitInstance = Get-ADOrganizationalUnit  -Identity &quot;OU=Accounting,DC=corp,DC=contoso,DC=com&quot;
Step 2: Modify one or more properties of the object instance.
    $organizationalUnitInstance.ManagedBy = &quot;CN=SaraDavisGroup,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;
Step3: Save your changes to Accounting.
    Set-ADOrganizationalUnit -Instance $organizationalUnitInstance </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADOrganizationalUnit</command:parameterValue>
			<dev:type>
				<maml:name>ADOrganizationalUnit</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ManagedBy</maml:name>
			<maml:description>
				<maml:para>Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property.
  Distinguished Name 
    Example:  CN=SaraDavis,OU=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

This parameter sets the Active Directory attribute with an LDAP Display Name of &quot;managedBy&quot;. 

The following example shows how to specify this parameter.
  -ManagedBy ContosoAdmins</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPrincipal</command:parameterValue>
			<dev:type>
				<maml:name>ADPrincipal</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PostalCode</maml:name>
			<maml:description>
				<maml:para>Specifies the user's postal code or zip code. This parameter sets the PostalCode property of a user. The LDAP Display Name (ldapDisplayName) of this property is &quot;postalCode&quot;.

The following example shows how to set this parameter.
  -PostalCode &quot;28712&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ProtectedFromAccidentalDeletion</maml:name>
			<maml:description>
				<maml:para>Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to true.
  -ProtectedFromAccidentalDeletion $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Remove</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Replace</maml:name>
			<maml:description>
				<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>State</maml:name>
			<maml:description>
				<maml:para>Specifies the user's or Organizational Unit's state or province. This parameter sets the State property of a User or Organizational Unit object. The LDAP display name (ldapDisplayName) of this property is &quot;st&quot;.

The following example shows how set this parameter.
  -State  &quot;Nevada&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>StreetAddress</maml:name>
			<maml:description>
				<maml:para>Specifies the organizational unit's street address. This parameter sets the StreetAddress property of a organizational unit object. The LDAP display name (ldapDisplayName) of this property is &quot;street&quot;.

The following example shows how to set this parameter.
  -StreetAddress  &quot;1200 Main Street&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADOrganizationalUnit</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An organizational unit object is received by the Identity parameter.

An organizational unit object that was retrieved by using the Get-ADOrganizationalUnit cmdlet and then modified is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADOrganizationalUnit</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified organizational unit object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADOrganizationalUnit -Identity &quot;OU=UserAccounts,DC=FABRIKAM,DC=COM&quot; -Description &quot;This Organizational Unit holds all of the users accounts of FABRIKAM.COM&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the description of the OrganizationalUnit with distinguishedName OU=UserAccounts,DC=FABRIKAM,DC=COM.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADOrganizationalUnit -Identity &quot;OU=UserAccounts,DC=FABRIKAM,DC=COM&quot; -ProtectedFromAccidentalDeletion $false
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the ProtectedFromAccidentalDeletion property to $false on the OrganizationalUnit with distinguishedName OU=UserAccounts,DC=FABRIKAM,DC=COM.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADOrganizationalUnit -Identity &quot;OU=AsiaPacific,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot; -Country &quot;AU&quot; -StreetAddress &quot;45 Martens Place&quot; -City Balmoral -State QLD -PostalCode 4171 -Replace @{co=&quot;Australia&quot;}
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the Country, City and State, PostalCode and co properties on the OrganizationalUnit 'OU=AsiaPacific,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$EuropeSalesOU = Get-ADOrganizationalUnit &quot;OU=Europe,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;
$EuropeSalesOU.Country = &quot;UK&quot;
$EuropeSalesOU.StreetAddress = &quot;22 Station Rd&quot;
$EuropeSalesOU.City = &quot;QUARRINGTON&quot;
$EuropeSalesOU.PostalCode = &quot;NG34 0NI&quot;
$EuropeSalesOU.co =&quot;United Kingdom&quot;
Set-ADOrganizationalUnit -Instance $EuropeSalesOU</dev:code>
  			<dev:remarks>
  			        <maml:para>Creates a new OrganizationalUnit using the OrganizationalUnit 'OU=Europe,OU=Sales,OU=UserAccounts,DC=FABRIKAM,DC=COM' as a template. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADOrganizationalUnit -Identity &quot;OU=Managed,DC=AppNC&quot; -Server &quot;FABRIKAM-SRV1:60000&quot; -Country &quot;UK&quot; 
</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the Country property of the OrganizationalUnit 'OU=Managed,DC=AppNC' in an AD LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144997</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADOrganizationalUnit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADOrganizationalUnit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADOrganizationalUnit</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADAccountControl
		</command:name>
		<maml:description>
			<maml:para>Modifies user account control (UAC) values for an Active Directory account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADAccountControl</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADAccountControl cmdlet modifies the user account control (UAC) values for an Active Directory user or computer account. UAC values are represented by cmdlet parameters. For example, set the PasswordExpired parameter to change whether an account is expired and to modify the ADS_UF_PASSWORD_EXPIRED UAC value. 

The Identity parameter specifies the Active Directory account to modify. 
You can identify an account by its distinguished name (DN), GUID, security identifier (SID) or security accounts manager (SAM) account name. You can also set the Identity parameter to an object variable such as $&lt;localADAccountObject&gt;, or you can pass an account object through the pipeline to the Identity parameter. For example, you can use the Search-ADAccount cmdlet to retrieve an account object and then pass the object through the pipeline to the Set-ADAccountControl cmdlet. Similarly, you can use Get-ADUser, Get-ADComputer or Get-ADServiceAccount cmdlets to retrieve account objects that you can pass through the pipeline to this cmdlet.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADAccountControl</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountNotDelegated</maml:name>
				<maml:description>
					<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllowReversiblePasswordEncryption</maml:name>
				<maml:description>
					<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CannotChangePassword</maml:name>
				<maml:description>
					<maml:para>Modifies the ability of an account to change its password. To disallow password change by the account set this to $true.. This parameter changes the Boolean value of the CannotChangePassword property of an account.

The following example shows how to specify the PasswordCannotChange parameter.
  -CannotChangePassword $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DoesNotRequirePreAuth</maml:name>
				<maml:description>
					<maml:para>Specifies whether Kerberos pre-authentication is required to logon using the user or computer account. This parameter sets the ADS_UF_DONT_REQUIRE_PREAUTH flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter so that Kerberos pre-authentication is required to logon to the account.
  -DoesNotRequirePreAuth $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Enabled</maml:name>
				<maml:description>
					<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>HomedirRequired</maml:name>
				<maml:description>
					<maml:para>Specifies whether a home directory is required for the account. This parameter sets the ADS_UF_HOMEDIR_REQUIRED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that a home directory is not required for the account.
  -HomedirRequired $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MNSLogonAccount</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account is a Majority Node Set (MNS) logon account. This parameter also sets the ADS_UF_MNS_LOGON_ACCOUNT flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

You can use MNS logon accounts to configure a multi-node cluster without using a shared disk drive.

The following example shows how to set this parameter to identify this account as an MNS account.
  -MSNLogonAccount $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordNeverExpires</maml:name>
				<maml:description>
					<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordNotRequired</maml:name>
				<maml:description>
					<maml:para>Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0 
  $true or 1 

The following example shows how to set this parameter so that as password is not required for the account.
  -PasswordNotRequired $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TrustedForDelegation</maml:name>
				<maml:description>
					<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TrustedToAuthForDelegation</maml:name>
				<maml:description>
					<maml:para>Specifies whether an account is enabled for delegation. When this parameter is set to true, a service running under such an account can impersonate a client on other remote servers on the network. This parameter sets the ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1 

The following example shows how to set this parameter so that the account is enabled for delegation.
  -TrustedToAuthForDelegation $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UseDESKeyOnly</maml:name>
				<maml:description>
					<maml:para>Specifies whether an account is restricted to use only Data Encryption Standard (DES) encryption types for keys. This parameter sets the 
ADS_UF_USE_DES_KEY_ONLY flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1 
 
The following example shows how to set this parameter so that an account must use DES encryption types for keys.
  -UseDESKeyOnly $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountNotDelegated</maml:name>
			<maml:description>
				<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AllowReversiblePasswordEncryption</maml:name>
			<maml:description>
				<maml:para>Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter to true.
  -AllowReversiblePasswordEncryption $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CannotChangePassword</maml:name>
			<maml:description>
				<maml:para>Modifies the ability of an account to change its password. To disallow password change by the account set this to $true.. This parameter changes the Boolean value of the CannotChangePassword property of an account.

The following example shows how to specify the PasswordCannotChange parameter.
  -CannotChangePassword $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DoesNotRequirePreAuth</maml:name>
			<maml:description>
				<maml:para>Specifies whether Kerberos pre-authentication is required to logon using the user or computer account. This parameter sets the ADS_UF_DONT_REQUIRE_PREAUTH flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter so that Kerberos pre-authentication is required to logon to the account.
  -DoesNotRequirePreAuth $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Enabled</maml:name>
			<maml:description>
				<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>HomedirRequired</maml:name>
			<maml:description>
				<maml:para>Specifies whether a home directory is required for the account. This parameter sets the ADS_UF_HOMEDIR_REQUIRED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1

The following example shows how to set this parameter so that a home directory is not required for the account.
  -HomedirRequired $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MNSLogonAccount</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account is a Majority Node Set (MNS) logon account. This parameter also sets the ADS_UF_MNS_LOGON_ACCOUNT flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

You can use MNS logon accounts to configure a multi-node cluster without using a shared disk drive.

The following example shows how to set this parameter to identify this account as an MNS account.
  -MSNLogonAccount $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordNeverExpires</maml:name>
			<maml:description>
				<maml:para>Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

Note: This parameter cannot be set to $true or 1 for an account that also has the ChangePasswordAtLogon property set to true.

The following example shows how to set this parameter so that the password can expire.
  -PasswordNeverExpires $false</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordNotRequired</maml:name>
			<maml:description>
				<maml:para>Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0 
  $true or 1 

The following example shows how to set this parameter so that as password is not required for the account.
  -PasswordNotRequired $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>TrustedForDelegation</maml:name>
			<maml:description>
				<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>TrustedToAuthForDelegation</maml:name>
			<maml:description>
				<maml:para>Specifies whether an account is enabled for delegation. When this parameter is set to true, a service running under such an account can impersonate a client on other remote servers on the network. This parameter sets the ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1 

The following example shows how to set this parameter so that the account is enabled for delegation.
  -TrustedToAuthForDelegation $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UseDESKeyOnly</maml:name>
			<maml:description>
				<maml:para>Specifies whether an account is restricted to use only Data Encryption Standard (DES) encryption types for keys. This parameter sets the 
ADS_UF_USE_DES_KEY_ONLY flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1 
 
The following example shows how to set this parameter so that an account must use DES encryption types for keys.
  -UseDESKeyOnly $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">bool</command:parameterValue>
			<dev:type>
				<maml:name>bool</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An account object is received by the Identity parameter.
 
Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
This cmdlet does not work when connected to Global Catalog port.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountControl JimmyBi -PasswordNotRequired $false
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the flag on userAccountControl to make sure that a password is required for logon.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountControl 'CN=Jimmy Bischoff,OU=HumanResources,OU=UserAccounts,DC=FABRIKAM,DC=COM' -CannotChangePassword $true
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the security descriptor of the user to make sure they cannot change their own password.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountControl SQLAdmin1 -AccountNotDelegated $true
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the flag on userAccountControl to make sure that the account cannot be delegated.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountControl 'CN=IIS01 SvcAccount,OU=ServiceAccounts,OU=Managed,DC=FABRIKAM,DC=COM' -TrustedToAuthForDelegation $true
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the flag on userAccountControl to make sure that the account is now trusted to authenticate for delegation.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountControl -Identity &quot;FABRIKAM-SRV1&quot; -TrustedForDelegation $true
</dev:code>
  			<dev:remarks>
  			        <maml:para>The specified computer is now set to be trusted for delegation.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountControl DickBe -PasswordNeverExpires $true
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the password of the user to never expire.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountControl 'CN=Dick Beekman,OU=HumanResources,OU=UserAccounts,DC=FABRIKAM,DC=COM' -HomedirRequired $true
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the user account to require a Home Directory.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144998</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADAccountPassword
		</command:name>
		<maml:description>
			<maml:para>Modifies the password of an Active Directory account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADAccountPassword</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADAccountPassword cmdlet sets the password for a user, computer or service account.

The Identity parameter specifies the Active Directory account to modify. 
You can identify an account by its distinguished name (DN), GUID, security identifier (SID) or security accounts manager (SAM) account name. You can also set the Identity parameter to an object variable such as $&lt;localADAccountObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Search-ADAccount cmdlet to retrieve an account object and then pass the object through the pipeline to the Set-ADAccountPassword cmdlet. Similarly, you can use Get-ADUser, Get-ADComputer or Get-ADServiceAccount cmdlets to retrieve account objects that you can pass through the pipeline to this cmdlet.

You must set the OldPassword and the NewPassword parameters to set the password unless you specify the Reset parameter. When you specify the Reset parameter, the password is set to the NewPassword value that you provide and the OldPassword parameter is not required.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADAccountPassword</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NewPassword</maml:name>
				<maml:description>
					<maml:para>Specifies a new password value. This value is stored as an encrypted string.

The following example shows how to set this parameter. This command will prompt you and wait for a password.
  -NewPassword (Read-Host -AsSecureString &quot;New Password&quot;)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OldPassword</maml:name>
				<maml:description>
					<maml:para>Specifies the most recent password value. This value is processed as a encrypted string.

The following example shows how to set this parameter. This command will prompt you and wait for a password.
 -OldPassword  (Read-Host -AsSecureString &quot;Old Password&quot;)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Reset</maml:name>
				<maml:description>
					<maml:para>Specifies to reset the password on an account. When you use this parameter, you must set the NewPassword parameter. You do not need to specify the OldPassword parameter.

The following example shows how to use this parameter to set a new password. This command will prompt you then wait for a password.
  -Reset -NewPassword (Read-Host -AsSecureString &quot;New Password&quot;)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM account name  (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=SaraDavis,CN=Europe,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a user object instance named &quot;userInstance&quot;.
  -Identity   $userInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NewPassword</maml:name>
			<maml:description>
				<maml:para>Specifies a new password value. This value is stored as an encrypted string.

The following example shows how to set this parameter. This command will prompt you and wait for a password.
  -NewPassword (Read-Host -AsSecureString &quot;New Password&quot;)</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			<dev:type>
				<maml:name>SecureString</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OldPassword</maml:name>
			<maml:description>
				<maml:para>Specifies the most recent password value. This value is processed as a encrypted string.

The following example shows how to set this parameter. This command will prompt you and wait for a password.
 -OldPassword  (Read-Host -AsSecureString &quot;Old Password&quot;)</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
			<dev:type>
				<maml:name>SecureString</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Reset</maml:name>
			<maml:description>
				<maml:para>Specifies to reset the password on an account. When you use this parameter, you must set the NewPassword parameter. You do not need to specify the OldPassword parameter.

The following example shows how to use this parameter to set a new password. This command will prompt you then wait for a password.
  -Reset -NewPassword (Read-Host -AsSecureString &quot;New Password&quot;)</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An account object is received by the Identity parameter.

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller. This cmdlet does not work when connected to Global Catalog port.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountPassword 'CN=Jeremy Los,OU=Accounts,DC=Fabrikam,DC=com' -Reset -NewPassword (ConvertTo-SecureString -AsPlainText &quot;p@ssw0rd&quot; -Force)
</dev:code>
  			<dev:remarks>
 				<maml:para>
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Sets the password of the user account with DistinguishedName: 'CN=Jeremy Los,OU=Accounts,DC=Fabrikam,DC=com' to 'p@ssw0rd'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountPassword -Identity tmakovec -OldPassword (ConvertTo-SecureString -AsPlainText &quot;p@ssw0rd&quot; -Force) -NewPassword (ConvertTo-SecureString -AsPlainText &quot;qwert@12345&quot; -Force)
</dev:code>
  			<dev:remarks>
 				<maml:para>
</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Sets the password of the user account with SamAccountName: tmakovec to 'qwert@12345'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountPassword -Identity saradavi</dev:code>
  			<dev:remarks>
 				<maml:para>Please enter the current password for 'CN=Sara Davis,CN=Users,DC=Fabrikam,DC=com'
Password:**********
Please enter the desired password for 'CN=Sara Davis,CN=Users,DC=Fabrikam,DC=com'
Password:***********
Repeat Password:***********</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Sets the password of the user account with DistinguishedName: 'CN=Sara Davis,CN=Users,DC=Fabrikam,DC=com' (user is prompted for old and new password).</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$newPassword = (Read-Host -Prompt &quot;Provide New Password&quot; -AsSecureString); Set-ADAccountPassword -Identity mollyd -NewPassword $newPassword -Reset</dev:code>
  			<dev:remarks>
 				<maml:para>Provide New Password: **********</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Prompts the user for a new password that is stored in a temporary variable named $newPassword, then uses it to reset the password for the user account with SamAccountName: mollyd.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>PS C:\Users\administrator.FABRIKAM&gt; set-adaccountpassword &quot;CN=Molly Dempsey,OU=AccountDeptOU,DC=AppNC&quot; -server &quot;dsp13a24:60000&quot;
</dev:code>
  			<dev:remarks>
 				<maml:para>Please enter the current password for 'CN=mollyd,OU=AccountDeptOU,DC=AppNC'
Password:**********
Please enter the desired password for 'CN=mollyd,OU=AccountDeptOU,DC=AppNC'
Password:**********
Repeat Password:**********</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Sets the password of the user account with DistinguishedName: 'CN=mollyd,OU=AccountDeptOU,DC=AppNC' in the AD LDS instance: &quot;dsp13a24:60000&quot; (user is prompted for old and new password).</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144999</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Search-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADAccountExpiration
		</command:name>
		<maml:description>
			<maml:para>Sets the expiration date for an Active Directory account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADAccountExpiration</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADAccountExpiration cmdlet sets the expiration time for a user, computer or service account. To specify an exact time, use the DateTime parameter. To specify a time period from the current time, use the TimeSpan parameter. 

The Identity parameter specifies the Active Directory account to modify. 
You can identify an account by its distinguished name (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to an object variable such as $&lt;localADAccountObject&gt;, or you can pass an account object through the pipeline to the Identity parameter. For example, you can use the Search-ADAccount cmdlet to retrieve an account object and then pass the object through the pipeline to the Set-ADAccountExpiration cmdlet. Similarly, you can use Get-ADUser, Get-ADComputer or Get-ADServiceAccount cmdlets to retrieve account objects that you can pass through the pipeline to this cmdlet.

For AD LDS environments, the Partition parameter must be specified except in the following two conditions:
  -The cmdlet is run from an Active Directory provider drive.
  -A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADAccountExpiration</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>TimeSpan</maml:name>
				<maml:description>
					<maml:para>Specifies a time interval that begins at the current time. The account expires at the end of the time interval.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: 
-10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
 Set the time to 2 days
      -TimeSpan &quot;2&quot;
Set the time to 4 hours
      -TimeSpan &quot;4:00&quot;
 Set the time to 5 minutes
      -TimeSpan &quot;0:5&quot;
 Set the time to 45 seconds
      -TimeSpan &quot;0:0:45&quot;

For example, to set an account to expire in 10 days, specify the TimeSpan parameter as follows.

   -TimeSpan &quot;10&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">TimeSpan</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>DateTime</maml:name>
				<maml:description>
					<maml:para>Species the expiration time for the account by using a DateTime value. The following examples show commonly-used syntax to specify a DateTime value. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC.
  &quot;2000-04-17T14:22:48.0000000&quot; 

The following example shows how to set the DateTime parameter to June 18, 2012 at 2:00:00 AM.
  -DateTime &quot;6/18/2012 2:00:00 AM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>DateTime</maml:name>
			<maml:description>
				<maml:para>Species the expiration time for the account by using a DateTime value. The following examples show commonly-used syntax to specify a DateTime value. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC.
  &quot;2000-04-17T14:22:48.0000000&quot; 

The following example shows how to set the DateTime parameter to June 18, 2012 at 2:00:00 AM.
  -DateTime &quot;6/18/2012 2:00:00 AM&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.DateTime]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>TimeSpan</maml:name>
			<maml:description>
				<maml:para>Specifies a time interval that begins at the current time. The account expires at the end of the time interval.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: 
-10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
 Set the time to 2 days
      -TimeSpan &quot;2&quot;
Set the time to 4 hours
      -TimeSpan &quot;4:00&quot;
 Set the time to 5 minutes
      -TimeSpan &quot;0:5&quot;
 Set the time to 45 seconds
      -TimeSpan &quot;0:0:45&quot;

For example, to set an account to expire in 10 days, specify the TimeSpan parameter as follows.

   -TimeSpan &quot;10&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">TimeSpan</command:parameterValue>
			<dev:type>
				<maml:name>TimeSpan</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An account object is received by the Identity parameter.

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADAccountExpiration KarenBe -DateTime &quot;10/18/2008&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the account with SamAccountName: KarenBe to expire on the 18th of October, 2008.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADGroupMember BO1Accounts | where {$_.objectClass -eq &quot;user&quot;} | Set-ADAccountExpiration -timespan 60.0:0
</dev:code>
  			<dev:remarks>
  			        <maml:para>Sets the expiration date of all the user accounts who are a member of the group: BO1Accounts to 60 days from now.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=145000</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ADAccountExpiration</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Search-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADUser</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADComputer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADServiceAccount
		</command:name>
		<maml:description>
			<maml:para>Modifies an Active Directory service account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADServiceAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADServiceAccount cmdlet modifies the properties of an Active Directory service account. You can modify commonly used property values by using the cmdlet parameters. Property values that are not associated with cmdlet parameters can be modified by using the Add, Replace, Clear and Remove parameters.  

The Identity parameter specifies the Active Directory service account to modify. You can identify a service account by its distinguished name (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to an object variable such as $&lt;localServiceAccountObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Get-ADServiceAccount cmdlet to retrieve a service account object and then pass the object through the pipeline to the Set-ADServiceAccount cmdlet.

The Instance parameter provides a way to update a service account object by applying the changes made to a copy of the object. When you set the Instance parameter to a copy of an Active Directory service account object that has been modified, the Set-ADServiceAccount cmdlet makes the same changes to the original service account object. To get a copy of the object to modify, use the Get-ADServiceAccount object. When you specify the Instance parameter you should not pass the Identity parameter. For more information about the Instance parameter, see the Instance parameter description. 

For more information about how the Instance concept is used in Active Directory cmdlets, see about_ActiveDirectory_Instance.

The following examples show how to modify the ServicePrincipalNames property of a service account object by using three methods:
 -By specifying the Identity and the ServicePrincipalNames parameters
 -By passing a service account object through the pipeline and specifying the ServicePrincipalNames parameter
 -By specifying the Instance parameter.

Method 1: Modify the ServicePrincipalNames property for the AccessIndia service account by using the Identity and ServicePrincipalNames parameters. 

Set-ADServiceAccount -Identity AccessIndia -ServicePrincipalNames @{Add=ACCESSAPP/india.contoso.com}

Method 2: Modify the ServicePrincipalNames property for the AccessIndia service account by passing the AccessIndia service account through the pipeline and specifying the ServicePrincipalNames parameter.

 Get-ADServiceAccount -Identity &quot;AccessIndia&quot; | Set-ADServiceAccount -ServicePrincipalNames @{Add=ACCESSAPP/india.contoso.com} 


Method 3: Modify the &lt;property&gt; property for the AccessIndia service account by using the Windows PowerShell command line to modify a local instance of the AccessIndia service account. Then set the Instance parameter to the local instance.

$serviceAccount = Get-ADServiceAccount -Identity &quot;AccessIndia&quot;
 $serviceAccount.ServicePrincipalNames = @{Add=ACCESSAPP/india.contoso.com} 
 Set-ADServiceAccount -Instance $serviceAccount. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountExpirationDate</maml:name>
				<maml:description>
					<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccountNotDelegated</maml:name>
				<maml:description>
					<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Add</maml:name>
				<maml:description>
					<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Certificates</maml:name>
				<maml:description>
					<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Clear</maml:name>
				<maml:description>
					<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Enabled</maml:name>
				<maml:description>
					<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>HomePage</maml:name>
				<maml:description>
					<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Remove</maml:name>
				<maml:description>
					<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Replace</maml:name>
				<maml:description>
					<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SamAccountName</maml:name>
				<maml:description>
					<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ServicePrincipalNames</maml:name>
				<maml:description>
					<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TrustedForDelegation</maml:name>
				<maml:description>
					<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ADServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Instance</maml:name>
				<maml:description>
					<maml:para>Specifies a modified copy of a service account object to use to update the actual Active Directory service account object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed. 

The Instance parameter can only update service account objects that have been retrieved by using the Get-ADServiceAccount cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADServiceAccount cmdlet to retrieve an instance of the ADServiceAccount object. The object is modified by using the Windows PowerShell command line. Then the Set-ADServiceAccount cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $serviceAccountInstance = Get-ADServiceAccount  -Identity ADServiceAdmin
Step 2: Modify one or more properties of the object instance.
    $serviceAccountInstance.Description = &quot;default&quot;
Step3: Save your changes to ADServiceAdmin.
    Set-ADServiceAccount -Instance $serviceAccountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountExpirationDate</maml:name>
			<maml:description>
				<maml:para>Specifies the expiration date for an account. When you set this parameter to 0, the account never expires. This parameter sets the AccountExpirationDate property of an account object. The LDAP Display name (ldapDisplayName) for this property is accountExpires.

Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
  &quot;4/17/2006&quot;
  &quot;Monday, April 17, 2006&quot;
  &quot;2:22:45 PM&quot;
  &quot;Monday, April 17, 2006 2:22:45 PM&quot;

These examples specify the same date and the time without the seconds.
  &quot;4/17/2006 2:22 PM&quot;
  &quot;Monday, April 17, 2006 2:22 PM&quot;
  &quot;2:22 PM&quot;

The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
  &quot;Mon, 17 Apr 2006 21:22:48 GMT&quot;

The following example shows how to specify a round-trip value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC. 
  &quot;2006-04-17T14:22:48.0000000&quot; 

The following example shows how to set this parameter to the date May 1, 2012 at 5 PM. 
  -AccountExpirationDate &quot;05/01/2012 5:00:00 PM&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.DateTime]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.DateTime]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AccountNotDelegated</maml:name>
			<maml:description>
				<maml:para>Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include 
  $false or 0
  $true or 1

The following example shows how to set this parameter so that the security context of the account is not delegated to a service.
  -AccountNotDelegated $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Add</maml:name>
			<maml:description>
				<maml:para>Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is 
   -Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}

For example, if you want to remove the value &quot;555-222-2222&quot; and add the values &quot;555-222-1111&quot; and &quot;555-222-3333&quot; to Phone-Office-Other attribute (LDAP display name 'otherTelephone'), and add the value &quot;555-222-9999&quot; to Phone-Mobile-Other (LDAP display name 'otherMobile'), set the Add and Remove parameters as follows.

  -Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Certificates</maml:name>
			<maml:description>
				<maml:para>Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name (ldapDisplayName) for this property is &quot;userCertificate&quot;.

Syntax:
To add values:
  -Certificates @{Add=value1,value2,...}
To remove values:
  -Certificates @{Remove=value3,value4,...}
To replace values:
  -Certificates @{Replace=value1,value2,...}
To clear all values:
  -Certificates $null

You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values 
  -Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to create a certificate by using the New-Object cmdlet, and then add it to a user account. When this cmdlet is run, &lt;certificate password&gt; is replaced by the password used to add the certificate.

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate certificate1.cer  &lt;certificate password&gt;
Set-ADUser saradavis  -Certificates @{Add=$cert}

The following example shows how to add a certificate that is specified as a byte array.
    Set-ADUser saradavis  -Certificates @{Add= [Byte[]](0xC5,0xEE,0x53,...)}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Clear</maml:name>
			<maml:description>
				<maml:para>Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName

For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Clear parameter as follows.

  -Clear otherTelephone

When you use the Add, Remove, Replace and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;description&quot;. 

The following example shows how to set this parameter to a sample description.
  -Description &quot;Description of the object&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name (ldapDisplayName) for this property is &quot;displayName&quot;.

The following example shows how to set this parameter.
  -DisplayName &quot;Sara Davis Laptop&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Enabled</maml:name>
			<maml:description>
				<maml:para>Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. Possible values for this parameter include:
  $false or 0
  $true or 1 

The following example shows how to set this parameter to enable the account.
  -Enabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>HomePage</maml:name>
			<maml:description>
				<maml:para>Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name (ldapDisplayName) for this property is &quot;wWWHomePage&quot;.

The following example shows how to set this parameter to a URL.
  -HomePage &quot;http://employees.contoso.com/sdavis&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Instance</maml:name>
			<maml:description>
				<maml:para>Specifies a modified copy of a service account object to use to update the actual Active Directory service account object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed. 

The Instance parameter can only update service account objects that have been retrieved by using the Get-ADServiceAccount cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.

The following is an example of how to use the Get-ADServiceAccount cmdlet to retrieve an instance of the ADServiceAccount object. The object is modified by using the Windows PowerShell command line. Then the Set-ADServiceAccount cmdlet saves the changes to the Active Directory object.

Step 1: Retrieve a local instance of the object.
    $serviceAccountInstance = Get-ADServiceAccount  -Identity ADServiceAdmin
Step 2: Modify one or more properties of the object instance.
    $serviceAccountInstance.Description = &quot;default&quot;
Step3: Save your changes to ADServiceAdmin.
    Set-ADServiceAccount -Instance $serviceAccountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Remove</maml:name>
			<maml:description>
				<maml:para>Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is 
  -Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}

For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows.
  -Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}

When you use the Add, Remove, Replace and Clear parameters together, the parameters will be applied in the following sequence:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Replace</maml:name>
			<maml:description>
				<maml:para>Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is 
  -Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}

For example, if you want to replace the value &quot;555-222-2222&quot; with the values &quot;555-222-1111&quot; for Phone-Office-Other attribute (LDAP display name 'otherTelephone') set the Replace parameter as follows.

  -Replace @{otherTelephone='555-222-2222', '555-222-1111'}

When you use the Add, Remove, Replace  and Clear parameters together, the operations will be performed in the following order:
..Remove
..Add
..Replace
..Clear</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SamAccountName</maml:name>
			<maml:description>
				<maml:para>Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name (ldapDisplayName) for this property is &quot;sAMAccountName&quot;.

The following example shows how to specify this parameter.
  -SAMAccountName &quot;saradavis&quot;

Note: If the string value provided is not terminated with a '$' character, the system adds one if needed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ServicePrincipalNames</maml:name>
			<maml:description>
				<maml:para>Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name (ldapDisplayName) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values. 
Syntax:
To add values:
  -ServicePrincipalNames @{Add=value1,value2,...}
To remove values:
  -ServicePrincipalNames @{Remove=value3,value4,...}
To replace values:
  -ServicePrincipalNames @{Replace=value1,value2,...}
To clear all values:
  -ServicePrincipalNames $null

You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names. 
  @{Add=value1,value2,...};@{Remove=value3,value4,...}

The operators will be applied in the following sequence:
..Remove
..Add
..Replace

The following example shows how to add and remove service principal names.
  -ServicePrincipalNames-@{Add=&quot;SQLservice\accounting.corp.contoso.com:1456&quot;};{Remove=&quot;SQLservice\finance.corp.contoso.com:1456&quot;}</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>TrustedForDelegation</maml:name>
			<maml:description>
				<maml:para>Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. Possible values for this parameter are:
  $false or 0
  $true or 1

The following example shows how to specify that an account is trusted for Kerberos delegation.
  -TrustedForDelegation $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A service account object is received by the Identity parameter.

A service account object that was retrieved by using the Get-ADServiceAccount cmdlet and then modified is received by the Instance parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified service account object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADServiceAccount service1 -Description &quot;Secretive Data Server&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the description of Service Account 'service1' to &quot;Secretive Data Server&quot;</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADServiceAccount Mongol01ADAM -ServicePrincipalNames @{replace=&quot;ADAMwdb/a.contoso.com&quot;, &quot;ADAMbdb/a.contoso.com&quot;} 
</dev:code>
  			<dev:remarks>
  			        <maml:para>Replace the value of property ServicePrincipalNames with &quot;ADAMwdb/a.contoso.com&quot;, &quot;ADAMbdb/a.contoso.com&quot;</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=145001</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Install-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Uninstall-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADDomainMode
		</command:name>
		<maml:description>
			<maml:para>Sets the domain mode for an Active Directory domain.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADDomainMode</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADDomainMode cmdlet sets the domain mode for a domain. You specify the domain mode by setting the DomainMode parameter. 

The domain mode can be set to the following values that are listed in order of functionality from lowest to highest. 

  Windows2000Domain
  Windows2003InterimDomain
  Windows2003Domain
  Windows2008Domain
  Windows2008R2Domain

You can change the domain mode to a mode with higher functionality only. For example, if the domain mode for a domain is set to Windows 2003, you can use this cmdlet to change the mode to Windows 2008. However, in the same situation, you cannot use this cmdlet to change the domain mode from Windows 2003 to Windows 2000. 

The Identity parameter specifies the Active Directory domain to modify. You can identify a domain by its distinguished name (DN), GUID, security identifier (SID), DNS domain name, or NetBIOS name. You can also set the Identity parameter to a domain object variable such as $&lt;localADDomainObject&gt;, or you can pass a domain object through the pipeline to the Identity parameter. For example, you can use the Get-ADDomain cmdlet to retrieve a domain object and then pass the object through the pipeline to the Set-ADDomainMode cmdlet.

The Set-ADDomainMode always prompts for permission unless you specify -confirm:$false.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADDomainMode</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDomain</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>DomainMode</maml:name>
				<maml:description>
					<maml:para>Specifies the domain mode for an Active Directory domain. You can set the domain mode to one of the following values that are listed in order of functionality from least to most. 

  Windows2000Domain or 0
  Windows2003InterimDomain or 1  
  Windows2003Domain or 2
  Windows2008Domain or 3
  Windows2008R2Domain or 4

The following example shows how to set this parameter to Windows 2008 R2.
  -DomainMode Windows2008R2Domain</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Windows2000Domain</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Windows2003InterimDomain</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Windows2003Domain</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Windows2008Domain</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Windows2008R2Domain</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >UnknownDomain</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>DomainMode</maml:name>
			<maml:description>
				<maml:para>Specifies the domain mode for an Active Directory domain. You can set the domain mode to one of the following values that are listed in order of functionality from least to most. 

  Windows2000Domain or 0
  Windows2003InterimDomain or 1  
  Windows2003Domain or 2
  Windows2008Domain or 3
  Windows2008R2Domain or 4

The following example shows how to set this parameter to Windows 2008 R2.
  -DomainMode Windows2008R2Domain</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomainMode</command:parameterValue>
			<dev:type>
				<maml:name>ADDomainMode</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Windows2000Domain</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Windows2003InterimDomain</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Windows2003Domain</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Windows2008Domain</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Windows2008R2Domain</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>UnknownDomain</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDomain</command:parameterValue>
			<dev:type>
				<maml:name>ADDomain</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.ActiveDirectory.Management.ADDomain</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A domain object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADDomain</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified domain object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
This cmdlet does not work when connected to Global Catalog port.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADDomainMode -Identity fabrikam.com -DomainMode Windows2003Domain
</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the DomainMode property of the fabrikam.com domain to Windows2003Domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$pdc = Get-ADDomainController -Discover -Service PrimaryDC
Set-ADDomainMode -Identity $pdc.Domain -Server $pdc.HostName[0] -DomainMode Windows2003Domain</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the DomainMode of the current logged on user's domain to Windows2003Domain. The Set operation targets the PrimaryDC FSMO to apply the update.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=145002</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADDomain</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADForestMode
		</command:name>
		<maml:description>
			<maml:para>Sets the forest mode for an Active Directory forest.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADForestMode</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADForestMode cmdlet sets the Forest mode for an Active Directory forest. You specify the forest mode by setting the ForestMode parameter. The forest mode can be set to the following values that are listed in order of functionality from lowest to highest. 
  Windows2000Forest
  Windows2003InterimForest
  Windows2003Forest  
  Windows2008Forest
  Windows2008R2Forest

The Identity parameter specifies the Active Directory forest to modify. You can identify a forest by its fully qualified domain name (FQDN), GUID, DNS host name, or NetBIOS name. You can also specify the forest by passing a forest object through the pipeline. For example, you can use the Get-ADForest cmdlet to retrieve a forest object and then pass the object through the pipeline to the Set-ADForestMode.

Set-ADForestMode will prompt for confirmation by default. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADForestMode</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory forest object by providing one of the following attribute values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  DNS host name
    Example: dnsServer.corp.contoso.com
  NetBIOS name
    Example: corp

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a forest object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to a forest object instance named &quot;forestInstance&quot;.
  -Identity $forestInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADForest</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>ForestMode</maml:name>
				<maml:description>
					<maml:para>Specifies the forest mode for an Active Directory forest. The possible values for this parameter are:   Windows2000Forest or 0
  Windows2003InterimForest or 1
  Windows2003Forest or 2
  Windows2008Forest or 3
  Windows2008R2Forest or 4

The values are listed in order of functionality from least to most. 

The following example shows how to set this parameter.
  -ForestMode Windows2008R2Forest</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Windows2000Forest</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Windows2003InterimForest</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Windows2003Forest</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Windows2008Forest</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Windows2008R2Forest</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >UnknownForest</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>ForestMode</maml:name>
			<maml:description>
				<maml:para>Specifies the forest mode for an Active Directory forest. The possible values for this parameter are:   Windows2000Forest or 0
  Windows2003InterimForest or 1
  Windows2003Forest or 2
  Windows2008Forest or 3
  Windows2008R2Forest or 4

The values are listed in order of functionality from least to most. 

The following example shows how to set this parameter.
  -ForestMode Windows2008R2Forest</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADForestMode</command:parameterValue>
			<dev:type>
				<maml:name>ADForestMode</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Windows2000Forest</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Windows2003InterimForest</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Windows2003Forest</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Windows2008Forest</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Windows2008R2Forest</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>UnknownForest</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory forest object by providing one of the following attribute values. The identifier in parentheses is the LDAP display name for the attribute.

  Fully qualified domain name
    Example: corp.contoso.com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  DNS host name
    Example: dnsServer.corp.contoso.com
  NetBIOS name
    Example: corp

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a forest object instance. 

This example shows how to set the parameter to a fully qualified domain name.
  -Identity &quot;corp.contoso.com&quot;

This example shows how to set this parameter to a forest object instance named &quot;forestInstance&quot;.
  -Identity $forestInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADForest</command:parameterValue>
			<dev:type>
				<maml:name>ADForest</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADForest</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A forest object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADForest</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns the modified forest object when the PassThru parameter is specified. By default, this cmdlet does not generate any output.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADForestMode -Identity fabrikam.com -ForestMode Windows2003Forest
</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the ForestMode to Windows2003Forest in the forest fabrikam.com.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$currentForest = Get-ADForest 
Set-ADForestMode -Identity $currentForest -Server $currentForest.SchemaMaster -ForestMode Windows2008R2Forest 
</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the forest mode of the current logged on user's forest. The Set operation targets the Schema Master FSMO to apply the update.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=145003</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADForest</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ADDefaultDomainPasswordPolicy
		</command:name>
		<maml:description>
			<maml:para>Modifies the default password policy for an Active Directory domain.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ADDefaultDomainPasswordPolicy</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ADDefaultDomainPasswordPolicy cmdlet modifies the properties of the default password policy for a domain. You can modify property values by using the cmdlet parameters. 

The Identity parameter specifies the domain whose default password policy you want modify. You can identify a domain by its Distinguished Name (DN), GUID, Security Identifier (SID), DNS domain name, or NETBIOS name. You can also set the parameter to an ADDomain  object variable,  or pass an ADDomain object through the pipeline to the Identity parameter. For example, you can use the Get-ADDomain cmdlet to retrieve a domain object and then pass the object through the pipeline to the Set-ADDomainDefaultPasswordPolicy cmdlet.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ADDefaultDomainPasswordPolicy</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADDefaultDomainPasswordPolicy</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComplexityEnabled</maml:name>
				<maml:description>
					<maml:para>Specifies whether password complexity is enabled for the password policy. If enabled, the password must contain two of the following three character types: 
  Uppercase characters (A, B, C, D, E, ...)
  Lowercase characters (a, b, c, d, e, ...)
  Numerals (0, 1, 2, 3, ...) 

This parameter sets the ComplexityEnabled property of a password policy. 

Possible values for this parameter include:
  $false or 0 - Disables password complexity
  $true or 1 - Enables password complexity

The following example shows how to set this parameter to true.
  -ComplexityEnabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LockoutDuration</maml:name>
				<maml:description>
					<maml:para>Specifies the length of time that an account is locked after the number of failed login attempts exceeds the lockout threshold. You cannot login to an account that is locked until the lockout duration time period has expired. This parameter sets the lockoutDuration property of a password policy object. The LDAP display name (ldapDisplayName) of this property is &quot;msDS-LockoutDuration&quot;.

The lockout duration must be greater than or equal to the lockout observation time for a password policy. Use the LockOutObservationWindow parameter to set the lockout observation time. 

Specify the lockout duration time interval in the following format.
    [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutDuration &quot;2&quot;
  Set the time to 4 hours
    -LockoutDuration &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutDuration &quot;0:5&quot;
  Set the time to 45 seconds
    LockoutDuration &quot;0:0:45&quot;

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LockoutObservationWindow</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum time interval between two unsuccessful login attempts before the number of unsuccessful login attempts is reset to 0. An account is locked when the number of unsuccessful login attempts exceeds the password policy lockout threshold. This parameter sets the lockoutObservationWindow property of a password policy object. The LDAP Display Name (ldapDisplayName) of this property is &quot;msDS-lockoutObservationWindow&quot;.

The lockout observation window must be smaller than or equal to the lockout duration for a password policy. Use the LockoutDuration parameter to set the lockout duration time.

Specify the time interval in the following format.
   [-]D:H:M:S.F 

    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutObservationWindow &quot;2&quot;
  Set the time to 4 hours
    -LockoutObservationWindow &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutObservationWindow &quot;0:5&quot;
  Set the time to 45 seconds
    -LockoutObservationWindow &quot;0:0:45&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LockoutThreshold</maml:name>
				<maml:description>
					<maml:para>Specifies the number of unsuccessful login attempts that are permitted before an account is locked out. This number increases when the time between unsuccessful login attempts is less than the time specified for the lockout observation time window. This parameter sets the LockoutThreshold property of a password policy. 

The following example shows how to set the lockout threshold to 3 login attempts.
  -LockoutThreshold 3</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MaxPasswordAge</maml:name>
				<maml:description>
					<maml:para>Specifies the maximum length of time that you can have the same password. After this time period, the password expires and you must create a new one. 

This parameter sets the maxPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;maxPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    MaxPasswordAge &quot;2&quot;
  Set the time span to the previous 2 days
    MaxPasswordAge &quot;-2&quot;
  Set the time span to 4 hours
    MaxPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    MaxPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    MaxPasswordAge &quot;0:0:45&quot; </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MinPasswordAge</maml:name>
				<maml:description>
					<maml:para>Specifies the minimum length of time before you can change a password.

This parameter sets the minPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;minPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    -MinPasswordAge &quot;2&quot;
  Set the time span to 4 hours
    -MinPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    -MinPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    -MinPasswordAge &quot;0:0:45&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MinPasswordLength</maml:name>
				<maml:description>
					<maml:para>Specifies the minimum number of characters that a password must contain.  This parameter sets the MinPasswordLength property of the password policy. 

The following example shows how to set this parameter.
  -MinPasswordLength 15</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PasswordHistoryCount</maml:name>
				<maml:description>
					<maml:para>Specifies the number of previous passwords to save.  A user cannot reuse a password in the list of saved passwords. This parameter sets the PasswordHistoryCount property for a password policy. 

The following example shows how to set this parameter to save 10 previous passwords.
  -PasswordHistoryCount 10</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ReversibleEncryptionEnabled</maml:name>
				<maml:description>
					<maml:para>Specifies whether the directory must  store passwords using reversible encryption. This parameter sets the ReversibleEncryption property for a password policy. Possible values for this parameter include the following:
  $false or 0
  $true or 1 


The following example shows how to set this parameter to true.
  -ReversibleEncryptionEnabled $true</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ComplexityEnabled</maml:name>
			<maml:description>
				<maml:para>Specifies whether password complexity is enabled for the password policy. If enabled, the password must contain two of the following three character types: 
  Uppercase characters (A, B, C, D, E, ...)
  Lowercase characters (a, b, c, d, e, ...)
  Numerals (0, 1, 2, 3, ...) 

This parameter sets the ComplexityEnabled property of a password policy. 

Possible values for this parameter include:
  $false or 0 - Disables password complexity
  $true or 1 - Enables password complexity

The following example shows how to set this parameter to true.
  -ComplexityEnabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>$true</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. 

  Distinguished Name
    Example: DC=redmond,DC=corp,DC=contoso,DC=com 
  GUID (objectGUID)
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid)
    Example: S-1-5-21-3165297888-301567370-
  DNS domain name 
    Example: redmond.corp.contoso.com
  NetBIOS domain name 
    Example: redmond

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;DC=redmond,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to a domain object instance named &quot;domainInstance&quot;.
  -Identity   $domainInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADDefaultDomainPasswordPolicy</command:parameterValue>
			<dev:type>
				<maml:name>ADDefaultDomainPasswordPolicy</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LockoutDuration</maml:name>
			<maml:description>
				<maml:para>Specifies the length of time that an account is locked after the number of failed login attempts exceeds the lockout threshold. You cannot login to an account that is locked until the lockout duration time period has expired. This parameter sets the lockoutDuration property of a password policy object. The LDAP display name (ldapDisplayName) of this property is &quot;msDS-LockoutDuration&quot;.

The lockout duration must be greater than or equal to the lockout observation time for a password policy. Use the LockOutObservationWindow parameter to set the lockout observation time. 

Specify the lockout duration time interval in the following format.
    [-]D.H:M:S.F
    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutDuration &quot;2&quot;
  Set the time to 4 hours
    -LockoutDuration &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutDuration &quot;0:5&quot;
  Set the time to 45 seconds
    LockoutDuration &quot;0:0:45&quot;

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0.00:30:00 (30 Minutes)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LockoutObservationWindow</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum time interval between two unsuccessful login attempts before the number of unsuccessful login attempts is reset to 0. An account is locked when the number of unsuccessful login attempts exceeds the password policy lockout threshold. This parameter sets the lockoutObservationWindow property of a password policy object. The LDAP Display Name (ldapDisplayName) of this property is &quot;msDS-lockoutObservationWindow&quot;.

The lockout observation window must be smaller than or equal to the lockout duration for a password policy. Use the LockoutDuration parameter to set the lockout duration time.

Specify the time interval in the following format.
   [-]D:H:M:S.F 

    where:
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time to 2 days
    -LockoutObservationWindow &quot;2&quot;
  Set the time to 4 hours
    -LockoutObservationWindow &quot;4:00&quot;
  Set the time to 5 minutes
    -LockoutObservationWindow &quot;0:5&quot;
  Set the time to 45 seconds
    -LockoutObservationWindow &quot;0:0:45&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0.00.30.00 (30 Minutes)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>LockoutThreshold</maml:name>
			<maml:description>
				<maml:para>Specifies the number of unsuccessful login attempts that are permitted before an account is locked out. This number increases when the time between unsuccessful login attempts is less than the time specified for the lockout observation time window. This parameter sets the LockoutThreshold property of a password policy. 

The following example shows how to set the lockout threshold to 3 login attempts.
  -LockoutThreshold 3</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MaxPasswordAge</maml:name>
			<maml:description>
				<maml:para>Specifies the maximum length of time that you can have the same password. After this time period, the password expires and you must create a new one. 

This parameter sets the maxPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;maxPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    MaxPasswordAge &quot;2&quot;
  Set the time span to the previous 2 days
    MaxPasswordAge &quot;-2&quot;
  Set the time span to 4 hours
    MaxPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    MaxPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    MaxPasswordAge &quot;0:0:45&quot; </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>42.00:00:00 (42 days)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MinPasswordAge</maml:name>
			<maml:description>
				<maml:para>Specifies the minimum length of time before you can change a password.

This parameter sets the minPasswordAge property of a password policy. The LDAP Display Name (ldapDisplayName) for this property is &quot;minPwdAge&quot;.

Specify the time interval in the following format.
   [-]D.H:M:S.F
    where:
      [-] = Specifies a negative time interval
      D = Days (0 to 10675199)
      H = Hours (0 to 23)
      M = Minutes (0 to 59)
      S = Seconds (0 to 59)
      F= Fractions of a second (0 to 9999999)

Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.

The following examples show how to set this parameter.
  Set the time span to 2 days
    -MinPasswordAge &quot;2&quot;
  Set the time span to 4 hours
    -MinPasswordAge &quot;4:00&quot;
  Set the time span to 5 minutes
    -MinPasswordAge &quot;0:5&quot;
  Set the time span to 45 seconds
    -MinPasswordAge &quot;0:0:45&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[System.TimeSpan]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[System.TimeSpan]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>1.00:00:00 (1day)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MinPasswordLength</maml:name>
			<maml:description>
				<maml:para>Specifies the minimum number of characters that a password must contain.  This parameter sets the MinPasswordLength property of the password policy. 

The following example shows how to set this parameter.
  -MinPasswordLength 15</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>7</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PasswordHistoryCount</maml:name>
			<maml:description>
				<maml:para>Specifies the number of previous passwords to save.  A user cannot reuse a password in the list of saved passwords. This parameter sets the PasswordHistoryCount property for a password policy. 

The following example shows how to set this parameter to save 10 previous passwords.
  -PasswordHistoryCount 10</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[int]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[int]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>24</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ReversibleEncryptionEnabled</maml:name>
			<maml:description>
				<maml:para>Specifies whether the directory must  store passwords using reversible encryption. This parameter sets the ReversibleEncryption property for a password policy. Possible values for this parameter include the following:
  $false or 0
  $true or 1 


The following example shows how to set this parameter to true.
  -ReversibleEncryptionEnabled $true</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">System.Nullable[bool]</command:parameterValue>
			<dev:type>
				<maml:name>System.Nullable[bool]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>$true</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADDomain</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A domain object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None </maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ADDefaultDomainPasswordPolicy -Identity fabrikam.com -LockoutDuration 00:40:00 -LockoutObservationWindow 00:20:00 -ComplexityEnabled $true -ReversibleEncryptionEnabled $false -MaxPasswordAge 10.00:00:00</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the default domain password policy for a given domain. Note: setting MaxPwdAge to 0 will convert it to 'never' (Int64.MinValue or -9223372036854775808 in the directory).</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ADDefaultDomainPasswordPolicy -Current LoggedOnUser | Set-ADDefaultDomainPasswordPolicy -LockoutDuration 00:40:00 -LockoutObservationWindow 00:20:00 -ComplexityEnabled $true -ReversibleEncryptionEnabled $false -MinPasswordLength 12</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the default domain password policy for the current logged on user domain.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=145004</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADDefaultDomainPasswordPolicy</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Uninstall-ADServiceAccount
		</command:name>
		<maml:description>
			<maml:para>Uninstalls an Active Directory service account from a computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Uninstall</command:verb>
		<command:noun>ADServiceAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Uninstall-ADServiceAccount cmdlet removes an Active Directory service account on the computer on which the cmdlet is run. The specified service account must be installed on the computer. 

The Identity parameter specifies the Active Directory service account to uninstall. You can identify a service account by its distinguished name (DN), GUID, security identifier (SID), or Security Accounts Manager (SAM) account name. You can also set the parameter to a service account object variable, such as $&lt;localServiceAccountObject&gt; or pass a service account object through the pipeline to the Identity parameter. For example, you can use the Get-ADServiceAccount to get a service account object and then pass that object through the pipeline to the Uninstall-ADServiceAccount cmdlet.

The ForceRemoveLocal switch parameter allows you to remove the account from the local computer without failing the command if access to a writable DC is not available. This is required if you are uninstalling the managed service account from a server located in a segmented network or site (such as perimeter network or DMZ) with access only to a read-only domain controller (RODC). If you pass this parameter and the server has access to a writable DC, the account will also be un-linked from the computer account in Active Directory Domain Services. If this parameter is used, it is recommended that you run Remove-ADComputerServiceAccount cmdlet against a writable DC to reliably unlink the managed service account from the computer.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Uninstall-ADServiceAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			  <maml:name>ForceRemoveLocal</maml:name>
			  <maml:description>
			    <maml:para>The ForceRemoveLocal switch parameter allows you to remove the account from the local computer without failing the command if access to a writable DC is not available. This is required if you are uninstalling the managed service account from a server located in a segmented network or site (such as perimeter network or DMZ) with access only to a read-only domain controller (RODC). If you pass this parameter and the server has access to a writable DC, the account will also be un-linked from the computer account in Active Directory Domain Services. If this parameter is used, it is recommended that you run Remove-ADComputerServiceAccount cmdlet against a writable DC to reliably unlink the managed service account from the computer.</maml:para>
			  </maml:description>
			  <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			  <dev:type>
			    <maml:name>SwitchParameter</maml:name> 
			    <maml:uri /> 
			  </dev:type>
			  <dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
		  <maml:name>ForceRemoveLocal</maml:name>
		  <maml:description>
		    <maml:para>The ForceRemoveLocal switch parameter allows you to remove the account from the local computer without failing the command if access to a writable DC is not available. This is required if you are uninstalling the managed service account from a server located in a segmented network or site (such as perimeter network or DMZ) with access only to a read-only domain controller (RODC). If you pass this parameter and the server has access to a writable DC, the account will also be un-linked from the computer account in Active Directory Domain Services. If this parameter is used, it is recommended that you run Remove-ADComputerServiceAccount cmdlet against a writable DC to reliably unlink the managed service account from the computer.</maml:para>
		  </maml:description>
		  <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
		  <dev:type>
		    <maml:name>SwitchParameter</maml:name> 
		    <maml:uri /> 
		  </dev:type>
		  <dev:defaultValue /> 
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example:  CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: WebAccount$
  
The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

 This parameter can also get this object through the pipeline or you can set this parameter to an object instance. 

This example shows how to set the parameter to a distinguished name.
  -Identity  &quot;CN=WebAccount,CN=ManagedServiceAccounts,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;AccountInstance&quot;.
  -Identity   $AccountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADServiceAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADServiceAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADServiceAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					A service account object is received by the Identity parameter.
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with AD LDS.
This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Uninstall-ADServiceAccount -Identity SQL-SRV1
</dev:code>
  			<dev:remarks>
				<maml:para>Uninstall the managed service account SQL-SRV1 from the local machine. This requires access to a writable DC.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = Get-ADServiceAccount -Filter { Name -eq 'SQL-HR-svc-01'} 
Uninstall-ADServiceAccount $a 
Remove-ADServiceAccount $a </dev:code>
  			<dev:remarks>
				<maml:para>Search for the managed service account with named SQL-HR-svc-01 in the local machine.  Uninstall this account and then delete it from the directory. This requires access to a writable DC.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
			<dev:code>Uninstall-ADServiceAccount -Identity SQL-SRV1 -ForceRemoveLocal
</dev:code>
			<dev:remarks>
				<maml:para>Uninstall the managed service account SQL-SRV1 from the local machine even if access to a writable DC is not available.</maml:para>
				<maml:para>It is recommended that you run Remove-ADComputerServiceAccount cmdlet against a writable DC to reliably unlink the managed service account from the computer.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=145005</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Install-ADServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ADService account</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADService account</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ADService account</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ADComputerServiceAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Unlock-ADAccount
		</command:name>
		<maml:description>
			<maml:para>Unlocks an Active Directory account.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Unlock</command:verb>
		<command:noun>ADAccount</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Unlock-ADAccount cmdlet restores Active Directory Domain Services (AD DS) access for an account that is locked. AD DS access is suspended or locked for an account when the number of incorrect password entries exceeds the maximum number allowed by the account password policy.

The Identity parameter specifies the Active Directory account to unlock. You can identify an account by its distinguished name (DN), GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the Identity parameter to an account object variable such as $&lt;localADAccountObject&gt;, or you can pass an object through the pipeline to the Identity parameter. For example, you can use the Search-ADAccount cmdlet to get an account object and then pass the object through the pipeline to the Unlock-ADAccount cmdlet to unlock the account. Similarly, you can use Get-ADUser and Get-ADComputer to get objects to pass through the pipeline.

For AD LDS environments, the Partition parameter must be specified except when:     - Using a DN to identify objects: the partition will be auto-generated from the DN.     - Running cmdlets from an Active Directory provider drive: the current path will be used to set the partition.     - A default naming context or partition is specified. 
To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Unlock-ADAccount</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Identity</maml:name>
				<maml:description>
					<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Partition</maml:name>
				<maml:description>
					<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authentication method to use. Possible values for this parameter include:
  Negotiate or 0
  Basic or 1

The default authentication method is Negotiate.

A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

The following example shows how to set this parameter to Basic.
  -AuthType Basic</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Microsoft.ActiveDirectory.Management.AuthType.Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Identity</maml:name>
			<maml:description>
				<maml:para>Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.

  Distinguished Name 
    Example: CN=SaraDavis ,CN=Users,DC=corp,DC=contoso,DC=com
  GUID (objectGUID) 
    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20 
  Security Identifier (objectSid) 
    Example: S-1-5-21-3165297888-301567370-576410423-1103
  SAM Account Name (sAMAccountName) 
    Example: saradavis

The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. 

This parameter can also get this object through the pipeline or you can set this parameter to an account object instance. 

Derived types such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount

This example shows how to set the parameter to a distinguished name.
  -Identity &quot;CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com&quot;

This example shows how to set this parameter to an account object instance named &quot;accountInstance&quot;.
  -Identity $accountInstance</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAccount</command:parameterValue>
			<dev:type>
				<maml:name>ADAccount</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Partition</maml:name>
			<maml:description>
				<maml:para>Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. 
The following two examples show how to specify a value for this parameter.
  -Partition &quot;CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
 
  -Partition &quot;CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM&quot;
  
In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

In AD DS environments, a default value for Partition will be set in the following cases:  - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.

In AD LDS environments, a default value for Partition will be set in the following cases: 
 - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. 
  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.
  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
  - If none of the previous cases apply, the Partition parameter will not take any default value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
Domain name values:
  Fully qualified domain name
    Examples: corp.contoso.com
  NetBIOS name
    Example: CORP

Directory server values:
  Fully qualified directory server name
    Example: corp-DC12.corp.contoso.com
  NetBIOS name
    Example: corp-DC12
  Fully qualified directory server name and port
    Example: corp-DC12.corp.contoso.com:3268

The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
  -By using Server value from objects passed through the pipeline.
  -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
  -By using the domain of the computer running Powershell. 

The following example shows how to specify a full qualified domain name as the parameter value.
  -Server &quot;corp.contoso.com&quot;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>Prompts you for confirmation before executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None or Microsoft.ActiveDirectory.Management.ADAccount</maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					An account object is received by the Identity parameter.

Derived types, such as the following are also accepted:
  Microsoft.ActiveDirectory.Management.ADUser
  Microsoft.ActiveDirectory.Management.ADComputer
  Microsoft.ActiveDirectory.Management.ADServiceAccount
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work with an Active Directory Snapshot.
This cmdlet does not work with a read-only domain controller.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Unlock-ADAccount -Identity KimAb
</dev:code>
  			<dev:remarks>
  			        <maml:para>Unlocks the account with SamAccountName: KimAb.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Unlock-ADAccount -Identity &quot;CN=Kim Abercrombie,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Unlocks the account with DistinguishedName: &quot;CN=Kim Abercrombie,OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=145006</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-ADAccount</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<ProviderHelp>
<!-- v  0.0.0.0  -->


<Name>
	ActiveDirectory
</Name>

<Drives>
	<Para>A default drive is mounted using the name AD:</Para>
</Drives>
<Synopsis>
	The Active Directory Provider for Windows PowerShell is for accessing data stored in Active Directory Directory Services (AD DS), Active Directory Lightweight Directory Services (AD LDS) and Snapshot volumes exposed as an LDAP Server from within Windows PowerShell.
</Synopsis>

<DetailedDescription>
	<para>The Active Directory Provider implements a set of commands that make command line navigation through the Active Directory tree, similar to navigating a file system. The provider implements standard commands like dir, ls (get-childitem) and cd, mkdir (set-location, new-item). It also maintains connection to a given instance of Active Directory through PowerShell drives. Using the Active Directory Provider, an administrator may connect to multiple instances of Active Directory simultaneously; for example, multiple domain controllers in multiple domains, AD LDS instances, or snapshots. An administrator may then perform standard operations such as create, read, update, and delete across all of these instances treating them as PowerShell drives.  

These Active Directory Provider cmdlets override the Windows core PowerShell cmdlets. The Active Directory Provider cmdlets are: 

&#183; Get-PSProvider
&#183; New-PSDrive
&#183; Get-PSDrive
&#183; Remove-PSDrive
&#183; Get-ChildItem
&#183; Get-Item
&#183; New-Item
&#183; Remove-Item
&#183; Move-Item
&#183; Rename-Item
&#183; Get-ItemProperty
&#183; Set-ItemProperty
&#183; Clear-ItemProperty
&#183; Get-ACL
&#183; Set-ACL

Notes: 
Active Directory module cmdlets can also be used under an Active Directory Provider drive.

In practice, the Active Directory module cmdlets are more useful than these more general purpose cmdlets. For more information, see about_ActiveDirectory.</para>
</DetailedDescription>

<Capabilities>
	<para></para>
</Capabilities>
<Filters>
	<para>LDAP filter is the only filter format supported by the Active Directory Provider cmdlets.</para>
</Filters>
<Notes>
	Support for non-Microsoft Directory Services is not a goal of ActiveDirectory provider.

The -Filter parameter does not work if running under Root DSE.

All Active Directory provider cmdlets except for Get-ChildItem work on a single object. To work with multiple objects, you need to first call Get-ChildItem with -Filter and then pipeline it to the appropriate cmdlet (for example set-Acl)
</Notes>
<Tasks>
	<Task>
  		<Title>
			Manage a drive
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Create a new drive connected to a domain controller in the contoso.com domain and rooted at the domains rootDSE.</para>
				</Introduction> 
	  			<Code>
					PS C:\&gt;New-PSDrive -name contosoAD -psProvider ActiveDirectory -root &quot;&quot; -server contoso.com
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Create a new drive connected to contoso.com and rooted at the domain NC.</para>
				</Introduction> 
	  			<Code>
					PS C:\&gt;New-PSDrive -name contosoAD -psProvider ActiveDirectory -root &quot;DC=contoso,DC=com&quot; -server contoso.com
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>Remove the contosoAD drive</para>
				</Introduction> 
	  			<Code>
					PS C:\&gt;Remove-PSDrive contosoAD
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 4 --------------------------
				</Title> 
				<Introduction>
					<para>View all mounted drives on the system.</para>
				</Introduction> 
	  			<Code>
					PS C:\&gt;Get-PSDrive
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Navigation
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Sets the current location.</para>
				</Introduction> 
	  			<Code>
					PS C:\set-location AD:
				</Code>
				<Remarks>
					<para>The Active Directory Provider exposes the Active Directory database through a hierarchical navigation system, which is very similar to the file system. 

For example, you can use the following commands to navigate through the directory:
cd
dir
remove

Other command line interface paradigms such as '.' and '..' will work as expected.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Read an object
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Get all attributes of a user with samAccountName ContosoUser1</para>
				</Introduction> 
	  			<Code>
					PS AD:\&gt;Get-ChildItem -filter &quot;(sAMAccountName=ContosoUser1)&quot; -properties * -recurse
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Update an object
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Set a user's otherTelephone (multi-valued attribute)</para>
				</Introduction> 
	  			<Code>
					C:\PS&gt;Set-ItemProperty -Path &quot;AD:\CN= ContosoUser1,CN=Users,DC=Contoso,DC=com&quot; -Name otherTelephone -value &quot;111-111-1111&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Security Descriptor management 
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Get the ACL</para>
				</Introduction> 
	  			<Code>
					$acl = Get-Acl -Path &quot;AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Get the user</para>
				</Introduction> 
	  			<Code>
					$user = get-aduser adpsuser1
$p = New-Object System.Security.Principal.SecurityIdentifier $user.SID
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>Create ACE for write property</para>
				</Introduction> 
	  			<Code>
					$ace = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $p, &quot;WriteProperty&quot;, &quot;Allow&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 4 --------------------------
				</Title> 
				<Introduction>
					<para>Add ACE to ACL</para>
				</Introduction> 
	  			<Code>
					$acl.AddAccessRule($ace)
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 5 --------------------------
				</Title> 
				<Introduction>
					<para>Set the ACL</para>
				</Introduction> 
	  			<Code>
					Set-Acl -ACLObject $acl -Path (&quot;AD:\&quot; + $user.distinguishedName)
				</Code>
				<Remarks>
					<para>Modifies the security descriptor of a user to add a new ace.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Security Descriptor management 
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Get security descriptor of a user</para>
				</Introduction> 
	  			<Code>
					C:\PS&gt;Get-ACL -Path &quot;AD:\CN=ContosoUser1,CN=Users,DC=Contoso,DC= com&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
</Tasks>
<DynamicParameters>
</DynamicParameters>
<RelatedLinks>
    <navigationLink>
        <linkText>about_providers</linkText>
        <uri/>
    </navigationLink>
</RelatedLinks>



<CmdletHelpPaths>
<CmdletHelpPath ID="0">\n
<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Clear-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Clears a property's value from an Active Directory object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Clear</command:verb>
		<command:noun>ItemProperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Clear-ItemProperty cmdlet deletes the value of a property, but it does not delete the property. You can use this cmdlet to delete the data from an Active Directory object property value.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Clear-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies path of the object on which the action is to be performed</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the names of the properties to be removed</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate or Simple
  Negotiate - the underlying SPNEGO security provider is used
  Simple - the bind process sends the username and password in clear text
        (recommended to use with SSL encryption only)
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >X500</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Canonical</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate or Simple
  Negotiate - the underlying SPNEGO security provider is used
  Simple - the bind process sends the username and password in clear text
        (recommended to use with SSL encryption only)
</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para></maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPathFormat</command:parameterValue>
			<dev:type>
				<maml:name>ADPathFormat</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>X500</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Canonical</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the names of the properties to be removed</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies path of the object on which the action is to be performed</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					None
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Clear-ItemProperty &quot;AD:\CN=ADPSUser1,DC=Fabrikam,DC=com&quot; description</dev:code>
  			<dev:remarks>
  			        <maml:para>Clears the description property of the Active Directory object with DistinguishedName &quot;AD:\CN=ADPSUser1,DC=Fabrikam,DC=com&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Clear-ItemProperty -Path &quot;AD:\CN=ADPSUser1,DC=Fabrikam,DC=com&quot; -Name otherTelephone</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove a value from the multivalue property otherTelephone on the object 'AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152477</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Item
		</command:name>
		<maml:description>
			<maml:para>Gets the item at the specified location. This cmdlet enables a Base search for an Active Directory store.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Item cmdlet gets the item at the specified location. It does not get the contents of the item at the location, unless you use a wildcard character (*) to request all contents of the item.
</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies a path to one or more locations. Wildcards are permitted. The default location is the current directory.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate or Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will beused as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>Specifies omission of the particular items. The value of this parameter qualifies the path parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para>Specifies the format type. Possible values are: X500 or Canonical.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >X500</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Canonical</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GlobalCatalog</maml:name>
				<maml:description>
					<maml:para>Specifies connection to the Global catalog using the GC port.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PageSize</maml:name>
				<maml:description>
					<maml:para>Specifies a numeric page size. The default value is 256.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies a comma-delimited list of properties to be retrieved for each item (Active Directory object).  The * wildcard can be used to retrieve all properties.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SizeLimit</maml:name>
				<maml:description>
					<maml:para>Specifies a maximum number of entries to return from a search. 
The default value is 0 (zero), no limit.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate or Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.
</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will beused as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>Specifies omission of the particular items. The value of this parameter qualifies the path parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para>Specifies the format type. Possible values are: X500 or Canonical.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPathFormat</command:parameterValue>
			<dev:type>
				<maml:name>ADPathFormat</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>X500</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>X500</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Canonical</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GlobalCatalog</maml:name>
			<maml:description>
				<maml:para>Specifies connection to the Global catalog using the GC port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PageSize</maml:name>
			<maml:description>
				<maml:para>Specifies a numeric page size. The default value is 256.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies a path to one or more locations. Wildcards are permitted. The default location is the current directory.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies a comma-delimited list of properties to be retrieved for each item (Active Directory object).  The * wildcard can be used to retrieve all properties.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SizeLimit</maml:name>
			<maml:description>
				<maml:para>Specifies a maximum number of entries to return from a search. 
The default value is 0 (zero), no limit.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns one or more ADObject objects. An ADObject contains the Name, DistinguishedName, ObjectClass and ObjectGUID of an object that resides in the store. In addition it contains a property bag which holds the requested property names and values.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-Item .</dev:code>
  			<dev:remarks>
 				<maml:para>PSPath            : ActiveDirectory::DC=fabrikam,DC=com 
PSParentPath      : 
PSChildName       : DC=fabrikam,DC=com 
PSDrive           : AD 
PSProvider        : ActiveDirectory 
PSIsContainer     : True 
objectGUID        : d66301e9-b1da-41ef-866c-12bde9b4a0a8 
distinguishedName : DC=fabrikam,DC=com 
name              : fabrikam 
objectClass       : domainDNS </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the default properties of the current location.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-Item &quot;AD:\CN=User1,DC=fabrikam,DC=com&quot; -Properties samAccountName</dev:code>
  			<dev:remarks>
 				<maml:para>PSPath                : ActiveDirectory::CN=User1,DC=fabrikam,DC=com 
PSParentPath          : ActiveDirectory::DC=fabrikam,DC=com 
PSChildName           : CN=User1 
PSDrive               : AD 
PSProvider            : ActiveDirectory 
PSIsContainer         : True 
sAMAccountName        : user1 
lastLogon             : 0 
objectCategory        : CN=Person,CN=Schema,CN=Configuration,DC=fabrikam,DC=com 
badPwdCount           : 0 
distinguishedName     : CN=User1,DC=fabrikam,DC=com 
objectGUID            : 83629f3e-2b09-4896-bfe7-15b544709792 
objectClass           : user 
name                  : user1</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the samAccountName property of the object 'AD:\CN=User1,DC=fabrikam,DC=com'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-Item &quot;AD:\CN=User1,DC=fabrikam,DC=com&quot; -Properties * </dev:code>
  			<dev:remarks>
 				<maml:para>PSPath                : ActiveDirectory::CN=User1,DC=fabrikam,DC=com 
PSParentPath          : ActiveDirectory::DC=fabrikam,DC=com 
PSChildName           : CN=User1 
PSDrive               : AD 
PSProvider            : ActiveDirectory 
PSIsContainer         : True 
codePage              : 0 
cn                    : user1 
otherHomePhone        : {111-1111} 
logonCount            : 0 
description           : blah 
sAMAccountName        : user1 
lastLogon             : 0 
objectCategory        : CN=Person,CN=Schema,CN=Configuration,DC=fabrikam,DC=com 
badPwdCount           : 0 
distinguishedName     : CN=User1,DC=fabrikam,DC=com 
dSCorePropagationData : {12/31/1600 4:00:00 PM} 
pwdLastSet            : 0 
badPasswordTime       : 0 
uSNChanged            : 14933 
whenChanged           : 3/17/2009 12:31:52 PM 
userAccountControl    : 546 
instanceType          : 4 
objectSid             : S-1-5-21-1743280271-992198667-3042434588-1102 
lastLogoff            : 0 
sAMAccountType        : 805306368 
objectGUID            : 83629f3e-2b09-4896-bfe7-15b544709792 
objectClass           : user 
primaryGroupID        : 513 
uSNCreated            : 14930 
countryCode           : 0 
nTSecurityDescriptor  : System.DirectoryServices.ActiveDirectorySecurity 
accountExpires        : 9223372036854775807 
whenCreated           : 3/17/2009 12:31:25 PM 
name                  : user1</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get all the properties of the object 'AD:\CN=User1,DC=fabrikam,DC=com'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152475</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ChildItem
		</command:name>
		<maml:description>
			<maml:para>Gets the items and child items in one or more specified locations providing One Level and Subtree scoped search for an Active Directory store.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ChildItem</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ChildItem cmdlet gets the items in the specified locations. If the item is a container, it gets the items inside the container, known as child items. You can use the -Recurse parameter to get all items in all child containers. 

If the specified path is the ROOTDSE location, this returns a list of all the partitions hosted by the server on the specified port.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ChildItem</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies a path to one or more locations. Wildcards are not permitted. The default location is the current directory.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Specifies an LDAP Filter for search. If the specified path is the ROOTDSE item, filter is ignored.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. 

Possible values are: Negotiate and Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para>Specifies the format type for a path. Possible values are: X500 (ex. CN=Users,DC=fabricam,DC=com) or Canonical (e.g. fabricam.com/Users)</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >X500</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Canonical</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GlobalCatalog</maml:name>
				<maml:description>
					<maml:para>Specifies connection to the Global catalog using the GC port.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Retrieves only the names of the items in the locations.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PageSize</maml:name>
				<maml:description>
					<maml:para>Specifies a numeric page size. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Properties</maml:name>
				<maml:description>
					<maml:para>Specifies a comma delimited list of properties to be retrieved for each item (Active Directory object).  The * wildcard can be used to retrieve all properties.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Recurse</maml:name>
				<maml:description>
					<maml:para>Gets the items in the specified locations and in all child items of the specified locations. Possible values are: True or False.

Note: Use this to invoke a Subtree search.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SizeLimit</maml:name>
				<maml:description>
					<maml:para>Specifies a maximum number of entries to return from a search. 
The default value is 0 (zero), no limit.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authorization type for connecting to the server. 

Possible values are: Negotiate and Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>Specifies an LDAP Filter for search. If the specified path is the ROOTDSE item, filter is ignored.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para>Specifies the format type for a path. Possible values are: X500 (ex. CN=Users,DC=fabricam,DC=com) or Canonical (e.g. fabricam.com/Users)</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPathFormat</command:parameterValue>
			<dev:type>
				<maml:name>ADPathFormat</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>X500</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>X500</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Canonical</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GlobalCatalog</maml:name>
			<maml:description>
				<maml:para>Specifies connection to the Global catalog using the GC port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Retrieves only the names of the items in the locations.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PageSize</maml:name>
			<maml:description>
				<maml:para>Specifies a numeric page size. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>256</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies a path to one or more locations. Wildcards are not permitted. The default location is the current directory.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Properties</maml:name>
			<maml:description>
				<maml:para>Specifies a comma delimited list of properties to be retrieved for each item (Active Directory object).  The * wildcard can be used to retrieve all properties.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Recurse</maml:name>
			<maml:description>
				<maml:para>Gets the items in the specified locations and in all child items of the specified locations. Possible values are: True or False.

Note: Use this to invoke a Subtree search.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>false</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SizeLimit</maml:name>
			<maml:description>
				<maml:para>Specifies a maximum number of entries to return from a search. 
The default value is 0 (zero), no limit.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>ADObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ChildItem &quot;AD:\OU=TestOU,DC=fabrikam,DC=com&quot; 
</dev:code>
  			<dev:remarks>
  			        <maml:para>Get all object in the container 'AD:\OU=TestOU,DC=fabrikam,DC=com'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ChildItem &quot;AD:\OU=TestOU,DC=fabrikam,DC=com&quot; -Filter &quot;(&amp;(objectclass=user)(objectcategory=person))&quot; 
</dev:code>
  			<dev:remarks>
  			        <maml:para>Get all users in a container.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ChildItem &quot;AD:\OU=TestOU,DC=fabrikam,DC=com&quot; -Filter &quot;(&amp;(objectclass=user)(objectcategory=person))&quot; -Recurse
</dev:code>
  			<dev:remarks>
  			        <maml:para>Recursively get all users in under the path 'AD:\OU=TestOU,DC=fabrikam,DC=com'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152471</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Retrieves the properties of a specified Active Directory object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>ItemProperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ItemProperty cmdlet gets the properties of the specified Active Directory object. You can use the Get-ItemProperty to view Active Directory object properties and values.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the Active Directory object. Wildcards are not permitted. The default location is the current directory.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the property or properties to be retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate or Basic
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >X500</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Canonical</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate or Basic
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.
</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para></maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPathFormat</command:parameterValue>
			<dev:type>
				<maml:name>ADPathFormat</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>X500</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Canonical</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the property or properties to be retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the Active Directory object. Wildcards are not permitted. The default location is the current directory.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns a PSObject that contains the names and values of the requested properties.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ItemProperty &quot;AD:\CN=User1,DC=fabrikam,DC=com&quot; samaccountname</dev:code>
  			<dev:remarks>
 				<maml:para>PSPath         : ActiveDirectory::CN=User1,DC=fabrikam,DC=com 
PSParentPath   : ActiveDirectory::DC=fabrikam,DC=com 
PSChildName    : CN=User1 
PSDrive        : AD 
PSProvider     : ActiveDirectory 
samaccountname : User1 </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the samAccountName property from the object 'AD:\CN=User1,DC=fabrikam,DC=com'</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ItemProperty &quot;AD:\CN=User1,DC=fabrikam,DC=com&quot; samaccountname, objectSid </dev:code>
  			<dev:remarks>
 				<maml:para>PSPath         : ActiveDirectory::CN=User1,DC=fabrikam,DC=com 
PSParentPath   : ActiveDirectory::DC=fabrikam,DC=com 
PSChildName    : CN=User1 
PSDrive        : AD 
PSProvider     : ActiveDirectory 
samaccountname : User1 
objectSid      : S-1-5-21-1743280271-992198667-3042434588-1102</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Get the samaccountname and objectSid properties from the object 'AD:\CN=User1,DC=fabrikam,DC=com'</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152479</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Acl
		</command:name>
		<maml:description>
			<maml:para>Gets the security descriptor for an Active Directory object(s).</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Acl</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-ACL cmdlet get the objects that represent the security descriptor of an Active Directory object. The security descriptor contains the access control lists (ACLs) of the Active Directory object. The ACL specifies permissions that users and user groups that have to access the Active Directory object.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Acl</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies path of the object on which the action is to be performed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Audit</maml:name>
				<maml:description>
					<maml:para>Gets the audit data for the security descriptor from the system access control list (SACL).</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Audit</maml:name>
			<maml:description>
				<maml:para>Gets the audit data for the security descriptor from the system access control list (SACL).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies path of the object on which the action is to be performed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>ActiveDirectorySecurity (inherited from System.Security.AccessControl.DirectoryObjectSecurity)</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns an ActiveDirectorySecurity object representing the security descriptor of the returned object specified by the execution of this cmdlet.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-Acl -Path &quot;AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Gets the security descriptor for the user: ADPSUser1.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-Acl &quot;AD:\CN=User1,DC=fabrikam,DC=com&quot;</dev:code>
  			<dev:remarks>
 				<maml:para>Path                       Owner                      Access
----                       -----                      ------
ActiveDirectory::CN=Use... FABRIKAM\Domain Admins   NT AUTHORITY\SELF Allo...</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Gets the security descriptor for the user: User1.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152469</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ACL</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Move-Item
		</command:name>
		<maml:description>
			<maml:para>Moves an Active Directory object  from one location (container) to another.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Move</command:verb>
		<command:noun>Item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Move-Item cmdlet moves an Active Directory object, including its properties, contents, and child items, from one location (container) to another location (container). The locations must be supported by the same provider. When you move an Active Directory object, it is added to the new location and deleted from its original location. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Move-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies path of the item on which the action is to be performed</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the location where the item is being moved. This must be an Active Directory container.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate or Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CrossDomain</maml:name>
				<maml:description>
					<maml:para>Specifies a cross domain move. You must provide the DNS name of the destination DC.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >X500</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Canonical</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name, or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate or Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection
</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CrossDomain</maml:name>
			<maml:description>
				<maml:para>Specifies a cross domain move. You must provide the DNS name of the destination DC.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Destination</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the location where the item is being moved. This must be an Active Directory container.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para></maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPathFormat</command:parameterValue>
			<dev:type>
				<maml:name>ADPathFormat</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>X500</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Canonical</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies path of the item on which the action is to be performed</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name, or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Cmdlet output is controlled by the PassThru flag. </maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					None, if -PassThru is not specified.
If -PassThru is specified, an ADObject representing the moved object is written to the pipeline.

				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-Item &quot;AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com&quot; &quot;AD:\CN=ADPSUsers,DC=Fabrikam,DC=com&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Move a user object from one Organizational Unit to another.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-Item &quot;AD:\CN=Users,DC=ADPS,DC=Fabrikam,DC=com&quot; -Destination &quot;AD:\CN=ADPSUsers,DC=Fabrikam,DC=com&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Move a container object along with all its child items.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Move-Item &quot;AD:\OU=TestOU,DC=fabrikam,DC=com&quot; &quot;AD:\OU=TestOU,DC=child,DC=fabrikam,DC=com&quot; -CrossDomain dc1.child.fabrikam.com

</dev:code>
  			<dev:remarks>
  			        <maml:para>Move an object to another domain using CrossDomain move.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152476</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Item
		</command:name>
		<maml:description>
			<maml:para>Creates a new Active Directory Object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>Item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The New-Item cmdlet creates a new Active Directory object. The cmdlet can also set the value of the new object. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Item</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies a path for the new AD object.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the new AD object.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. 

Possible values are: Negotiate or Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para>Specifies the format type. Possible values are: X500 or Canonical.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >X500</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Canonical</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ItemType</maml:name>
				<maml:description>
					<maml:para>Specifies the AD object class of the new item, for example: group, user, organizationalUnit etc.

If the ItemType parameter is set to 'Directory', the cmdlet creates a new OrganizationalUnit.

The powershell provider cmdlet mkdir calls the New-Item cmdlet with the ItemType parameter set to 'Directory', so mkdir (alias md) cmdlet will create a new OrganizationalUnit, when used in the ActiveDirectory provider.
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
				<maml:name>Value</maml:name>
				<maml:description>
					<maml:para>Specifies the value of the new item. New object attribute(s) and value(s) are specified as an associative array.
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>New-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies a path for the new AD object.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the new AD object.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. 

Possible values are: Negotiate or Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para>Specifies the format type. Possible values are: X500 or Canonical.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >X500</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Canonical</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ItemType</maml:name>
				<maml:description>
					<maml:para>Specifies the AD object class of the new item, for example: group, user, organizationalUnit etc.

If the ItemType parameter is set to 'Directory', the cmdlet creates a new OrganizationalUnit.

The powershell provider cmdlet mkdir calls the New-Item cmdlet with the ItemType parameter set to 'Directory', so mkdir (alias md) cmdlet will create a new OrganizationalUnit, when used in the ActiveDirectory provider.
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
				<maml:name>Value</maml:name>
				<maml:description>
					<maml:para>Specifies the value of the new item. New object attribute(s) and value(s) are specified as an associative array.
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authorization type for connecting to the server. 

Possible values are: Negotiate or Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection
</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para>Specifies the format type. Possible values are: X500 or Canonical.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPathFormat</command:parameterValue>
			<dev:type>
				<maml:name>ADPathFormat</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>X500</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>X500</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Canonical</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ItemType</maml:name>
			<maml:description>
				<maml:para>Specifies the AD object class of the new item, for example: group, user, organizationalUnit etc.

If the ItemType parameter is set to 'Directory', the cmdlet creates a new OrganizationalUnit.

The powershell provider cmdlet mkdir calls the New-Item cmdlet with the ItemType parameter set to 'Directory', so mkdir (alias md) cmdlet will create a new OrganizationalUnit, when used in the ActiveDirectory provider.
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the new AD object.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies a path for the new AD object.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
			<maml:name>Value</maml:name>
			<maml:description>
				<maml:para>Specifies the value of the new item. New object attribute(s) and value(s) are specified as an associative array.
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>ADObject if -PassThru is specified</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns an ADObject representing the newly created object in the directory.
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-Item -Name &quot;OU=TestOU3&quot; -Itemtype organizationalUnit </dev:code>
  			<dev:remarks>
 				<maml:para>PSPath            : ActiveDirectory::OU=TestOU3,DC=fabrikam,DC=com 
PSParentPath      : ActiveDirectory::DC=fabrikam,DC=com 
PSChildName       : OU=TestOU3 
PSDrive           : AD 
PSProvider        : ActiveDirectory 
PSIsContainer     : True 
objectGUID        : 786ee969-88b7-43ba-80d2-acc3d624b06e 
distinguishedName : OU=TestOU3,DC=fabrikam,DC=com 
name              : TestOU3 
objectClass       : organizationalUnit </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Create a new Organizational Unit at the current location.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-Item -Path &quot;CN=Users,DC=fabrikam,DC=com&quot; -Name &quot;CN=User3&quot; -ItemType user -Value @{samAccountName='user3';description='test user'} </dev:code>
  			<dev:remarks>
 				<maml:para>PSPath            : ActiveDirectory::CN=User3,CN=Users,DC=fabrikam,DC=com 
PSParentPath      : ActiveDirectory::CN=Users,DC=fabrikam,DC=com 
PSChildName       : CN=User3 
PSDrive           : AD 
PSProvider        : ActiveDirectory 
PSIsContainer     : True 
objectGUID        : 617e9745-21b2-44f5-9a91-e2d1831059eb 
objectClass       : user 
distinguishedName : CN=User3,CN=Users,DC=fabrikam,DC=com 
name              : User3 
sAMAccountName    : user3 
description       : test user</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Create a new user in a specified container and set the user's samAccountName and description properties during creation. </maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152472</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-PSDrive
		</command:name>
		<maml:description>
			<maml:para>Creates a new Active Directory for Windows PowerShell drive. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>PSDrive</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The New-PsDrive cmdlet creates a new Active Directory for Windows PowerShell drive which represents a connection to an Active Directory store.

You can use the PsDrives that you create to access data in the associated data store just like you would do with any mapped drive. You can change locations into the drive (set-location, cd, or chdir) and access the contents of the drive (get-item, get-childitem, dir).
    
However, the Active Directory PsDrives are known only to Windows PowerShell. You cannot access them by using Windows Explorer, WMI, COM, or .NET, or by using tools like Net Use.
    
PsDrives exist only in the current Windows PowerShell console. To make the drive persistent, you can export the console to which you have added the drive or save a New-PsDrive command in your Windows PowerShell profile.

To delete a drive that was created by New-PsDrive, use Remove-PsDrive.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-PSDrive</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>PSProvider</maml:name>
				<maml:description>
					<maml:para>Specifies the Windows PowerShell provider (&quot;PsProvider&quot;) that supports drives of this type.

For example, if the PsDrive is associated with a network share or file system directory, the PsProvider is &quot;FileSystem&quot;. If the PsDrive is associated with a registry key, the PsProvider is &quot;Registry&quot;.

To see a list of the PsProviders in your Windows PowerShell console, type &quot;get-psprovider&quot;.
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>Root</maml:name>
				<maml:description>
					<maml:para>Specifies the provider internal root or path for the drive being added. Use DN for X500 format and Canonical Name for canonical format.
Specifying an empty string directs connection to the RootDSE.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a short description of the drive being created.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para>Specifies the path type for the provider drive.  Allowable values are X500  or Canonical.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GlobalCatalog</maml:name>
				<maml:description>
					<maml:para>Specifies connection to the Global catalog using the GC port.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>Specifies an index used to identify the scope where the drive will be installed.

Note: This parameter will be ignored.
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a short description of the drive being created.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para>Specifies the path type for the provider drive.  Allowable values are X500  or Canonical.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GlobalCatalog</maml:name>
			<maml:description>
				<maml:para>Specifies connection to the Global catalog using the GC port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>PSProvider</maml:name>
			<maml:description>
				<maml:para>Specifies the Windows PowerShell provider (&quot;PsProvider&quot;) that supports drives of this type.

For example, if the PsDrive is associated with a network share or file system directory, the PsProvider is &quot;FileSystem&quot;. If the PsDrive is associated with a registry key, the PsProvider is &quot;Registry&quot;.

To see a list of the PsProviders in your Windows PowerShell console, type &quot;get-psprovider&quot;.
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
			<maml:name>Root</maml:name>
			<maml:description>
				<maml:para>Specifies the provider internal root or path for the drive being added. Use DN for X500 format and Canonical Name for canonical format.
Specifying an empty string directs connection to the RootDSE.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>Specifies an index used to identify the scope where the drive will be installed.

Note: This parameter will be ignored.
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PSDrive if -PassThru is specified</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Returns an ADDriveInfo object. ADDriveInfo is derived from PSDriveInfo and contains the following additional properties.

    public class ADDriveInfo : PSDriveInfo
    {
        public string Server {get; set;}
        public ADPathFormat FormatType {get; set;}
        public ADAuthType AuthType {get; set;}
        public bool GlobalCatalog {get; set;} 
        public bool SecureSocketLayer {get; set;}
        public bool Encryption {get; set;}
        public bool Signing {get; set;}
    }
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          When the Active Directory module is imported, a new PSDrive is created for domain joined machines. The default drive will be mounted to the default LDAP server's rootDSE. The default drive name will be &quot;AD&quot;.
This cmdlet does not work when targeting a snapshot using the Server parameter.

                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-PSDrive -Name AD1 -PSProvider ActiveDirectory -Root &quot;DC=fabrikam,DC=com&quot; </dev:code>
  			<dev:remarks>
 				<maml:para>Name           Used (GB)     Free (GB) Provider      Root 
----           ---------     --------- --------      ---- 
AD1                                    ActiveDire... DC=fabrikam,DC=com </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
                                <maml:para>Description</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Mount a drive to the default naming context on the default server.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-PSDrive -Name ADGC -PSProvider ActiveDirectory -Root &quot;&quot; -server fabrikam.com:3268</dev:code>
  			<dev:remarks>
  			        <maml:para>Mount a drive to the rootDSE on a Global Catalog.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-PSDrive -Name ADLDS -PsProvider ActiveDirectory -Root &quot;DC=AppNC,DC=com&quot; -server server1:50000</dev:code>
  			<dev:remarks>
  			        <maml:para>Mount a drive to an AD LDS instance.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>New-PSDrive -Name AD1 -PSProvider ActiveDirectory -Root &quot;fabrikam.com/&quot; -format canonical</dev:code>
  			<dev:remarks>
  			        <maml:para>Mount a drive to the default naming context on the default server using canonical format.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152480</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-Item
		</command:name>
		<maml:description>
			<maml:para>Deletes the specified Active Directory object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>Item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-Item cmdlet deletes the specified Active Directory object.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies path of the object on which the action is to be performed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate, Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para>Specifies the format type. Possible values are: X500 or Canonical.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >X500</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Canonical</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Recurse</maml:name>
				<maml:description>
					<maml:para>Causes the items in the specified locations and in all child items of the locations to be deleted. This parameter enables Tree deletion.  
Possible values are: True or False.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate, Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection
</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para>Specifies the format type. Possible values are: X500 or Canonical.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPathFormat</command:parameterValue>
			<dev:type>
				<maml:name>ADPathFormat</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>X500</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>X500</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Canonical</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>Retrieves only the specified objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies path of the object on which the action is to be performed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Recurse</maml:name>
			<maml:description>
				<maml:para>Causes the items in the specified locations and in all child items of the locations to be deleted. This parameter enables Tree deletion.  
Possible values are: True or False.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">switch</command:parameterValue>
			<dev:type>
				<maml:name>switch</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					None
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-Item &quot;AD:\CN=User1,OU=TestOU,DC=fabrikam,DC=com&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove a single item.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Remove-Item &quot;AD:\OU=TestOU,DC=fabrikam,DC=com&quot; -Recurse</dev:code>
  			<dev:remarks>
  			        <maml:para>Remove a container and all objects under that container.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152474</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText></maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Rename-Item
		</command:name>
		<maml:description>
			<maml:para>Renames an Active Directory object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Rename</command:verb>
		<command:noun>Item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Rename-Item cmdlet changes the name of a specified Active Directory object. The cmdlet does not affect the content of the object being renamed.

Name must be a relative distinguished Name.  You cannot use Rename-Item to move an item. To move and rename an Active Directory object, use the Move-Item cmdlet.
</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Rename-Item</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies path of the object(s) on which the action is to be performed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>NewName</maml:name>
				<maml:description>
					<maml:para>Specifies the new name of the Active Directory object. This must be RDN (relative distinguished name).</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. Possible values are: Negotiate and Basic.

        Negotiate - the underlying SPNEGO security provider is used

        Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authorization type for connecting to the server. Possible values are: Negotiate and Basic.

        Negotiate - the underlying SPNEGO security provider is used

        Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Negotiate</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>NewName</maml:name>
			<maml:description>
				<maml:para>Specifies the new name of the Active Directory object. This must be RDN (relative distinguished name).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies path of the object(s) on which the action is to be performed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Cmdlet output is controlled by the PassThru flag. </maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					None, if -PassThru is not specified.
If -PassThru is specified, an ADObject representing the renamed object is written to the pipeline.

				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Rename-Item &quot;AD:\CN=User1,OU=TestOU2,DC=fabrikam,DC=com&quot; &quot;CN=User4&quot;</dev:code>
  			<dev:remarks>
  			        <maml:para>Rename the user object at 'AD:\CN=User1,OU=TestOU2,DC=fabrikam,DC=com' to 'CN=User4'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152473</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Sets the value of a property of an Active Directory object. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>ItemProperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-ItemProperty cmdlet sets the value of a property of an Active Directory object. You can use this cmdlets to update (add, replace, delete) Active Directory object properties values.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies path of the object on which the action is to be performed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies a list of Active Directory object attribute names whose value will be replaced.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>Value</maml:name>
				<maml:description>
					<maml:para>Specifies the values of Active Directory object properties to be replaced.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AddPropertyValue</maml:name>
				<maml:description>
					<maml:para>Specifies properties(s) value(s) as associated array to be added. This will be used for multi-valued properties. See help about_associative_array for more details.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AuthType</maml:name>
				<maml:description>
					<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate, Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Negotiate</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Basic</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FormatType</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >X500</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Canonical</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>RemovePropertyValue</maml:name>
				<maml:description>
					<maml:para>Specified property value(s) as an associated array to be deleted. This will be used for multi-valued properties. See help about_associative_array for more details.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AddPropertyValue</maml:name>
			<maml:description>
				<maml:para>Specifies properties(s) value(s) as associated array to be added. This will be used for multi-valued properties. See help about_associative_array for more details.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AuthType</maml:name>
			<maml:description>
				<maml:para>Specifies the authorization type for connecting to the server. 
Possible values are: Negotiate, Basic.
  Negotiate - the underlying SPNEGO security provider is used
  Basic - performs a simple bind over a Secure Sockets Layer (SSL) connection.
</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADAuthType</command:parameterValue>
			<dev:type>
				<maml:name>ADAuthType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Negotiate</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Negotiate</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Basic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specify the credentials for the security context under which the task will be performed. If this security context does not have directory level permissions to perform the task, then an error will be returned by the directory. Credentials information associated with the drive will be used as the default value.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. 

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  -Credential $AdminCredentials
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FormatType</maml:name>
			<maml:description>
				<maml:para></maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ADPathFormat</command:parameterValue>
			<dev:type>
				<maml:name>ADPathFormat</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>X500</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>X500</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Canonical</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>Specifies a list of Active Directory object attribute names whose value will be replaced.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies path of the object on which the action is to be performed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>RemovePropertyValue</maml:name>
			<maml:description>
				<maml:para>Specified property value(s) as an associated array to be deleted. This will be used for multi-valued properties. See help about_associative_array for more details.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Server</maml:name>
			<maml:description>
				<maml:para>Specifies the specific instance of Active Directory (DS or LDS) to connect to. The parameter input value can be a: domain name, forest name or host name:port.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
			<maml:name>Value</maml:name>
			<maml:description>
				<maml:para>Specifies the values of Active Directory object properties to be replaced.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Cmdlet output is controlled by the PassThru flag. </maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					None, if -PassThru is not specified.
If -PassThru is specified, a PSObject containing the names and values of the properties being modified is written to the pipeline.

				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ItemProperty -Path &quot;AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com&quot; -Name otherTelephone -value ('111-111-1111','222-222-2222')</dev:code>
  			<dev:remarks>
  			        <maml:para>Set the value of the multivalue property otherTelephone on the object 'AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-ItemProperty -Path &quot;AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com&quot; -Name otherTelephone -Value @('333-333-3333')</dev:code>
  			<dev:remarks>
  			        <maml:para>Add a new value to the multivalue property otherTelephone on the object 'AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com'.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152478</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Acl
		</command:name>
		<maml:description>
			<maml:para>Changes the security descriptor of a specified Active Directory object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>Acl</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-Acl cmdlet changes the security descriptor of a specified Active Directory object to match the values in a security descriptor that you supply.

To use Set-ACL, use the Path parameter to identify the resource whose security descriptor you want to change, and use the AclObject parameter to supply a security descriptor that has the values you want to apply. Set-ACL uses the value of the AclObject parameter as a model and changes the values n the resource's security descriptor to match the values in the AclObject prameter. Set-ACL sets the security descriptor of the object identified by Path to the value specified by the AclObject


</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Acl</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies path of the object(s) on which the action is to be performed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="2">
				<maml:name>AclObject</maml:name>
				<maml:description>
					<maml:para>Specifies an ACL with the desired property values.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ObjectSecurity</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="2">
			<maml:name>AclObject</maml:name>
			<maml:description>
				<maml:para>Specifies an ACL with the desired property values.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ObjectSecurity</command:parameterValue>
			<dev:type>
				<maml:name>ObjectSecurity</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Filter</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>This parameter is ignored by the Active Directory provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>Specifies path of the object(s) on which the action is to be performed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Cmdlet output is controlled by the PassThru flag. </maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					None, if -PassThru is not specified
If -PassThru is specified, an ActiveDirectorySecurity object representing the modified security descriptor is returned.

				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not work when targeting a snapshot using the Server parameter.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-ACL &quot;AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com&quot;  | Set-Acl &quot;AD:\CN=ADPSUser2,CN=Users,DC=Fabrikam,DC=com&quot;
</dev:code>
  			<dev:remarks>
  			        <maml:para>Use the piped results of a Get-ACL cmdlet from one user object to set the security descriptor of another user object.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code># Get the ACL
$acl = Get-Acl -Path &quot;AD:\CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com&quot;
# Get the user
$user = Get-ADUser &quot;CN=ADPSUser1,CN=Users,DC=Fabrikam,DC=com&quot;
$p = New-Object System.Security.Principal.SecurityIdentifier $user.SID
# Create ACE for write property
$ace = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $p, &quot;WriteProperty&quot;, &quot;Allow&quot;
# Add ACE to ACL
$acl.AddAccessRule($ace)
# Set the ACL
Set-Acl -ACLObject $acl -Path (&quot;AD:\&quot; + $user.distinguishedName)
</dev:code>
  			<dev:remarks>
  			        <maml:para>Modifies the security descriptor of a user by adding a new ACE.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=152470</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ACL</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

</CmdletHelpPath>
</CmdletHelpPaths>
</ProviderHelp>
</helpItems>
