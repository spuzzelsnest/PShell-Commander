<?xml version="1.0" encoding="utf-8" ?>
<helpItems xmlns="http://msh" schema="maml">
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Invoke-TroubleshootingPack
		</command:name>
		<maml:description>
			<maml:para>Executes a troubleshooting pack in interactive or unattended mode to fix a problem, and then generates a results report.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Invoke</command:verb>
		<command:noun>TroubleshootingPack</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Invoke-TroubleshootingPack cmdlet runs a troubleshooting pack using the object that you get by using the Get-TroubleshootingPack cmdlet. 

This cmdlet can be run in two modes: interactive and unattended
    
-- In interactive mode, the questions are displayed at the console and the user can run resolvers selectively. 

-- In unattended mode, Invoke-TroubleshootingPack runs in the background and, if it detects a root cause, it runs the corresponding resolvers in a predetermined order.

If a troubleshooting pack that is running in unattended mode needs answers to questions in order to run, it can get the answers from the answer file that is associated with the troubleshooting pack. You can generate an answer file for a troubleshooting pack by using the Get-TroubleshootingPack cmdlet.

Invoke-TroubleshootingPack can generate an optional Result Report and Debug Report that contains information about the troubleshooting run, such as which root causes were found. The Debug Report can also contain exceptions that might have occurred during a troubleshooting pack execution. A troubleshooting pack might also add additional files, such as event logs, during its execution to the report folder. To direct Invoke-TroubleshootingPack to generate a Result Report and Debug Report, use the Result parameter to specify the path to where the Result Report and Debug Report will be generated and the additional files added.
</maml:para>	
</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Invoke-TroubleshootingPack</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>answer</maml:name>
				<maml:description>
					<maml:para>Directs Invoke-TroubleshootingPack to look in the specified answer file for answers to questions. Enter the absolute, relative, or UNC path to the XML answer file for the troubleshooting pack. 

An answer file contains the answers to questions that a troubleshooting pack might ask during its execution. To create an answer file, use the Get-TroubleshootingPack cmdlet.
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>result</maml:name>
				<maml:description>
					<maml:para>Directs Invoke-TroubleshootingPack to generate the Result Report and Debug Report. Enter an absolute, relative, or UNC path with no file name. If this parameter is not specified, then the Result Report and Debug Report will not be generated.</maml:para>
		</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>unattend</maml:name>
				<maml:description>
					<maml:para>Runs Invoke-TroubleshootingPack in unattended mode. By default, it runs interactively.</maml:para>
		</maml:description>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>pack</maml:name>
				<maml:description>
					<maml:para>Specifies the troubleshooting pack to run. Enter a variable that contains the troubleshooting pack object. To get the troubleshooting pack object, use the Get-TroubleshootingPack command. 

You cannot submit a path as a value for the Pack parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Diagpack</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>answer</maml:name>
			<maml:description>
				<maml:para>Directs Invoke-TroubleshootingPack to look in the specified answer file for answers to questions. Enter the absolute, relative, or UNC path to the XML answer file for the troubleshooting pack. 

An answer file contains the answers to questions that a troubleshooting pack might ask during its execution. To create an answer file, use the Get-TroubleshootingPack cmdlet.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>pack</maml:name>
			<maml:description>
				<maml:para>Specifies the troubleshooting pack to run. Enter a variable that contains the troubleshooting pack object. To get the troubleshooting pack object, use the Get-TroubleshootingPack command. 

You cannot submit a path as a value for the Pack parameter.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Diagpack</command:parameterValue>
			<dev:type>
				<maml:name>Diagpack</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>result</maml:name>
			<maml:description>
				<maml:para>Directs Invoke-TroubleshootingPack to generate the Result Report and Debug Report. Enter an absolute, relative, or UNC path with no file name. If this parameter is not specified, then the Result Report and Debug Report will not be generated.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>unattend</maml:name>
			<maml:description>
				<maml:para>Invoke-TroubleshootingPack in unattended mode. By default, it runs interactively.</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">switchparameter</command:parameterValue>
			<dev:type>
				<maml:name>switchparameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Microsoft.Windows.Diagnosis.Diagpack</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						This object, which is returned from Get-TroubleshootingPack, is passed into the cmdlet
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Invoke-TroubleshootingPack requires a DiagPack object. To get the object, use the Get-TroubleshootingPack cmdlet.

If Invoke-TroubleshootingPack is running in unattended mode and the answer to a question is not found in the answer file, then Invoke-TroubleshootingPack will return an error to the troubleshooting pack, and the troubleshooting pack can continue or stop executing.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-troubleshootingpack -path C:\Windows\Diagnostics\System\Aero | invoke-troubleshootingpack</dev:code>
  			<dev:remarks>
  			        <maml:para>This command gets a troubleshooting pack using the Get-TroubleshootingPack command and passes it to Invoke-TroubleshootingPack to run. It uses a pipeline operator (|) to send the troubleshooting pack to the Invoke-TroubleshootingPack cmdlet, which runs the troubleshooting pack.

Because Invoke-TroubleshootingPack is run without parameters, it uses all of the default values. It runs interactively, does not use an answer file, and does not create a Result Report and Debug Report.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$aero = get-troubleshootingpack C:\Windows\Diagnostics\System\Aero
invoke-troubleshootingpack -pack $aero -result C:\DiagResult</dev:code>
  			<dev:remarks>
  			        <maml:para>This command uses the Invoke-TroubleshootingPack cmdlet to run a troubleshooting pack and generate a Result Report and Debug Report.

The first command uses the Get-TroubleshootingPack cmdlet to get an object that represents the troubleshooting pack at the specified location. It stores the object in the $aero variable.

The second command uses the Invoke-TroubleshootingPack cmdlet to run the troubleshooting pack. The Invoke-TroubleshootingPack command uses the Pack parameter to specify the troubleshooting pack in the $aero variable and the Result parameter to specify the location of the Result Report and Debug Report.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$aero = get-troubleshootingpack C:\Windows\Diagnostics\System\Aero -answer AeroAnswerFile.xml
invoke-troubleshootingpack -pack $aero -answer AeroAnswerFile.xml -unattend</dev:code>
  			<dev:remarks>
  			        <maml:para>This command runs a troubleshooting pack in unattended mode with an answer file.

The first command uses the Get-TroubleshootingPack cmdlet to get an object that represents the troubleshooting pack at the specified location. It stores the object in the $aero variable. The command uses the Answer parameter of Get-TroubleshootingPack cmdlet to generate an answer file.

The second command uses the Invoke-TroubleshootingPack cmdlet to run the troubleshooting pack in unattended mode. The command uses the Answer parameter of Invoke-TroubleshootingPack to direct the cmdlet to get answers to questions from the answer file.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-TroubleshootingPack</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-TroubleshootingPack
		</command:name>
		<maml:description>
			<maml:para>Gets information about a troubleshooting pack and can generate an answer file.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>TroubleshootingPack</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-TroubleshootingPack cmdlet gets information about a troubleshooting pack, including the name of the troubleshooting pack publisher, the version of the pack, a list of root causes, the set of resolvers that can be run, and the list of questions that the troubleshooting pack might ask during execution. 

The cmdlet can also generate an answer file that contains the responses to the set of questions that the troubleshooting pack might ask during its execution.

A troubleshooting pack is used to troubleshoot and resolve software problems. For more information, please see the relevant MSDN documentation.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-TroubleshootingPack</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>answer</maml:name>
				<maml:description>
					<maml:para>Directs Get-TroubleshootingPack to generate an answer file at the specified location. Enter a relative, absolute, or UNC path and a file name with an xml file extension. If you omit the path, the answer file will be generated in the current working directory. If you omit this parameter, Get-TroubleshootingPack does not generate an answer file.

When you use the Answer parameter, Get-TroubleshootingPack prompts you for an answer to each question that is specified in the troubleshooting pack and writes the answer you provide to the answer file at the specified location. 

The answer file contains answers to questions that a troubleshooting pack might ask. You can pipe the answer file to the Invoke-TroubleshootingPack cmdlet to enable unattended execution of the troubleshooting pack.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the relative, absolute, or UNC path to the troubleshooting pack. This parameter is required. You can type a path or pipe a path to Get-TroubleshootingPack.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>answer</maml:name>
			<maml:description>
				<maml:para>Directs Get-TroubleshootingPack to generate an answer file at the specified location. Enter a relative, absolute, or UNC path and a file name with an xml file extension. If you omit the path, the answer file will be generated in the current working directory. If you omit this parameter, Get-TroubleshootingPack does not generate an answer file.

When you use the Answer parameter, Get-TroubleshootingPack prompts you for an answer to each question that is specified in the troubleshooting pack and writes the answer you provide to the answer file at the specified location.

The answer file contains answers to questions that a troubleshooting pack might ask. You can pipe the answer file to the Invoke-TroubleshootingPack cmdlet to enable unattended execution of the troubleshooting pack.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the relative, absolute, or UNC path to the troubleshooting pack. This parameter is required. You can type a path or pipe a path to Get-TroubleshootingPack.</maml:para>								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.Windows.Diagnosis.Diagpack</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						This object contains information about the troubleshooting pack.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
        		You can pipe the output from Get-TroubleshootingPack to the Invoke-TroubleshootingPack cmdlet. For more information, type "get-help invoke-troubleshootingpack".
        
The default output from the cmdlet shows basic information about the pack: Pack ID, Publisher name, Pack version, Pack name and description, privacy information link, execution environment requirements, and whether or not the troubleshooting pack contains static or dynamic interactions. However, you can use the Get-Member command to see all of the properties and methods of the DiagPack object and use the Select-Object and formatting cmdlets to customizeits display.
        
To access root causes, use the RootCauses array property of the object that Get-TroubleshootingPack returns; each RootCause object can be accessed by specifying an array index.
        
To access resolvers, use the Resolution array property of the RootCause object. To access each resolver, specify an array index, such as $_.RootCauses[0].Resolutions[0] to access the first resolver for the first root cause. 
        
The Interactions property of the DiagPack object contains questions that the troubleshooting pack can be ask during execution. To access a question, use an array index, such as $_.Interactions[1] to access the second question (arrays are zero-based).
        
The answers to questions that a troubleshooting pack might ask during execution can be text, single-select or multi-select, and static (the answer never changes) or dynamic (the answer is generated at run-time). To access the single-select and multi-select static answers, use the Choices array property of the Interactions property.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-troubleshootingpack -path C:\Windows\Diagnostics\System\Aero</dev:code>
  			<dev:remarks>
  			        <maml:para>This command gets information about the troubleshooting pack at the specified location.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$aero = get-troubleshootingpack C:\Windows\Diagnostics\System\Aero
$aero.Rootcauses[2]</dev:code>
  			<dev:remarks>
  			        <maml:para>This example shows how to get to a specific root cause in the RootCauses property, which contains a list (an array) of root causes.

    The first command gets information about the troubleshooting pack at the specified location and stores it in the $aero variable. The second command uses array notation to get the third root cause in the pack.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$aero = get-troubleshootingpack C:\Windows\Diagnostics\System\Aero -answer AeroAnswerFile.xml</dev:code>
  			<dev:remarks>
  			        <maml:para>This example shows how to use Get-TroubleshootingPack to generate an answer file for a troubleshooting pack.  

This command gets information about the troubleshooting pack at the specified location and stores this information into the $aero variable. It also generates an answer file by prompting for an answer to each interaction that is defined in the troubleshooting pack.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$aero = get-troubleshootingpack C:\Windows\Diagnostics\System\Aero
$aero.Rootcauses[2].Resolution[0]</dev:code>
  			<dev:remarks>
  			        <maml:para>This example shows how to get to a specific resolver for a specific root cause.

The first command gets information about the troubleshooting pack at the specified location and stores it in the $aero variable. The second command uses array notation to get the first resolver of the third root cause in the pack.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Invoke-TroubleshootingPack</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
</helpItems>

